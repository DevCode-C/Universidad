

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb 23 22:25:20 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _PORTDbits	set	3971
    70  0000                     _TRISDbits	set	3989
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	opt callstack 0
    75  000800  00                 	db	0
    76  000801                     STR_5:
    77  000801  50                 	db	80	;'P'
    78  000802  72                 	db	114	;'r'
    79  000803  6F                 	db	111	;'o'
    80  000804  67                 	db	103	;'g'
    81  000805  72                 	db	114	;'r'
    82  000806  61                 	db	97	;'a'
    83  000807  6D                 	db	109	;'m'
    84  000808  61                 	db	97	;'a'
    85  000809  63                 	db	99	;'c'
    86  00080A  69                 	db	105	;'i'
    87  00080B  6F                 	db	111	;'o'
    88  00080C  6E                 	db	110	;'n'
    89  00080D  20                 	db	32
    90  00080E  64                 	db	100	;'d'
    91  00080F  65                 	db	101	;'e'
    92  000810  00                 	db	0
    93  000811                     STR_3:
    94  000811  45                 	db	69	;'E'
    95  000812  6C                 	db	108	;'l'
    96  000813  6C                 	db	108	;'l'
    97  000814  61                 	db	97	;'a'
    98  000815  20                 	db	32
    99  000816  6E                 	db	110	;'n'
   100  000817  6F                 	db	111	;'o'
   101  000818  20                 	db	32
   102  000819  74                 	db	116	;'t'
   103  00081A  65                 	db	101	;'e'
   104  00081B  20                 	db	32
   105  00081C  61                 	db	97	;'a'
   106  00081D  6D                 	db	109	;'m'
   107  00081E  61                 	db	97	;'a'
   108  00081F  00                 	db	0
   109  000820                     STR_1:
   110  000820  43                 	db	67	;'C'
   111  000821  75                 	db	117	;'u'
   112  000822  65                 	db	101	;'e'
   113  000823  6E                 	db	110	;'n'
   114  000824  74                 	db	116	;'t'
   115  000825  61                 	db	97	;'a'
   116  000826  20                 	db	32
   117  000827  25                 	db	37
   118  000828  30                 	db	48	;'0'
   119  000829  33                 	db	51	;'3'
   120  00082A  64                 	db	100	;'d'
   121  00082B  00                 	db	0
   122  00082C                     STR_4:
   123  00082C  61                 	db	97	;'a'
   124  00082D  7A                 	db	122	;'z'
   125  00082E  61                 	db	97	;'a'
   126  00082F  65                 	db	101	;'e'
   127  000830  6C                 	db	108	;'l'
   128  000831  20                 	db	32
   129  000832  6D                 	db	109	;'m'
   130  000833  6F                 	db	111	;'o'
   131  000834  72                 	db	114	;'r'
   132  000835  61                 	db	97	;'a'
   133  000836  00                 	db	0
   134  000837                     STR_2:
   135  000837  48                 	db	72	;'H'
   136  000838  6F                 	db	111	;'o'
   137  000839  6C                 	db	108	;'l'
   138  00083A  61                 	db	97	;'a'
   139  00083B  20                 	db	32
   140  00083C  4D                 	db	77	;'M'
   141  00083D  75                 	db	117	;'u'
   142  00083E  6E                 	db	110	;'n'
   143  00083F  64                 	db	100	;'d'
   144  000840  6F                 	db	111	;'o'
   145  000841  00                 	db	0
   146  000842                     STR_6:
   147  000842  65                 	db	101	;'e'
   148  000843  6D                 	db	109	;'m'
   149  000844  62                 	db	98	;'b'
   150  000845  65                 	db	101	;'e'
   151  000846  62                 	db	98	;'b'
   152  000847  69                 	db	105	;'i'
   153  000848  64                 	db	100	;'d'
   154  000849  6F                 	db	111	;'o'
   155  00084A  73                 	db	115	;'s'
   156  00084B  00                 	db	0
   157                           
   158                           ; #config settings
   159  00084C  00                 	db	0	; dummy byte at the end
   160  0000                     
   161                           	psect	cinit
   162  001A7A                     __pcinit:
   163                           	opt callstack 0
   164  001A7A                     start_initialization:
   165                           	opt callstack 0
   166  001A7A                     __initialization:
   167                           	opt callstack 0
   168                           
   169                           ; Clear objects allocated to BANK0 (64 bytes)
   170  001A7A  EE00  F060         	lfsr	0,__pbssBANK0
   171  001A7E  0E40               	movlw	64
   172  001A80                     clear_0:
   173  001A80  6AEE               	clrf	postinc0,c
   174  001A82  06E8               	decf	wreg,f,c
   175  001A84  E1FD               	bnz	clear_0
   176  001A86                     end_of_initialization:
   177                           	opt callstack 0
   178  001A86                     __end_of__initialization:
   179                           	opt callstack 0
   180  001A86  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  001A88  6EF8               	movwf	tblptru,c
   182  001A8A  0100               	movlb	0
   183  001A8C  EFBB  F006         	goto	_main	;jump to C main() function
   184                           
   185                           	psect	bssBANK0
   186  000060                     __pbssBANK0:
   187                           	opt callstack 0
   188  000060                     _nout:
   189                           	opt callstack 0
   190  000060                     	ds	2
   191  000062                     _width:
   192                           	opt callstack 0
   193  000062                     	ds	2
   194  000064                     _prec:
   195                           	opt callstack 0
   196  000064                     	ds	2
   197  000066                     _flags:
   198                           	opt callstack 0
   199  000066                     	ds	2
   200  000068                     _a:
   201                           	opt callstack 0
   202  000068                     	ds	2
   203  00006A                     _i:
   204                           	opt callstack 0
   205  00006A                     	ds	2
   206  00006C                     _dbuf:
   207                           	opt callstack 0
   208  00006C                     	ds	32
   209  00008C                     _palabra:
   210                           	opt callstack 0
   211  00008C                     	ds	20
   212                           
   213                           	psect	cstackBANK0
   214  0000A0                     __pcstackBANK0:
   215                           	opt callstack 0
   216  0000A0                     ?_sprintf:
   217                           	opt callstack 0
   218  0000A0                     sprintf@s:
   219                           	opt callstack 0
   220                           
   221                           ; 2 bytes @ 0x0
   222  0000A0                     	ds	2
   223  0000A2                     sprintf@fmt:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x2
   227  0000A2                     	ds	6
   228  0000A8                     sprintf@ap:
   229                           	opt callstack 0
   230                           
   231                           ; 2 bytes @ 0x8
   232  0000A8                     	ds	2
   233  0000AA                     sprintf@f:
   234                           	opt callstack 0
   235                           
   236                           ; 6 bytes @ 0xA
   237  0000AA                     	ds	6
   238                           
   239                           	psect	cstackCOMRAM
   240  000001                     __pcstackCOMRAM:
   241                           	opt callstack 0
   242  000001                     ??_Lcd_Cmd:
   243  000001                     ??_Lcd_Chr_CP:
   244  000001                     ?_strlen:
   245                           	opt callstack 0
   246  000001                     ?_isdigit:
   247                           	opt callstack 0
   248  000001                     ?_isspace:
   249                           	opt callstack 0
   250  000001                     ?___wmul:
   251                           	opt callstack 0
   252  000001                     ?___aodiv:
   253                           	opt callstack 0
   254  000001                     ?___aomod:
   255                           	opt callstack 0
   256  000001                     ___wmul@multiplier:
   257                           	opt callstack 0
   258  000001                     isdigit@c:
   259                           	opt callstack 0
   260  000001                     isspace@c:
   261                           	opt callstack 0
   262  000001                     fputc@c:
   263                           	opt callstack 0
   264  000001                     strlen@s:
   265                           	opt callstack 0
   266  000001                     ___aodiv@dividend:
   267                           	opt callstack 0
   268  000001                     ___aomod@dividend:
   269                           	opt callstack 0
   270                           
   271                           ; 8 bytes @ 0x0
   272  000001                     	ds	2
   273  000003                     ??_isdigit:
   274  000003                     ??_isspace:
   275  000003                     Lcd_Chr_CP@data:
   276                           	opt callstack 0
   277  000003                     Lcd_Cmd@data:
   278                           	opt callstack 0
   279  000003                     ___wmul@multiplicand:
   280                           	opt callstack 0
   281  000003                     fputc@fp:
   282                           	opt callstack 0
   283  000003                     strlen@a:
   284                           	opt callstack 0
   285                           
   286                           ; 2 bytes @ 0x2
   287  000003                     	ds	1
   288  000004                     ??_Lcd_Init:
   289  000004                     Lcd_Out@x:
   290                           	opt callstack 0
   291  000004                     Lcd_Out2@x:
   292                           	opt callstack 0
   293                           
   294                           ; 1 bytes @ 0x3
   295  000004                     	ds	1
   296  000005                     ??_fputc:
   297  000005                     Lcd_Init@data:
   298                           	opt callstack 0
   299  000005                     Lcd_Out@buffer:
   300                           	opt callstack 0
   301  000005                     Lcd_Out2@buffer:
   302                           	opt callstack 0
   303  000005                     ___wmul@product:
   304                           	opt callstack 0
   305                           
   306                           ; 2 bytes @ 0x4
   307  000005                     	ds	2
   308  000007                     ??_Lcd_Out:
   309  000007                     ??_Lcd_Out2:
   310  000007                     _isspace$729:
   311                           	opt callstack 0
   312                           
   313                           ; 1 bytes @ 0x6
   314  000007                     	ds	1
   315  000008                     ?_atoi:
   316                           	opt callstack 0
   317  000008                     atoi@s:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x7
   321  000008                     	ds	1
   322  000009                     Lcd_Out@y:
   323                           	opt callstack 0
   324  000009                     Lcd_Out2@y:
   325                           	opt callstack 0
   326  000009                     ___aodiv@divisor:
   327                           	opt callstack 0
   328  000009                     ___aomod@divisor:
   329                           	opt callstack 0
   330                           
   331                           ; 8 bytes @ 0x8
   332  000009                     	ds	1
   333  00000A                     ??_atoi:
   334  00000A                     Lcd_Out@data:
   335                           	opt callstack 0
   336  00000A                     Lcd_Out2@data:
   337                           	opt callstack 0
   338  00000A                     fputs@s:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0x9
   342  00000A                     	ds	2
   343  00000C                     fputs@fp:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0xB
   347  00000C                     	ds	2
   348  00000E                     fputs@c:
   349                           	opt callstack 0
   350  00000E                     atoi@neg:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0xD
   354  00000E                     	ds	1
   355  00000F                     fputs@i:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0xE
   359  00000F                     	ds	1
   360  000010                     _atoi$711:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0xF
   364  000010                     	ds	1
   365  000011                     ?_pad:
   366                           	opt callstack 0
   367  000011                     ___aodiv@counter:
   368                           	opt callstack 0
   369  000011                     ___aomod@counter:
   370                           	opt callstack 0
   371  000011                     pad@fp:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x10
   375  000011                     	ds	1
   376  000012                     ___aodiv@sign:
   377                           	opt callstack 0
   378  000012                     ___aomod@sign:
   379                           	opt callstack 0
   380  000012                     _atoi$713:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x11
   384  000012                     	ds	1
   385  000013                     ?_abs:
   386                           	opt callstack 0
   387  000013                     pad@buf:
   388                           	opt callstack 0
   389  000013                     abs@a:
   390                           	opt callstack 0
   391  000013                     ___aodiv@quotient:
   392                           	opt callstack 0
   393                           
   394                           ; 8 bytes @ 0x12
   395  000013                     	ds	1
   396  000014                     _atoi$712:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0x13
   400  000014                     	ds	1
   401  000015                     ??_abs:
   402  000015                     pad@p:
   403                           	opt callstack 0
   404  000015                     atoi@n:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x14
   408  000015                     	ds	2
   409  000017                     ??_pad:
   410                           
   411                           ; 1 bytes @ 0x16
   412  000017                     	ds	1
   413  000018                     pad@i:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x17
   417  000018                     	ds	2
   418  00001A                     pad@w:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x19
   422  00001A                     	ds	2
   423  00001C                     ?_dtoa:
   424                           	opt callstack 0
   425  00001C                     dtoa@fp:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x1B
   429  00001C                     	ds	2
   430  00001E                     dtoa@d:
   431                           	opt callstack 0
   432                           
   433                           ; 8 bytes @ 0x1D
   434  00001E                     	ds	8
   435  000026                     ??_dtoa:
   436                           
   437                           ; 1 bytes @ 0x25
   438  000026                     	ds	8
   439  00002E                     _dtoa$239:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x2D
   443  00002E                     	ds	2
   444  000030                     dtoa@p:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x2F
   448  000030                     	ds	2
   449  000032                     dtoa@w:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x31
   453  000032                     	ds	2
   454  000034                     dtoa@s:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x33
   458  000034                     	ds	2
   459  000036                     dtoa@n:
   460                           	opt callstack 0
   461                           
   462                           ; 8 bytes @ 0x35
   463  000036                     	ds	8
   464  00003E                     dtoa@i:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x3D
   468  00003E                     	ds	2
   469  000040                     ?_vfpfcnvrt:
   470                           	opt callstack 0
   471  000040                     vfpfcnvrt@fp:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x3F
   475  000040                     	ds	2
   476  000042                     vfpfcnvrt@fmt:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x41
   480  000042                     	ds	2
   481  000044                     vfpfcnvrt@ap:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x43
   485  000044                     	ds	2
   486  000046                     ??_vfpfcnvrt:
   487                           
   488                           ; 1 bytes @ 0x45
   489  000046                     	ds	4
   490  00004A                     vfpfcnvrt@ll:
   491                           	opt callstack 0
   492                           
   493                           ; 8 bytes @ 0x49
   494  00004A                     	ds	8
   495  000052                     vfpfcnvrt@done:
   496                           	opt callstack 0
   497                           
   498                           ; 2 bytes @ 0x51
   499  000052                     	ds	2
   500  000054                     _vfpfcnvrt$254:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x53
   504  000054                     	ds	2
   505  000056                     ?_vfprintf:
   506                           	opt callstack 0
   507  000056                     vfprintf@fp:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x55
   511  000056                     	ds	2
   512  000058                     vfprintf@fmt:
   513                           	opt callstack 0
   514                           
   515                           ; 2 bytes @ 0x57
   516  000058                     	ds	2
   517  00005A                     vfprintf@ap:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x59
   521  00005A                     	ds	2
   522  00005C                     vfprintf@cfmt:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x5B
   526  00005C                     	ds	2
   527  00005E                     ??_main:
   528                           
   529                           ; 1 bytes @ 0x5D
   530  00005E                     	ds	2
   531                           
   532 ;;
   533 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   534 ;;
   535 ;; *************** function _main *****************
   536 ;; Defined at:
   537 ;;		line 17 in file "practica5_23_02_19.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   551 ;;      Params:         0       0       0       0       0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0       0       0       0       0
   553 ;;      Temps:          2       0       0       0       0       0       0       0       0
   554 ;;      Totals:         2       0       0       0       0       0       0       0       0
   555 ;;Total ram usage:        2 bytes
   556 ;; Hardware stack levels required when called:    8
   557 ;; This function calls:
   558 ;;		_Lcd_Cmd
   559 ;;		_Lcd_Init
   560 ;;		_Lcd_Out
   561 ;;		_Lcd_Out2
   562 ;;		_sprintf
   563 ;; This function is called by:
   564 ;;		Startup code after reset
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text0
   569  000D76                     __ptext0:
   570                           	opt callstack 0
   571  000D76                     _main:
   572                           	opt callstack 23
   573                           
   574                           ;practica5_23_02_19.c: 22:     {;practica5_23_02_19.c: 25:     Lcd_Init();
   575                           
   576                           ;incstack = 0
   577                           ;practica5_23_02_19.c: 21:     while(1)
   578  000D76  ECC2  F00A         	call	_Lcd_Init	;wreg free
   579                           
   580                           ;practica5_23_02_19.c: 26:     Lcd_Cmd(1);
   581  000D7A  0E01               	movlw	1
   582  000D7C  EC32  F00A         	call	_Lcd_Cmd
   583                           
   584                           ;practica5_23_02_19.c: 27:     Lcd_Cmd(12);
   585  000D80  0E0C               	movlw	12
   586  000D82  EC32  F00A         	call	_Lcd_Cmd
   587                           
   588                           ;practica5_23_02_19.c: 28:     _delay((unsigned long)((100)*(8000000/4000.0)));
   589  000D86  0E02               	movlw	2
   590  000D88  6E5F               	movwf	(??_main+1)& (0+255),c
   591  000D8A  0E04               	movlw	4
   592  000D8C  6E5E               	movwf	??_main& (0+255),c
   593  000D8E  0EBA               	movlw	186
   594  000D90                     u1497:
   595  000D90  2EE8               	decfsz	wreg,f,c
   596  000D92  D7FE               	bra	u1497
   597  000D94  2E5E               	decfsz	??_main& (0+255),f,c
   598  000D96  D7FC               	bra	u1497
   599  000D98  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   600  000D9A  D7FA               	bra	u1497
   601  000D9C  D000               	nop2	
   602                           
   603                           ;practica5_23_02_19.c: 30:     for(i=10; i>0; i--)
   604  000D9E  0E00               	movlw	0
   605  000DA0  0100               	movlb	0	; () banked
   606  000DA2  6F6B               	movwf	(_i+1)& (0+255),b
   607  000DA4  0E0A               	movlw	10
   608  000DA6  6F6A               	movwf	_i& (0+255),b
   609  000DA8                     l2171:
   610                           
   611                           ; BSR set to: 0
   612                           ;practica5_23_02_19.c: 31:     {;practica5_23_02_19.c: 32:     sprintf(palabra,"Cuenta %
      +                          03d",i);
   613  000DA8  0E8C               	movlw	low _palabra
   614  000DAA  6FA0               	movwf	sprintf@s& (0+255),b
   615  000DAC  0E00               	movlw	high _palabra
   616  000DAE  6FA1               	movwf	(sprintf@s+1)& (0+255),b
   617  000DB0  0E20               	movlw	low STR_1
   618  000DB2  6FA2               	movwf	sprintf@fmt& (0+255),b
   619  000DB4  0E08               	movlw	high STR_1
   620  000DB6  6FA3               	movwf	(sprintf@fmt+1)& (0+255),b
   621  000DB8  C06A  F0A4         	movff	_i,?_sprintf+4
   622  000DBC  C06B  F0A5         	movff	_i+1,?_sprintf+5
   623  000DC0  EC80  F00C         	call	_sprintf	;wreg free
   624                           
   625                           ;practica5_23_02_19.c: 33:     Lcd_Out2(1, 1, palabra);
   626  000DC4  0E01               	movlw	1
   627  000DC6  6E04               	movwf	Lcd_Out2@x,c
   628  000DC8  0E8C               	movlw	low _palabra
   629  000DCA  6E05               	movwf	Lcd_Out2@buffer,c
   630  000DCC  0E00               	movlw	high _palabra
   631  000DCE  6E06               	movwf	Lcd_Out2@buffer+1,c
   632  000DD0  0E01               	movlw	1
   633  000DD2  EC1D  F00C         	call	_Lcd_Out2
   634                           
   635                           ;practica5_23_02_19.c: 34:     _delay((unsigned long)((200)*(8000000/4000.0)));
   636  000DD6  0E03               	movlw	3
   637  000DD8  6E5F               	movwf	(??_main+1)& (0+255),c
   638  000DDA  0E08               	movlw	8
   639  000DDC  6E5E               	movwf	??_main& (0+255),c
   640  000DDE  0E77               	movlw	119
   641  000DE0                     u1507:
   642  000DE0  2EE8               	decfsz	wreg,f,c
   643  000DE2  D7FE               	bra	u1507
   644  000DE4  2E5E               	decfsz	??_main& (0+255),f,c
   645  000DE6  D7FC               	bra	u1507
   646  000DE8  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   647  000DEA  D7FA               	bra	u1507
   648  000DEC  F000               	nop	
   649                           
   650                           ;practica5_23_02_19.c: 35:     }
   651  000DEE  0100               	movlb	0	; () banked
   652  000DF0  076A               	decf	_i& (0+255),f,b
   653  000DF2  A0D8               	btfss	status,0,c
   654  000DF4  076B               	decf	(_i+1)& (0+255),f,b
   655                           
   656                           ; BSR set to: 0
   657  000DF6  BF6B               	btfsc	(_i+1)& (0+255),7,b
   658  000DF8  D005               	goto	u1460
   659  000DFA  516B               	movf	(_i+1)& (0+255),w,b
   660  000DFC  E1D5               	bnz	l2171
   661  000DFE  056A               	decf	_i& (0+255),w,b
   662  000E00  B0D8               	btfsc	status,0,c
   663  000E02  D7D2               	goto	l2171
   664  000E04                     u1460:
   665                           
   666                           ; BSR set to: 0
   667                           ;practica5_23_02_19.c: 36:     Lcd_Cmd(1);
   668  000E04  0E01               	movlw	1
   669  000E06  EC32  F00A         	call	_Lcd_Cmd
   670                           
   671                           ;practica5_23_02_19.c: 37:     Lcd_Out(1,1,"Hola Mundo");
   672  000E0A  0E01               	movlw	1
   673  000E0C  6E04               	movwf	Lcd_Out@x,c
   674  000E0E  0E37               	movlw	low STR_2
   675  000E10  6E05               	movwf	Lcd_Out@buffer,c
   676  000E12  0E08               	movlw	high STR_2
   677  000E14  6E06               	movwf	Lcd_Out@buffer+1,c
   678  000E16  0E01               	movlw	1
   679  000E18  ECE2  F00B         	call	_Lcd_Out
   680                           
   681                           ;practica5_23_02_19.c: 38:     for(i=11;i>0;i--){
   682  000E1C  0E00               	movlw	0
   683  000E1E  0100               	movlb	0	; () banked
   684  000E20  6F6B               	movwf	(_i+1)& (0+255),b
   685  000E22  0E0B               	movlw	11
   686  000E24  6F6A               	movwf	_i& (0+255),b
   687  000E26                     l2191:
   688                           
   689                           ; BSR set to: 0
   690                           ;practica5_23_02_19.c: 39:         Lcd_Cmd(24);
   691  000E26  0E18               	movlw	24
   692  000E28  EC32  F00A         	call	_Lcd_Cmd
   693                           
   694                           ;practica5_23_02_19.c: 40:         _delay((unsigned long)((100)*(8000000/4000.0)));
   695  000E2C  0E02               	movlw	2
   696  000E2E  6E5F               	movwf	(??_main+1)& (0+255),c
   697  000E30  0E04               	movlw	4
   698  000E32  6E5E               	movwf	??_main& (0+255),c
   699  000E34  0EBA               	movlw	186
   700  000E36                     u1517:
   701  000E36  2EE8               	decfsz	wreg,f,c
   702  000E38  D7FE               	bra	u1517
   703  000E3A  2E5E               	decfsz	??_main& (0+255),f,c
   704  000E3C  D7FC               	bra	u1517
   705  000E3E  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   706  000E40  D7FA               	bra	u1517
   707  000E42  D000               	nop2	
   708                           
   709                           ;practica5_23_02_19.c: 41:     }
   710  000E44  0100               	movlb	0	; () banked
   711  000E46  076A               	decf	_i& (0+255),f,b
   712  000E48  A0D8               	btfss	status,0,c
   713  000E4A  076B               	decf	(_i+1)& (0+255),f,b
   714                           
   715                           ; BSR set to: 0
   716  000E4C  BF6B               	btfsc	(_i+1)& (0+255),7,b
   717  000E4E  D005               	goto	u1470
   718  000E50  516B               	movf	(_i+1)& (0+255),w,b
   719  000E52  E1E9               	bnz	l2191
   720  000E54  056A               	decf	_i& (0+255),w,b
   721  000E56  B0D8               	btfsc	status,0,c
   722  000E58  D7E6               	goto	l2191
   723  000E5A                     u1470:
   724                           
   725                           ; BSR set to: 0
   726                           ;practica5_23_02_19.c: 42:     Lcd_Cmd(1);
   727  000E5A  0E01               	movlw	1
   728  000E5C  EC32  F00A         	call	_Lcd_Cmd
   729                           
   730                           ;practica5_23_02_19.c: 43:     Lcd_Out(2,1,"Ella no te ama");
   731  000E60  0E01               	movlw	1
   732  000E62  6E04               	movwf	Lcd_Out@x,c
   733  000E64  0E11               	movlw	low STR_3
   734  000E66  6E05               	movwf	Lcd_Out@buffer,c
   735  000E68  0E08               	movlw	high STR_3
   736  000E6A  6E06               	movwf	Lcd_Out@buffer+1,c
   737  000E6C  0E02               	movlw	2
   738  000E6E  ECE2  F00B         	call	_Lcd_Out
   739                           
   740                           ;practica5_23_02_19.c: 44:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   741  000E72  0E0B               	movlw	11
   742  000E74  6E5F               	movwf	(??_main+1)& (0+255),c
   743  000E76  0E26               	movlw	38
   744  000E78  6E5E               	movwf	??_main& (0+255),c
   745  000E7A  0E5E               	movlw	94
   746  000E7C                     u1527:
   747  000E7C  2EE8               	decfsz	wreg,f,c
   748  000E7E  D7FE               	bra	u1527
   749  000E80  2E5E               	decfsz	??_main& (0+255),f,c
   750  000E82  D7FC               	bra	u1527
   751  000E84  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   752  000E86  D7FA               	bra	u1527
   753                           
   754                           ;practica5_23_02_19.c: 47:     Lcd_Cmd(1);
   755  000E88  0E01               	movlw	1
   756  000E8A  EC32  F00A         	call	_Lcd_Cmd
   757                           
   758                           ;practica5_23_02_19.c: 48:      Lcd_Out(1, 1,"azael mora");
   759  000E8E  0E01               	movlw	1
   760  000E90  6E04               	movwf	Lcd_Out@x,c
   761  000E92  0E2C               	movlw	low STR_4
   762  000E94  6E05               	movwf	Lcd_Out@buffer,c
   763  000E96  0E08               	movlw	high STR_4
   764  000E98  6E06               	movwf	Lcd_Out@buffer+1,c
   765  000E9A  0E01               	movlw	1
   766  000E9C  ECE2  F00B         	call	_Lcd_Out
   767                           
   768                           ;practica5_23_02_19.c: 49:      _delay((unsigned long)((1000)*(8000000/4000.0)));
   769  000EA0  0E0B               	movlw	11
   770  000EA2  6E5F               	movwf	(??_main+1)& (0+255),c
   771  000EA4  0E26               	movlw	38
   772  000EA6  6E5E               	movwf	??_main& (0+255),c
   773  000EA8  0E5E               	movlw	94
   774  000EAA                     u1537:
   775  000EAA  2EE8               	decfsz	wreg,f,c
   776  000EAC  D7FE               	bra	u1537
   777  000EAE  2E5E               	decfsz	??_main& (0+255),f,c
   778  000EB0  D7FC               	bra	u1537
   779  000EB2  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   780  000EB4  D7FA               	bra	u1537
   781                           
   782                           ;practica5_23_02_19.c: 51:     for(i=11; i>0; i--)
   783  000EB6  0E00               	movlw	0
   784  000EB8  0100               	movlb	0	; () banked
   785  000EBA  6F6B               	movwf	(_i+1)& (0+255),b
   786  000EBC  0E0B               	movlw	11
   787  000EBE  6F6A               	movwf	_i& (0+255),b
   788  000EC0                     l2215:
   789                           
   790                           ; BSR set to: 0
   791                           ;practica5_23_02_19.c: 52:     {;practica5_23_02_19.c: 53:     Lcd_Cmd(24);
   792  000EC0  0E18               	movlw	24
   793  000EC2  EC32  F00A         	call	_Lcd_Cmd
   794                           
   795                           ;practica5_23_02_19.c: 54:      _delay((unsigned long)((200)*(8000000/4000.0)));
   796  000EC6  0E03               	movlw	3
   797  000EC8  6E5F               	movwf	(??_main+1)& (0+255),c
   798  000ECA  0E08               	movlw	8
   799  000ECC  6E5E               	movwf	??_main& (0+255),c
   800  000ECE  0E77               	movlw	119
   801  000ED0                     u1547:
   802  000ED0  2EE8               	decfsz	wreg,f,c
   803  000ED2  D7FE               	bra	u1547
   804  000ED4  2E5E               	decfsz	??_main& (0+255),f,c
   805  000ED6  D7FC               	bra	u1547
   806  000ED8  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   807  000EDA  D7FA               	bra	u1547
   808  000EDC  F000               	nop	
   809                           
   810                           ;practica5_23_02_19.c: 55:     }
   811  000EDE  0100               	movlb	0	; () banked
   812  000EE0  076A               	decf	_i& (0+255),f,b
   813  000EE2  A0D8               	btfss	status,0,c
   814  000EE4  076B               	decf	(_i+1)& (0+255),f,b
   815                           
   816                           ; BSR set to: 0
   817  000EE6  BF6B               	btfsc	(_i+1)& (0+255),7,b
   818  000EE8  D005               	goto	u1480
   819  000EEA  516B               	movf	(_i+1)& (0+255),w,b
   820  000EEC  E1E9               	bnz	l2215
   821  000EEE  056A               	decf	_i& (0+255),w,b
   822  000EF0  B0D8               	btfsc	status,0,c
   823  000EF2  D7E6               	goto	l2215
   824  000EF4                     u1480:
   825                           
   826                           ; BSR set to: 0
   827                           ;practica5_23_02_19.c: 62:  Lcd_Cmd(1);
   828  000EF4  0E01               	movlw	1
   829  000EF6  EC32  F00A         	call	_Lcd_Cmd
   830                           
   831                           ;practica5_23_02_19.c: 63:     Lcd_Out(1, 1, "Programacion de");
   832  000EFA  0E01               	movlw	1
   833  000EFC  6E04               	movwf	Lcd_Out@x,c
   834  000EFE  0E01               	movlw	low STR_5
   835  000F00  6E05               	movwf	Lcd_Out@buffer,c
   836  000F02  0E08               	movlw	high STR_5
   837  000F04  6E06               	movwf	Lcd_Out@buffer+1,c
   838  000F06  0E01               	movlw	1
   839  000F08  ECE2  F00B         	call	_Lcd_Out
   840                           
   841                           ;practica5_23_02_19.c: 64:      Lcd_Out(2, 4, "embebidos");
   842  000F0C  0E04               	movlw	4
   843  000F0E  6E04               	movwf	Lcd_Out@x,c
   844  000F10  0E42               	movlw	low STR_6
   845  000F12  6E05               	movwf	Lcd_Out@buffer,c
   846  000F14  0E08               	movlw	high STR_6
   847  000F16  6E06               	movwf	Lcd_Out@buffer+1,c
   848  000F18  0E02               	movlw	2
   849  000F1A  ECE2  F00B         	call	_Lcd_Out
   850                           
   851                           ;practica5_23_02_19.c: 65:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   852  000F1E  0E0B               	movlw	11
   853  000F20  6E5F               	movwf	(??_main+1)& (0+255),c
   854  000F22  0E26               	movlw	38
   855  000F24  6E5E               	movwf	??_main& (0+255),c
   856  000F26  0E5E               	movlw	94
   857  000F28                     u1557:
   858  000F28  2EE8               	decfsz	wreg,f,c
   859  000F2A  D7FE               	bra	u1557
   860  000F2C  2E5E               	decfsz	??_main& (0+255),f,c
   861  000F2E  D7FC               	bra	u1557
   862  000F30  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   863  000F32  D7FA               	bra	u1557
   864                           
   865                           ;practica5_23_02_19.c: 66:     Lcd_Cmd(15);
   866  000F34  0E0F               	movlw	15
   867  000F36  EC32  F00A         	call	_Lcd_Cmd
   868                           
   869                           ;practica5_23_02_19.c: 67:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   870  000F3A  0E0B               	movlw	11
   871  000F3C  6E5F               	movwf	(??_main+1)& (0+255),c
   872  000F3E  0E26               	movlw	38
   873  000F40  6E5E               	movwf	??_main& (0+255),c
   874  000F42  0E5E               	movlw	94
   875  000F44                     u1567:
   876  000F44  2EE8               	decfsz	wreg,f,c
   877  000F46  D7FE               	bra	u1567
   878  000F48  2E5E               	decfsz	??_main& (0+255),f,c
   879  000F4A  D7FC               	bra	u1567
   880  000F4C  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   881  000F4E  D7FA               	bra	u1567
   882                           
   883                           ;practica5_23_02_19.c: 68:     Lcd_Cmd(14);
   884  000F50  0E0E               	movlw	14
   885  000F52  EC32  F00A         	call	_Lcd_Cmd
   886                           
   887                           ;practica5_23_02_19.c: 69:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   888  000F56  0E0B               	movlw	11
   889  000F58  6E5F               	movwf	(??_main+1)& (0+255),c
   890  000F5A  0E26               	movlw	38
   891  000F5C  6E5E               	movwf	??_main& (0+255),c
   892  000F5E  0E5E               	movlw	94
   893  000F60                     u1577:
   894  000F60  2EE8               	decfsz	wreg,f,c
   895  000F62  D7FE               	bra	u1577
   896  000F64  2E5E               	decfsz	??_main& (0+255),f,c
   897  000F66  D7FC               	bra	u1577
   898  000F68  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   899  000F6A  D7FA               	bra	u1577
   900                           
   901                           ;practica5_23_02_19.c: 70:     Lcd_Cmd(12);
   902  000F6C  0E0C               	movlw	12
   903  000F6E  EC32  F00A         	call	_Lcd_Cmd
   904                           
   905                           ;practica5_23_02_19.c: 71:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   906  000F72  0E0B               	movlw	11
   907  000F74  6E5F               	movwf	(??_main+1)& (0+255),c
   908  000F76  0E26               	movlw	38
   909  000F78  6E5E               	movwf	??_main& (0+255),c
   910  000F7A  0E5E               	movlw	94
   911  000F7C                     u1587:
   912  000F7C  2EE8               	decfsz	wreg,f,c
   913  000F7E  D7FE               	bra	u1587
   914  000F80  2E5E               	decfsz	??_main& (0+255),f,c
   915  000F82  D7FC               	bra	u1587
   916  000F84  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   917  000F86  D7FA               	bra	u1587
   918                           
   919                           ;practica5_23_02_19.c: 72:     Lcd_Cmd(1);
   920  000F88  0E01               	movlw	1
   921  000F8A  EC32  F00A         	call	_Lcd_Cmd
   922  000F8E  D6F3               	goto	_main
   923  000F90                     __end_of_main:
   924                           	opt callstack 0
   925                           
   926 ;; *************** function _sprintf *****************
   927 ;; Defined at:
   928 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;  s               2    0[BANK0 ] PTR unsigned char 
   931 ;;		 -> palabra(20), 
   932 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
   933 ;;		 -> STR_1(12), 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  f               6   10[BANK0 ] struct _IO_FILE
   936 ;;  ap              2    8[BANK0 ] PTR void [1]
   937 ;;		 -> ?_sprintf(2), 
   938 ;;  ret             2    0        int 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  2    0[BANK0 ] int 
   941 ;; Registers used:
   942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   948 ;;      Params:         0       6       0       0       0       0       0       0       0
   949 ;;      Locals:         0      10       0       0       0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0
   951 ;;      Totals:         0      16       0       0       0       0       0       0       0
   952 ;;Total ram usage:       16 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    7
   955 ;; This function calls:
   956 ;;		_vfprintf
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text1
   963  001900                     __ptext1:
   964                           	opt callstack 0
   965  001900                     _sprintf:
   966                           	opt callstack 23
   967                           
   968                           ;incstack = 0
   969  001900  0EA4               	movlw	low (?_sprintf+4)
   970  001902  0100               	movlb	0	; () banked
   971  001904  6FA8               	movwf	sprintf@ap& (0+255),b
   972  001906  0E00               	movlw	high (?_sprintf+4)
   973  001908  6FA9               	movwf	(sprintf@ap+1)& (0+255),b
   974  00190A  C0A0  F0AA         	movff	sprintf@s,sprintf@f
   975  00190E  C0A1  F0AB         	movff	sprintf@s+1,sprintf@f+1
   976                           
   977                           ; BSR set to: 0
   978  001912  0E00               	movlw	0
   979  001914  6FAD               	movwf	(sprintf@f+3)& (0+255),b
   980  001916  0E00               	movlw	0
   981  001918  6FAC               	movwf	(sprintf@f+2)& (0+255),b
   982                           
   983                           ; BSR set to: 0
   984  00191A  0E00               	movlw	0
   985  00191C  6FAF               	movwf	(sprintf@f+5)& (0+255),b
   986  00191E  0E00               	movlw	0
   987  001920  6FAE               	movwf	(sprintf@f+4)& (0+255),b
   988                           
   989                           ; BSR set to: 0
   990  001922  0EAA               	movlw	low sprintf@f
   991  001924  6E56               	movwf	vfprintf@fp,c
   992  001926  0E00               	movlw	high sprintf@f
   993  001928  6E57               	movwf	vfprintf@fp+1,c
   994  00192A  C0A2  F058         	movff	sprintf@fmt,vfprintf@fmt
   995  00192E  C0A3  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   996  001932  0EA8               	movlw	low sprintf@ap
   997  001934  6E5A               	movwf	vfprintf@ap,c
   998  001936  0E00               	movlw	high sprintf@ap
   999  001938  6E5B               	movwf	vfprintf@ap+1,c
  1000  00193A  EC55  F00C         	call	_vfprintf	;wreg free
  1001  00193E  0100               	movlb	0	; () banked
  1002  001940  51AC               	movf	(sprintf@f+2)& (0+255),w,b
  1003  001942  25A0               	addwf	sprintf@s& (0+255),w,b
  1004  001944  6ED9               	movwf	fsr2l,c
  1005  001946  51AD               	movf	(sprintf@f+3)& (0+255),w,b
  1006  001948  21A1               	addwfc	(sprintf@s+1)& (0+255),w,b
  1007  00194A  6EDA               	movwf	fsr2h,c
  1008  00194C  0E00               	movlw	0
  1009  00194E  6EDF               	movwf	indf2,c
  1010                           
  1011                           ; BSR set to: 0
  1012  001950  0012               	return		;funcret
  1013  001952                     __end_of_sprintf:
  1014                           	opt callstack 0
  1015                           
  1016 ;; *************** function _vfprintf *****************
  1017 ;; Defined at:
  1018 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
  1021 ;;		 -> sprintf@f(6), 
  1022 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
  1023 ;;		 -> STR_1(12), 
  1024 ;;  ap              2   89[COMRAM] PTR PTR void 
  1025 ;;		 -> sprintf@ap(2), 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
  1028 ;;		 -> STR_1(12), 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  2   85[COMRAM] int 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1038 ;;      Params:         6       0       0       0       0       0       0       0       0
  1039 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1041 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1042 ;;Total ram usage:        8 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    6
  1045 ;; This function calls:
  1046 ;;		_vfpfcnvrt
  1047 ;; This function is called by:
  1048 ;;		_sprintf
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text2
  1053  0018AA                     __ptext2:
  1054                           	opt callstack 0
  1055  0018AA                     _vfprintf:
  1056                           	opt callstack 23
  1057                           
  1058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;incstack = 0
  1062  0018AA  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
  1063  0018AE  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1064                           
  1065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1066  0018B2  0E00               	movlw	0
  1067  0018B4  0100               	movlb	0	; () banked
  1068  0018B6  6F61               	movwf	(_nout+1)& (0+255),b
  1069  0018B8  0E00               	movlw	0
  1070  0018BA  6F60               	movwf	_nout& (0+255),b
  1071                           
  1072                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1073  0018BC  D013               	goto	l2039
  1074  0018BE                     l2037:
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1078  0018BE  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  1079  0018C2  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1080  0018C6  0E5C               	movlw	low vfprintf@cfmt
  1081  0018C8  6E42               	movwf	vfpfcnvrt@fmt,c
  1082  0018CA  0E00               	movlw	high vfprintf@cfmt
  1083  0018CC  6E43               	movwf	vfpfcnvrt@fmt+1,c
  1084  0018CE  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  1085  0018D2  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1086  0018D6  EC27  F004         	call	_vfpfcnvrt	;wreg free
  1087  0018DA  5040               	movf	?_vfpfcnvrt,w,c
  1088  0018DC  0100               	movlb	0	; () banked
  1089  0018DE  2760               	addwf	_nout& (0+255),f,b
  1090  0018E0  5041               	movf	?_vfpfcnvrt+1,w,c
  1091  0018E2  2361               	addwfc	(_nout+1)& (0+255),f,b
  1092  0018E4                     l2039:
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1096  0018E4  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1097  0018E8  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1098  0018EC                     	if	0	;tblptru may be non-zero
  1099  0018EC                     	endif
  1100  0018EC                     	if	0	;tblptru may be non-zero
  1101  0018EC                     	endif
  1102  0018EC  0008               	tblrd		*
  1103  0018EE  50F5               	movf	tablat,w,c
  1104  0018F0  0900               	iorlw	0
  1105  0018F2  A4D8               	btfss	status,2,c
  1106  0018F4  D7E4               	goto	l2037
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1110  0018F6  C060  F056         	movff	_nout,?_vfprintf
  1111  0018FA  C061  F057         	movff	_nout+1,?_vfprintf+1
  1112                           
  1113                           ; BSR set to: 0
  1114  0018FE  0012               	return		;funcret
  1115  001900                     __end_of_vfprintf:
  1116                           	opt callstack 0
  1117                           
  1118 ;; *************** function _vfpfcnvrt *****************
  1119 ;; Defined at:
  1120 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1123 ;;		 -> sprintf@f(6), 
  1124 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1125 ;;		 -> vfprintf@cfmt(2), 
  1126 ;;  ap              2   67[COMRAM] PTR PTR void 
  1127 ;;		 -> sprintf@ap(2), 
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;  ll              8   73[COMRAM] long long 
  1130 ;;  llu             8    0        unsigned long long 
  1131 ;;  f               4    0        unsigned long long 
  1132 ;;  vp              3    0        PTR void 
  1133 ;;  ct              3    0        unsigned char [3]
  1134 ;;  cp              3    0        PTR unsigned char 
  1135 ;;  done            2   81[COMRAM] int 
  1136 ;;  i               2    0        int 
  1137 ;;  c               1    0        unsigned char 
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  2   63[COMRAM] int 
  1140 ;; Registers used:
  1141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1147 ;;      Params:         6       0       0       0       0       0       0       0       0
  1148 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1149 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1150 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1151 ;;Total ram usage:       22 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    5
  1154 ;; This function calls:
  1155 ;;		_atoi
  1156 ;;		_dtoa
  1157 ;;		_fputc
  1158 ;;		_isdigit
  1159 ;; This function is called by:
  1160 ;;		_vfprintf
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text3
  1165  00084E                     __ptext3:
  1166                           	opt callstack 0
  1167  00084E                     _vfpfcnvrt:
  1168                           	opt callstack 23
  1169                           
  1170                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;incstack = 0
  1174  00084E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1175  000852  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1176  000856  CFDE FFF6          	movff	postinc2,tblptrl
  1177  00085A  CFDD FFF7          	movff	postdec2,tblptrh
  1178  00085E                     	if	0	;tblptru may be non-zero
  1179  00085E                     	endif
  1180  00085E                     	if	0	;tblptru may be non-zero
  1181  00085E                     	endif
  1182  00085E  0008               	tblrd		*
  1183  000860  50F5               	movf	tablat,w,c
  1184  000862  0A25               	xorlw	37
  1185  000864  A4D8               	btfss	status,2,c
  1186  000866  D14A               	goto	l1973
  1187                           
  1188                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1189  000868  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1190  00086C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1191  000870  2ADE               	incf	postinc2,f,c
  1192  000872  0E00               	movlw	0
  1193  000874  22DD               	addwfc	postdec2,f,c
  1194                           
  1195                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1196  000876  0E00               	movlw	0
  1197  000878  0100               	movlb	0	; () banked
  1198  00087A  6F63               	movwf	(_width+1)& (0+255),b
  1199  00087C  0E00               	movlw	0
  1200  00087E  6F62               	movwf	_width& (0+255),b
  1201  000880  C062  F066         	movff	_width,_flags
  1202  000884  C063  F067         	movff	_width+1,_flags+1
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1206  000888  6964               	setf	_prec& (0+255),b
  1207  00088A  6965               	setf	(_prec+1)& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1211  00088C  0E00               	movlw	0
  1212  00088E  6E53               	movwf	vfpfcnvrt@done+1,c
  1213  000890  0E00               	movlw	0
  1214  000892  D019               	goto	L1
  1215  000894                     l1899:
  1216                           
  1217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1218  000894  0100               	movlb	0	; () banked
  1219  000896  8166               	bsf	_flags& (0+255),0,b
  1220  000898                     l1901:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1224  000898  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1225  00089C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1226  0008A0  2ADE               	incf	postinc2,f,c
  1227  0008A2  0E00               	movlw	0
  1228  0008A4  22DD               	addwfc	postdec2,f,c
  1229                           
  1230                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1231  0008A6  D032               	goto	l1925
  1232  0008A8                     l1903:
  1233                           
  1234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1235  0008A8  0100               	movlb	0	; () banked
  1236  0008AA  8366               	bsf	_flags& (0+255),1,b
  1237  0008AC  D7F5               	goto	l1901
  1238  0008AE                     l1907:
  1239                           
  1240                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1241  0008AE  0100               	movlb	0	; () banked
  1242  0008B0  8566               	bsf	_flags& (0+255),2,b
  1243  0008B2  D7F2               	goto	l1901
  1244  0008B4                     l1911:
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1247  0008B4  0100               	movlb	0	; () banked
  1248  0008B6  8766               	bsf	_flags& (0+255),3,b
  1249  0008B8  D7EF               	goto	l1901
  1250  0008BA                     l1915:
  1251                           
  1252                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1253  0008BA  0100               	movlb	0	; () banked
  1254  0008BC  8966               	bsf	_flags& (0+255),4,b
  1255  0008BE  D7EC               	goto	l1901
  1256  0008C0                     l1919:
  1257                           
  1258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1259  0008C0  0E00               	movlw	0
  1260  0008C2  6E53               	movwf	vfpfcnvrt@done+1,c
  1261  0008C4  0E01               	movlw	1
  1262  0008C6                     L1:
  1263  0008C6  6E52               	movwf	vfpfcnvrt@done,c
  1264                           
  1265                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1266  0008C8  D021               	goto	l1925
  1267  0008CA                     l1923:
  1268  0008CA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1269  0008CE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1270  0008D2  CFDE FFF6          	movff	postinc2,tblptrl
  1271  0008D6  CFDD FFF7          	movff	postdec2,tblptrh
  1272  0008DA                     	if	0	;tblptru may be non-zero
  1273  0008DA                     	endif
  1274  0008DA                     	if	0	;tblptru may be non-zero
  1275  0008DA                     	endif
  1276  0008DA  0008               	tblrd		*
  1277  0008DC  50F5               	movf	tablat,w,c
  1278  0008DE  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1279  0008E0  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1280                           
  1281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1282                           ; Switch size 1, requested type "simple"
  1283                           ; Number of cases is 1, Range of values is 0 to 0
  1284                           ; switch strategies available:
  1285                           ; Name         Instructions Cycles
  1286                           ; simple_byte            4     3 (average)
  1287                           ;	Chosen strategy is simple_byte
  1288  0008E2  5047               	movf	??_vfpfcnvrt+1,w,c
  1289  0008E4  0A00               	xorlw	0	; case 0
  1290  0008E6  A4D8               	btfss	status,2,c
  1291  0008E8  D7EB               	goto	l1919
  1292                           
  1293                           ; Switch size 1, requested type "simple"
  1294                           ; Number of cases is 5, Range of values is 32 to 48
  1295                           ; switch strategies available:
  1296                           ; Name         Instructions Cycles
  1297                           ; simple_byte           16     9 (average)
  1298                           ;	Chosen strategy is simple_byte
  1299  0008EA  5046               	movf	??_vfpfcnvrt,w,c
  1300  0008EC  0A20               	xorlw	32	; case 32
  1301  0008EE  B4D8               	btfsc	status,2,c
  1302  0008F0  D7E1               	goto	l1911
  1303  0008F2  0A03               	xorlw	3	; case 35
  1304  0008F4  B4D8               	btfsc	status,2,c
  1305  0008F6  D7E1               	goto	l1915
  1306  0008F8  0A08               	xorlw	8	; case 43
  1307  0008FA  B4D8               	btfsc	status,2,c
  1308  0008FC  D7D8               	goto	l1907
  1309  0008FE  0A06               	xorlw	6	; case 45
  1310  000900  B4D8               	btfsc	status,2,c
  1311  000902  D7C8               	goto	l1899
  1312  000904  0A1D               	xorlw	29	; case 48
  1313  000906  B4D8               	btfsc	status,2,c
  1314  000908  D7CF               	goto	l1903
  1315  00090A  D7DA               	goto	l1919
  1316  00090C                     l1925:
  1317                           
  1318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1319  00090C  5052               	movf	vfpfcnvrt@done,w,c
  1320  00090E  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1321  000910  B4D8               	btfsc	status,2,c
  1322  000912  D7DB               	goto	l1923
  1323                           
  1324                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1325  000914  0100               	movlb	0	; () banked
  1326  000916  B166               	btfsc	_flags& (0+255),0,b
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1330  000918  9366               	bcf	_flags& (0+255),1,b
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1334  00091A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1335  00091E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1336  000922  CFDE FFF6          	movff	postinc2,tblptrl
  1337  000926  CFDD FFF7          	movff	postdec2,tblptrh
  1338  00092A                     	if	0	;tblptru may be non-zero
  1339  00092A                     	endif
  1340  00092A                     	if	0	;tblptru may be non-zero
  1341  00092A                     	endif
  1342  00092A  0008               	tblrd		*
  1343  00092C  50F5               	movf	tablat,w,c
  1344  00092E  0A2A               	xorlw	42
  1345  000930  A4D8               	btfss	status,2,c
  1346  000932  D023               	goto	l1937
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1350  000934  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1351  000938  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1352  00093C  2ADE               	incf	postinc2,f,c
  1353  00093E  0E00               	movlw	0
  1354  000940  22DD               	addwfc	postdec2,f,c
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1357  000942  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1358  000946  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1359  00094A  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1360  00094E  0E02               	movlw	2
  1361  000950  26DE               	addwf	postinc2,f,c
  1362  000952  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1363  000956  0E00               	movlw	0
  1364  000958  22DD               	addwfc	postdec2,f,c
  1365  00095A  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1366  00095E  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1367  000962  CFDE F062          	movff	postinc2,_width
  1368  000966  CFDD F063          	movff	postdec2,_width+1
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1372  00096A  AF63               	btfss	(_width+1)& (0+255),7,b
  1373  00096C  D03F               	goto	u1320
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1377  00096E  8166               	bsf	_flags& (0+255),0,b
  1378                           
  1379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1380  000970  6D62               	negf	_width& (0+255),b
  1381  000972  1F63               	comf	(_width+1)& (0+255),f,b
  1382  000974  B0D8               	btfsc	status,0,c
  1383  000976  2B63               	incf	(_width+1)& (0+255),f,b
  1384  000978  D039               	goto	u1320
  1385  00097A                     l1937:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1389  00097A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1390  00097E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1391  000982  CFDE F008          	movff	postinc2,atoi@s
  1392  000986  CFDD F009          	movff	postdec2,atoi@s+1
  1393  00098A  EC6C  F008         	call	_atoi	;wreg free
  1394  00098E  C008  F062         	movff	?_atoi,_width
  1395  000992  C009  F063         	movff	?_atoi+1,_width+1
  1396                           
  1397                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1398  000996  D007               	goto	l1941
  1399  000998                     l1939:
  1400                           
  1401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1402  000998  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1403  00099C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1404  0009A0  2ADE               	incf	postinc2,f,c
  1405  0009A2  0E00               	movlw	0
  1406  0009A4  22DD               	addwfc	postdec2,f,c
  1407  0009A6                     l1941:
  1408  0009A6  0ED0               	movlw	208
  1409  0009A8  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1410  0009AA  0EFF               	movlw	255
  1411  0009AC  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1412  0009AE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1413  0009B2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1414  0009B6  CFDE FFF6          	movff	postinc2,tblptrl
  1415  0009BA  CFDD FFF7          	movff	postdec2,tblptrh
  1416  0009BE                     	if	0	;tblptru may be non-zero
  1417  0009BE                     	endif
  1418  0009BE                     	if	0	;tblptru may be non-zero
  1419  0009BE                     	endif
  1420  0009BE  0008               	tblrd		*
  1421  0009C0  50F5               	movf	tablat,w,c
  1422  0009C2  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1423  0009C4  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1424  0009C6  5046               	movf	??_vfpfcnvrt,w,c
  1425  0009C8  2648               	addwf	??_vfpfcnvrt+2,f,c
  1426  0009CA  5047               	movf	??_vfpfcnvrt+1,w,c
  1427  0009CC  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1428  0009CE  5049               	movf	??_vfpfcnvrt+3,w,c
  1429  0009D0  E106               	bnz	u1300
  1430  0009D2  0E0A               	movlw	10
  1431  0009D4  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1432  0009D6  B0D8               	btfsc	status,0,c
  1433  0009D8  D002               	goto	u1300
  1434  0009DA  0E01               	movlw	1
  1435  0009DC  D001               	goto	u1310
  1436  0009DE                     u1300:
  1437  0009DE  0E00               	movlw	0
  1438  0009E0                     u1310:
  1439  0009E0  6E54               	movwf	_vfpfcnvrt$254,c
  1440  0009E2  6A55               	clrf	_vfpfcnvrt$254+1,c
  1441  0009E4  5054               	movf	_vfpfcnvrt$254,w,c
  1442  0009E6  1055               	iorwf	_vfpfcnvrt$254+1,w,c
  1443  0009E8  A4D8               	btfss	status,2,c
  1444  0009EA  D7D6               	goto	l1939
  1445  0009EC                     u1320:
  1446                           
  1447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1448  0009EC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1449  0009F0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1450  0009F4  CFDE FFF6          	movff	postinc2,tblptrl
  1451  0009F8  CFDD FFF7          	movff	postdec2,tblptrh
  1452  0009FC                     	if	0	;tblptru may be non-zero
  1453  0009FC                     	endif
  1454  0009FC                     	if	0	;tblptru may be non-zero
  1455  0009FC                     	endif
  1456  0009FC  0008               	tblrd		*
  1457  0009FE  50F5               	movf	tablat,w,c
  1458  000A00  0A64               	xorlw	100
  1459  000A02  B4D8               	btfsc	status,2,c
  1460  000A04  D00D               	goto	u1340
  1461  000A06  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1462  000A0A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1463  000A0E  CFDE FFF6          	movff	postinc2,tblptrl
  1464  000A12  CFDD FFF7          	movff	postdec2,tblptrh
  1465  000A16                     	if	0	;tblptru may be non-zero
  1466  000A16                     	endif
  1467  000A16                     	if	0	;tblptru may be non-zero
  1468  000A16                     	endif
  1469  000A16  0008               	tblrd		*
  1470  000A18  50F5               	movf	tablat,w,c
  1471  000A1A  0A69               	xorlw	105
  1472  000A1C  A4D8               	btfss	status,2,c
  1473  000A1E  D03F               	goto	l1957
  1474  000A20                     u1340:
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1477  000A20  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1478  000A24  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1479  000A28  2ADE               	incf	postinc2,f,c
  1480  000A2A  0E00               	movlw	0
  1481  000A2C  22DD               	addwfc	postdec2,f,c
  1482                           
  1483                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1484  000A2E  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1485  000A32  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1486  000A36  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1487  000A3A  0E02               	movlw	2
  1488  000A3C  26DE               	addwf	postinc2,f,c
  1489  000A3E  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1490  000A42  0E00               	movlw	0
  1491  000A44  22DD               	addwfc	postdec2,f,c
  1492  000A46  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1493  000A4A  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1494  000A4E  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1495  000A52  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1496  000A56  0E00               	movlw	0
  1497  000A58  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1498  000A5A  0EFF               	movlw	-1
  1499  000A5C  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1500  000A5E  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1501  000A60  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1502  000A62  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1503  000A64  6E50               	movwf	vfpfcnvrt@ll+6,c
  1504  000A66  6E51               	movwf	vfpfcnvrt@ll+7,c
  1505                           
  1506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1507  000A68  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1508  000A6C  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1509  000A70  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1510  000A74  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1511  000A78  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1512  000A7C  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1513  000A80  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1514  000A84  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1515  000A88  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1516  000A8C  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1517  000A90  EC98  F005         	call	_dtoa	;wreg free
  1518  000A94  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1519  000A98  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1520  000A9C  0012               	return	
  1521  000A9E                     l1957:
  1522                           
  1523                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1524  000A9E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1525  000AA2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1526  000AA6  CFDE FFF6          	movff	postinc2,tblptrl
  1527  000AAA  CFDD FFF7          	movff	postdec2,tblptrh
  1528  000AAE                     	if	0	;tblptru may be non-zero
  1529  000AAE                     	endif
  1530  000AAE                     	if	0	;tblptru may be non-zero
  1531  000AAE                     	endif
  1532  000AAE  0008               	tblrd		*
  1533  000AB0  50F5               	movf	tablat,w,c
  1534  000AB2  0A25               	xorlw	37
  1535  000AB4  A4D8               	btfss	status,2,c
  1536  000AB6  D016               	goto	l1967
  1537                           
  1538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1539  000AB8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1540  000ABC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1541  000AC0  2ADE               	incf	postinc2,f,c
  1542  000AC2  0E00               	movlw	0
  1543  000AC4  22DD               	addwfc	postdec2,f,c
  1544                           
  1545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1546  000AC6  0E00               	movlw	0
  1547  000AC8  6E02               	movwf	fputc@c+1,c
  1548  000ACA  0E25               	movlw	37
  1549  000ACC  6E01               	movwf	fputc@c,c
  1550  000ACE  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1551  000AD2  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1552  000AD6  EC45  F00B         	call	_fputc	;wreg free
  1553  000ADA                     l1963:
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1556  000ADA  0E00               	movlw	0
  1557  000ADC  6E41               	movwf	?_vfpfcnvrt+1,c
  1558  000ADE  0E01               	movlw	1
  1559  000AE0  6E40               	movwf	?_vfpfcnvrt,c
  1560  000AE2  0012               	return	
  1561  000AE4                     l1967:
  1562                           
  1563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1564  000AE4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1565  000AE8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1566  000AEC  2ADE               	incf	postinc2,f,c
  1567  000AEE  0E00               	movlw	0
  1568  000AF0  22DD               	addwfc	postdec2,f,c
  1569                           
  1570                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1571  000AF2  0E00               	movlw	0
  1572  000AF4  6E41               	movwf	?_vfpfcnvrt+1,c
  1573  000AF6  0E00               	movlw	0
  1574  000AF8  6E40               	movwf	?_vfpfcnvrt,c
  1575  000AFA  0012               	return	
  1576  000AFC                     l1973:
  1577                           
  1578                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1579  000AFC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1580  000B00  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1581  000B04  CFDE FFF6          	movff	postinc2,tblptrl
  1582  000B08  CFDD FFF7          	movff	postdec2,tblptrh
  1583  000B0C                     	if	0	;tblptru may be non-zero
  1584  000B0C                     	endif
  1585  000B0C                     	if	0	;tblptru may be non-zero
  1586  000B0C                     	endif
  1587  000B0C  0008               	tblrd		*
  1588  000B0E  50F5               	movf	tablat,w,c
  1589  000B10  6E01               	movwf	fputc@c,c
  1590  000B12  6A02               	clrf	fputc@c+1,c
  1591  000B14  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1592  000B18  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1593  000B1C  EC45  F00B         	call	_fputc	;wreg free
  1594                           
  1595                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1596  000B20  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1597  000B24  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1598  000B28  2ADE               	incf	postinc2,f,c
  1599  000B2A  0E00               	movlw	0
  1600  000B2C  22DD               	addwfc	postdec2,f,c
  1601  000B2E  D7D5               	goto	l1963
  1602  000B30                     __end_of_vfpfcnvrt:
  1603                           	opt callstack 0
  1604                           
  1605 ;; *************** function _dtoa *****************
  1606 ;; Defined at:
  1607 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1610 ;;		 -> sprintf@f(6), 
  1611 ;;  d               8   29[COMRAM] long long 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  n               8   53[COMRAM] long long 
  1614 ;;  i               2   61[COMRAM] int 
  1615 ;;  s               2   51[COMRAM] int 
  1616 ;;  w               2   49[COMRAM] int 
  1617 ;;  p               2   47[COMRAM] int 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  2   27[COMRAM] int 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1627 ;;      Params:        10       0       0       0       0       0       0       0       0
  1628 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1629 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1630 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1631 ;;Total ram usage:       36 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    4
  1634 ;; This function calls:
  1635 ;;		___aodiv
  1636 ;;		___aomod
  1637 ;;		_abs
  1638 ;;		_pad
  1639 ;; This function is called by:
  1640 ;;		_vfpfcnvrt
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text4
  1645  000B30                     __ptext4:
  1646                           	opt callstack 0
  1647  000B30                     _dtoa:
  1648                           	opt callstack 23
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1651                           
  1652                           ;incstack = 0
  1653  000B30  C01E  F036         	movff	dtoa@d,dtoa@n
  1654  000B34  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1655  000B38  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1656  000B3C  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1657  000B40  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1658  000B44  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1659  000B48  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1660  000B4C  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1661                           
  1662                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1663  000B50  AE3D               	btfss	dtoa@n+7,7,c
  1664  000B52  D002               	goto	u1030
  1665  000B54  0E01               	movlw	1
  1666  000B56  D001               	goto	u1040
  1667  000B58                     u1030:
  1668  000B58  0E00               	movlw	0
  1669  000B5A                     u1040:
  1670  000B5A  6E34               	movwf	dtoa@s,c
  1671  000B5C  6A35               	clrf	dtoa@s+1,c
  1672                           
  1673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1674  000B5E  5034               	movf	dtoa@s,w,c
  1675  000B60  1035               	iorwf	dtoa@s+1,w,c
  1676  000B62  B4D8               	btfsc	status,2,c
  1677  000B64  D010               	goto	l1791
  1678                           
  1679                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1680  000B66  1E3D               	comf	dtoa@n+7,f,c
  1681  000B68  1E3C               	comf	dtoa@n+6,f,c
  1682  000B6A  1E3B               	comf	dtoa@n+5,f,c
  1683  000B6C  1E3A               	comf	dtoa@n+4,f,c
  1684  000B6E  1E39               	comf	dtoa@n+3,f,c
  1685  000B70  1E38               	comf	dtoa@n+2,f,c
  1686  000B72  1E37               	comf	dtoa@n+1,f,c
  1687  000B74  6C36               	negf	dtoa@n,c
  1688  000B76  0E00               	movlw	0
  1689  000B78  2237               	addwfc	dtoa@n+1,f,c
  1690  000B7A  2238               	addwfc	dtoa@n+2,f,c
  1691  000B7C  2239               	addwfc	dtoa@n+3,f,c
  1692  000B7E  223A               	addwfc	dtoa@n+4,f,c
  1693  000B80  223B               	addwfc	dtoa@n+5,f,c
  1694  000B82  223C               	addwfc	dtoa@n+6,f,c
  1695  000B84  223D               	addwfc	dtoa@n+7,f,c
  1696  000B86                     l1791:
  1697                           
  1698                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1699  000B86  0100               	movlb	0	; () banked
  1700  000B88  AF65               	btfss	(_prec+1)& (0+255),7,b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1704  000B8A  9366               	bcf	_flags& (0+255),1,b
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1708  000B8C  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1709  000B8E  D005               	goto	u1070
  1710  000B90  5165               	movf	(_prec+1)& (0+255),w,b
  1711  000B92  E108               	bnz	l111
  1712  000B94  0564               	decf	_prec& (0+255),w,b
  1713  000B96  B0D8               	btfsc	status,0,c
  1714  000B98  D005               	goto	l111
  1715  000B9A                     u1070:
  1716                           
  1717                           ; BSR set to: 0
  1718  000B9A  0E00               	movlw	0
  1719  000B9C  6E31               	movwf	dtoa@p+1,c
  1720  000B9E  0E01               	movlw	1
  1721  000BA0  6E30               	movwf	dtoa@p,c
  1722  000BA2  D004               	goto	l113
  1723  000BA4                     l111:
  1724                           
  1725                           ; BSR set to: 0
  1726  000BA4  C064  F030         	movff	_prec,dtoa@p
  1727  000BA8  C065  F031         	movff	_prec+1,dtoa@p+1
  1728  000BAC                     l113:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1732  000BAC  C062  F032         	movff	_width,dtoa@w
  1733  000BB0  C063  F033         	movff	_width+1,dtoa@w+1
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1737  000BB4  5034               	movf	dtoa@s,w,c
  1738  000BB6  1035               	iorwf	dtoa@s+1,w,c
  1739  000BB8  A4D8               	btfss	status,2,c
  1740  000BBA  D002               	goto	u1090
  1741                           
  1742                           ; BSR set to: 0
  1743  000BBC  A566               	btfss	_flags& (0+255),2,b
  1744  000BBE  D003               	goto	l1805
  1745  000BC0                     u1090:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1749  000BC0  0632               	decf	dtoa@w,f,c
  1750  000BC2  A0D8               	btfss	status,0,c
  1751  000BC4  0633               	decf	dtoa@w+1,f,c
  1752  000BC6                     l1805:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1756  000BC6  0E00               	movlw	0
  1757  000BC8  6E3F               	movwf	dtoa@i+1,c
  1758  000BCA  0E1F               	movlw	31
  1759  000BCC  6E3E               	movwf	dtoa@i,c
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1763  000BCE  0E00               	movlw	0
  1764  000BD0  6F8B               	movwf	(_dbuf+31)& (0+255),b
  1765                           
  1766                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1767  000BD2  D07C               	goto	l1819
  1768  000BD4                     l1809:
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1771  000BD4  063E               	decf	dtoa@i,f,c
  1772  000BD6  A0D8               	btfss	status,0,c
  1773  000BD8  063F               	decf	dtoa@i+1,f,c
  1774                           
  1775                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1776  000BDA  0E6C               	movlw	low _dbuf
  1777  000BDC  243E               	addwf	dtoa@i,w,c
  1778  000BDE  6ED9               	movwf	fsr2l,c
  1779  000BE0  0E00               	movlw	high _dbuf
  1780  000BE2  203F               	addwfc	dtoa@i+1,w,c
  1781  000BE4  6EDA               	movwf	fsr2h,c
  1782  000BE6  C036  F001         	movff	dtoa@n,___aomod@dividend
  1783  000BEA  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1784  000BEE  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1785  000BF2  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1786  000BF6  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1787  000BFA  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1788  000BFE  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1789  000C02  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1790  000C06  0E0A               	movlw	10
  1791  000C08  6E09               	movwf	___aomod@divisor,c
  1792  000C0A  0E00               	movlw	0
  1793  000C0C  6E0A               	movwf	___aomod@divisor+1,c
  1794  000C0E  0E00               	movlw	0
  1795  000C10  6E0B               	movwf	___aomod@divisor+2,c
  1796  000C12  0E00               	movlw	0
  1797  000C14  6E0C               	movwf	___aomod@divisor+3,c
  1798  000C16  0E00               	movlw	0
  1799  000C18  6E0D               	movwf	___aomod@divisor+4,c
  1800  000C1A  0E00               	movlw	0
  1801  000C1C  6E0E               	movwf	___aomod@divisor+5,c
  1802  000C1E  0E00               	movlw	0
  1803  000C20  6E0F               	movwf	___aomod@divisor+6,c
  1804  000C22  0E00               	movlw	0
  1805  000C24  6E10               	movwf	___aomod@divisor+7,c
  1806  000C26  ECA0  F009         	call	___aomod	;wreg free
  1807  000C2A  C001  F026         	movff	?___aomod,??_dtoa
  1808  000C2E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1809  000C32  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1810  000C36  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1811  000C3A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1812  000C3E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1813  000C42  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1814  000C46  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1815  000C4A  C026  F013         	movff	??_dtoa,abs@a
  1816  000C4E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1817  000C52  ECE4  F00C         	call	_abs	;wreg free
  1818  000C56  5013               	movf	?_abs,w,c
  1819  000C58  0F30               	addlw	48
  1820  000C5A  6EDF               	movwf	indf2,c
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1823  000C5C  0630               	decf	dtoa@p,f,c
  1824  000C5E  A0D8               	btfss	status,0,c
  1825  000C60  0631               	decf	dtoa@p+1,f,c
  1826                           
  1827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1828  000C62  0632               	decf	dtoa@w,f,c
  1829  000C64  A0D8               	btfss	status,0,c
  1830  000C66  0633               	decf	dtoa@w+1,f,c
  1831                           
  1832                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1833  000C68  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1834  000C6C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1835  000C70  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1836  000C74  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1837  000C78  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1838  000C7C  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1839  000C80  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1840  000C84  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1841  000C88  0E0A               	movlw	10
  1842  000C8A  6E09               	movwf	___aodiv@divisor,c
  1843  000C8C  0E00               	movlw	0
  1844  000C8E  6E0A               	movwf	___aodiv@divisor+1,c
  1845  000C90  0E00               	movlw	0
  1846  000C92  6E0B               	movwf	___aodiv@divisor+2,c
  1847  000C94  0E00               	movlw	0
  1848  000C96  6E0C               	movwf	___aodiv@divisor+3,c
  1849  000C98  0E00               	movlw	0
  1850  000C9A  6E0D               	movwf	___aodiv@divisor+4,c
  1851  000C9C  0E00               	movlw	0
  1852  000C9E  6E0E               	movwf	___aodiv@divisor+5,c
  1853  000CA0  0E00               	movlw	0
  1854  000CA2  6E0F               	movwf	___aodiv@divisor+6,c
  1855  000CA4  0E00               	movlw	0
  1856  000CA6  6E10               	movwf	___aodiv@divisor+7,c
  1857  000CA8  ECC8  F007         	call	___aodiv	;wreg free
  1858  000CAC  C001  F036         	movff	?___aodiv,dtoa@n
  1859  000CB0  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1860  000CB4  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1861  000CB8  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1862  000CBC  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1863  000CC0  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1864  000CC4  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1865  000CC8  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1866  000CCC                     l1819:
  1867                           
  1868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1869  000CCC  BE3F               	btfsc	dtoa@i+1,7,c
  1870  000CCE  D020               	goto	u1140
  1871  000CD0  503F               	movf	dtoa@i+1,w,c
  1872  000CD2  E103               	bnz	u1100
  1873  000CD4  043E               	decf	dtoa@i,w,c
  1874  000CD6  A0D8               	btfss	status,0,c
  1875  000CD8  D01B               	goto	u1140
  1876  000CDA                     u1100:
  1877  000CDA  5036               	movf	dtoa@n,w,c
  1878  000CDC  1037               	iorwf	dtoa@n+1,w,c
  1879  000CDE  1038               	iorwf	dtoa@n+2,w,c
  1880  000CE0  1039               	iorwf	dtoa@n+3,w,c
  1881  000CE2  103A               	iorwf	dtoa@n+4,w,c
  1882  000CE4  103B               	iorwf	dtoa@n+5,w,c
  1883  000CE6  103C               	iorwf	dtoa@n+6,w,c
  1884  000CE8  103D               	iorwf	dtoa@n+7,w,c
  1885  000CEA  A4D8               	btfss	status,2,c
  1886  000CEC  D773               	goto	l1809
  1887  000CEE  BE31               	btfsc	dtoa@p+1,7,c
  1888  000CF0  D005               	goto	u1120
  1889  000CF2  5031               	movf	dtoa@p+1,w,c
  1890  000CF4  E102               	bnz	u1121
  1891  000CF6  0430               	decf	dtoa@p,w,c
  1892  000CF8  B0D8               	btfsc	status,0,c
  1893  000CFA                     u1121:
  1894  000CFA  D76C               	goto	l1809
  1895  000CFC                     u1120:
  1896  000CFC  BE33               	btfsc	dtoa@w+1,7,c
  1897  000CFE  D008               	goto	u1140
  1898  000D00  5033               	movf	dtoa@w+1,w,c
  1899  000D02  E103               	bnz	u1130
  1900  000D04  0432               	decf	dtoa@w,w,c
  1901  000D06  A0D8               	btfss	status,0,c
  1902  000D08  D003               	goto	u1140
  1903  000D0A                     u1130:
  1904  000D0A  0100               	movlb	0	; () banked
  1905  000D0C  B366               	btfsc	_flags& (0+255),1,b
  1906  000D0E  D762               	goto	l1809
  1907  000D10                     u1140:
  1908                           
  1909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1910  000D10  5034               	movf	dtoa@s,w,c
  1911  000D12  1035               	iorwf	dtoa@s+1,w,c
  1912  000D14  A4D8               	btfss	status,2,c
  1913  000D16  D003               	goto	u1160
  1914  000D18  0100               	movlb	0	; () banked
  1915  000D1A  A566               	btfss	_flags& (0+255),2,b
  1916  000D1C  D017               	goto	l1843
  1917  000D1E                     u1160:
  1918                           
  1919                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1920  000D1E  063E               	decf	dtoa@i,f,c
  1921  000D20  A0D8               	btfss	status,0,c
  1922  000D22  063F               	decf	dtoa@i+1,f,c
  1923                           
  1924                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1925  000D24  5034               	movf	dtoa@s,w,c
  1926  000D26  1035               	iorwf	dtoa@s+1,w,c
  1927  000D28  A4D8               	btfss	status,2,c
  1928  000D2A  D004               	goto	l1839
  1929  000D2C  0E00               	movlw	0
  1930  000D2E  6E2F               	movwf	_dtoa$239+1,c
  1931  000D30  0E2B               	movlw	43
  1932  000D32  D003               	goto	L2
  1933  000D34                     l1839:
  1934  000D34  0E00               	movlw	0
  1935  000D36  6E2F               	movwf	_dtoa$239+1,c
  1936  000D38  0E2D               	movlw	45
  1937  000D3A                     L2:
  1938  000D3A  6E2E               	movwf	_dtoa$239,c
  1939  000D3C  0E6C               	movlw	low _dbuf
  1940  000D3E  243E               	addwf	dtoa@i,w,c
  1941  000D40  6ED9               	movwf	fsr2l,c
  1942  000D42  0E00               	movlw	high _dbuf
  1943  000D44  203F               	addwfc	dtoa@i+1,w,c
  1944  000D46  6EDA               	movwf	fsr2h,c
  1945  000D48  C02E  FFDF         	movff	_dtoa$239,indf2
  1946  000D4C                     l1843:
  1947                           
  1948                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1949  000D4C  C01C  F011         	movff	dtoa@fp,pad@fp
  1950  000D50  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1951  000D54  0E6C               	movlw	low _dbuf
  1952  000D56  243E               	addwf	dtoa@i,w,c
  1953  000D58  6E13               	movwf	pad@buf,c
  1954  000D5A  0E00               	movlw	high _dbuf
  1955  000D5C  203F               	addwfc	dtoa@i+1,w,c
  1956  000D5E  6E14               	movwf	pad@buf+1,c
  1957  000D60  C032  F015         	movff	dtoa@w,pad@p
  1958  000D64  C033  F016         	movff	dtoa@w+1,pad@p+1
  1959  000D68  EC95  F00B         	call	_pad	;wreg free
  1960  000D6C  C011  F01C         	movff	?_pad,?_dtoa
  1961  000D70  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1962  000D74  0012               	return		;funcret
  1963  000D76                     __end_of_dtoa:
  1964                           	opt callstack 0
  1965                           
  1966 ;; *************** function _pad *****************
  1967 ;; Defined at:
  1968 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1971 ;;		 -> sprintf@f(6), 
  1972 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1973 ;;		 -> dbuf(32), 
  1974 ;;  p               2   20[COMRAM] int 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  w               2   25[COMRAM] int 
  1977 ;;  i               2   23[COMRAM] int 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  2   16[COMRAM] int 
  1980 ;; Registers used:
  1981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1987 ;;      Params:         6       0       0       0       0       0       0       0       0
  1988 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1989 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1990 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1991 ;;Total ram usage:       11 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    3
  1994 ;; This function calls:
  1995 ;;		_fputc
  1996 ;;		_fputs
  1997 ;;		_strlen
  1998 ;; This function is called by:
  1999 ;;		_dtoa
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text5
  2004  00172A                     __ptext5:
  2005                           	opt callstack 0
  2006  00172A                     _pad:
  2007                           	opt callstack 23
  2008                           
  2009                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2010                           
  2011                           ;incstack = 0
  2012  00172A  0100               	movlb	0	; () banked
  2013  00172C  A166               	btfss	_flags& (0+255),0,b
  2014  00172E  D00A               	goto	l1661
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2018  001730  C013  F00A         	movff	pad@buf,fputs@s
  2019  001734  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2020  001738  C011  F00C         	movff	pad@fp,fputs@fp
  2021  00173C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2022  001740  ECC8  F00C         	call	_fputs	;wreg free
  2023  001744                     l1661:
  2024                           
  2025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2026  001744  BE16               	btfsc	pad@p+1,7,c
  2027  001746  D005               	goto	l1665
  2028  001748  C015  F01A         	movff	pad@p,pad@w
  2029  00174C  C016  F01B         	movff	pad@p+1,pad@w+1
  2030  001750  D004               	goto	l100
  2031  001752                     l1665:
  2032  001752  0E00               	movlw	0
  2033  001754  6E1B               	movwf	pad@w+1,c
  2034  001756  0E00               	movlw	0
  2035  001758  6E1A               	movwf	pad@w,c
  2036  00175A                     l100:
  2037                           
  2038                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2039  00175A  0E00               	movlw	0
  2040  00175C  6E19               	movwf	pad@i+1,c
  2041  00175E  0E00               	movlw	0
  2042  001760  6E18               	movwf	pad@i,c
  2043                           
  2044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2045  001762  D00C               	goto	l1671
  2046  001764                     l1667:
  2047                           
  2048                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2049  001764  0E00               	movlw	0
  2050  001766  6E02               	movwf	fputc@c+1,c
  2051  001768  0E20               	movlw	32
  2052  00176A  6E01               	movwf	fputc@c,c
  2053  00176C  C011  F003         	movff	pad@fp,fputc@fp
  2054  001770  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2055  001774  EC45  F00B         	call	_fputc	;wreg free
  2056                           
  2057                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2058  001778  4A18               	infsnz	pad@i,f,c
  2059  00177A  2A19               	incf	pad@i+1,f,c
  2060  00177C                     l1671:
  2061                           
  2062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2063  00177C  501A               	movf	pad@w,w,c
  2064  00177E  5C18               	subwf	pad@i,w,c
  2065  001780  5019               	movf	pad@i+1,w,c
  2066  001782  0A80               	xorlw	128
  2067  001784  6E17               	movwf	??_pad& (0+255),c
  2068  001786  501B               	movf	pad@w+1,w,c
  2069  001788  0A80               	xorlw	128
  2070  00178A  5817               	subwfb	??_pad& (0+255),w,c
  2071  00178C  A0D8               	btfss	status,0,c
  2072  00178E  D7EA               	goto	l1667
  2073                           
  2074                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2075  001790  0100               	movlb	0	; () banked
  2076  001792  B166               	btfsc	_flags& (0+255),0,b
  2077  001794  D00A               	goto	l1675
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2081  001796  C013  F00A         	movff	pad@buf,fputs@s
  2082  00179A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2083  00179E  C011  F00C         	movff	pad@fp,fputs@fp
  2084  0017A2  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2085  0017A6  ECC8  F00C         	call	_fputs	;wreg free
  2086  0017AA                     l1675:
  2087                           
  2088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2089  0017AA  C013  F001         	movff	pad@buf,strlen@s
  2090  0017AE  C014  F002         	movff	pad@buf+1,strlen@s+1
  2091  0017B2  EC15  F00D         	call	_strlen	;wreg free
  2092  0017B6  501A               	movf	pad@w,w,c
  2093  0017B8  2401               	addwf	?_strlen,w,c
  2094  0017BA  6E11               	movwf	?_pad,c
  2095  0017BC  501B               	movf	pad@w+1,w,c
  2096  0017BE  2002               	addwfc	?_strlen+1,w,c
  2097  0017C0  6E12               	movwf	?_pad+1,c
  2098  0017C2  0012               	return		;funcret
  2099  0017C4                     __end_of_pad:
  2100                           	opt callstack 0
  2101                           
  2102 ;; *************** function _strlen *****************
  2103 ;; Defined at:
  2104 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2107 ;;		 -> dbuf(32), 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2110 ;;		 -> dbuf(32), 
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  2    0[COMRAM] unsigned int 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2120 ;;      Params:         2       0       0       0       0       0       0       0       0
  2121 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2123 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2124 ;;Total ram usage:        4 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_pad
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text6
  2134  001A2A                     __ptext6:
  2135                           	opt callstack 0
  2136  001A2A                     _strlen:
  2137                           	opt callstack 25
  2138                           
  2139                           ;incstack = 0
  2140  001A2A  C001  F003         	movff	strlen@s,strlen@a
  2141  001A2E  C002  F004         	movff	strlen@s+1,strlen@a+1
  2142  001A32  D002               	goto	l1651
  2143  001A34                     l1649:
  2144  001A34  4A01               	infsnz	strlen@s,f,c
  2145  001A36  2A02               	incf	strlen@s+1,f,c
  2146  001A38                     l1651:
  2147  001A38  C001  FFD9         	movff	strlen@s,fsr2l
  2148  001A3C  C002  FFDA         	movff	strlen@s+1,fsr2h
  2149  001A40  50DF               	movf	indf2,w,c
  2150  001A42  A4D8               	btfss	status,2,c
  2151  001A44  D7F7               	goto	l1649
  2152  001A46  5003               	movf	strlen@a,w,c
  2153  001A48  5C01               	subwf	strlen@s,w,c
  2154  001A4A  6E01               	movwf	?_strlen,c
  2155  001A4C  5004               	movf	strlen@a+1,w,c
  2156  001A4E  5802               	subwfb	strlen@s+1,w,c
  2157  001A50  6E02               	movwf	?_strlen+1,c
  2158  001A52  0012               	return		;funcret
  2159  001A54                     __end_of_strlen:
  2160                           	opt callstack 0
  2161                           
  2162 ;; *************** function _fputs *****************
  2163 ;; Defined at:
  2164 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2167 ;;		 -> dbuf(32), 
  2168 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2169 ;;		 -> sprintf@f(6), 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  i               2   14[COMRAM] int 
  2172 ;;  c               1   13[COMRAM] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2    9[COMRAM] int 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2182 ;;      Params:         4       0       0       0       0       0       0       0       0
  2183 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2185 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2186 ;;Total ram usage:        7 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    2
  2189 ;; This function calls:
  2190 ;;		_fputc
  2191 ;; This function is called by:
  2192 ;;		_pad
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text7
  2197  001990                     __ptext7:
  2198                           	opt callstack 0
  2199  001990                     _fputs:
  2200                           	opt callstack 23
  2201                           
  2202                           ;incstack = 0
  2203  001990  0E00               	movlw	0
  2204  001992  6E10               	movwf	fputs@i+1,c
  2205  001994  0E00               	movlw	0
  2206  001996  6E0F               	movwf	fputs@i,c
  2207  001998  D00B               	goto	l1645
  2208  00199A                     l1641:
  2209  00199A  C00E  F001         	movff	fputs@c,fputc@c
  2210  00199E  6A02               	clrf	fputc@c+1,c
  2211  0019A0  C00C  F003         	movff	fputs@fp,fputc@fp
  2212  0019A4  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2213  0019A8  EC45  F00B         	call	_fputc	;wreg free
  2214  0019AC  4A0F               	infsnz	fputs@i,f,c
  2215  0019AE  2A10               	incf	fputs@i+1,f,c
  2216  0019B0                     l1645:
  2217  0019B0  500F               	movf	fputs@i,w,c
  2218  0019B2  240A               	addwf	fputs@s,w,c
  2219  0019B4  6ED9               	movwf	fsr2l,c
  2220  0019B6  5010               	movf	fputs@i+1,w,c
  2221  0019B8  200B               	addwfc	fputs@s+1,w,c
  2222  0019BA  6EDA               	movwf	fsr2h,c
  2223  0019BC  50DF               	movf	indf2,w,c
  2224  0019BE  6E0E               	movwf	fputs@c,c
  2225  0019C0  500E               	movf	fputs@c,w,c
  2226  0019C2  B4D8               	btfsc	status,2,c
  2227  0019C4  0012               	return	
  2228  0019C6  D7E9               	goto	l1641
  2229  0019C8                     __end_of_fputs:
  2230                           	opt callstack 0
  2231                           
  2232 ;; *************** function _fputc *****************
  2233 ;; Defined at:
  2234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  c               2    0[COMRAM] int 
  2237 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2238 ;;		 -> sprintf@f(6), 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  2    0[COMRAM] int 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2250 ;;      Params:         4       0       0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2252 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2253 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2254 ;;Total ram usage:        9 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    1
  2257 ;; This function calls:
  2258 ;;		_putch
  2259 ;; This function is called by:
  2260 ;;		_pad
  2261 ;;		_vfpfcnvrt
  2262 ;;		_fputs
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text8
  2267  00168A                     __ptext8:
  2268                           	opt callstack 0
  2269  00168A                     _fputc:
  2270                           	opt callstack 26
  2271                           
  2272                           ;incstack = 0
  2273  00168A  5003               	movf	fputc@fp,w,c
  2274  00168C  1004               	iorwf	fputc@fp+1,w,c
  2275  00168E  B4D8               	btfsc	status,2,c
  2276  001690  D004               	goto	u760
  2277  001692  5003               	movf	fputc@fp,w,c
  2278  001694  1004               	iorwf	fputc@fp+1,w,c
  2279  001696  A4D8               	btfss	status,2,c
  2280  001698  D004               	goto	l1631
  2281  00169A                     u760:
  2282  00169A  5001               	movf	fputc@c,w,c
  2283  00169C  EC48  F00D         	call	_putch
  2284  0016A0  0012               	return	
  2285  0016A2                     l1631:
  2286  0016A2  EE20 F004          	lfsr	2,4
  2287  0016A6  5003               	movf	fputc@fp,w,c
  2288  0016A8  26D9               	addwf	fsr2l,f,c
  2289  0016AA  5004               	movf	fputc@fp+1,w,c
  2290  0016AC  22DA               	addwfc	fsr2h,f,c
  2291  0016AE  50DE               	movf	postinc2,w,c
  2292  0016B0  10DE               	iorwf	postinc2,w,c
  2293  0016B2  B4D8               	btfsc	status,2,c
  2294  0016B4  D016               	goto	u780
  2295  0016B6  EE20 F004          	lfsr	2,4
  2296  0016BA  5003               	movf	fputc@fp,w,c
  2297  0016BC  26D9               	addwf	fsr2l,f,c
  2298  0016BE  5004               	movf	fputc@fp+1,w,c
  2299  0016C0  22DA               	addwfc	fsr2h,f,c
  2300  0016C2  EE10 F002          	lfsr	1,2
  2301  0016C6  5003               	movf	fputc@fp,w,c
  2302  0016C8  26E1               	addwf	fsr1l,f,c
  2303  0016CA  5004               	movf	fputc@fp+1,w,c
  2304  0016CC  22E2               	addwfc	fsr1h,f,c
  2305  0016CE  50DE               	movf	postinc2,w,c
  2306  0016D0  5CE6               	subwf	postinc1,w,c
  2307  0016D2  50E6               	movf	postinc1,w,c
  2308  0016D4  0A80               	xorlw	128
  2309  0016D6  6E09               	movwf	(??_fputc+4)& (0+255),c
  2310  0016D8  50DE               	movf	postinc2,w,c
  2311  0016DA  0A80               	xorlw	128
  2312  0016DC  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  2313  0016DE  B0D8               	btfsc	status,0,c
  2314  0016E0  0012               	return	
  2315  0016E2                     u780:
  2316  0016E2  EE20 F002          	lfsr	2,2
  2317  0016E6  5003               	movf	fputc@fp,w,c
  2318  0016E8  26D9               	addwf	fsr2l,f,c
  2319  0016EA  5004               	movf	fputc@fp+1,w,c
  2320  0016EC  22DA               	addwfc	fsr2h,f,c
  2321  0016EE  CFDE F005          	movff	postinc2,??_fputc
  2322  0016F2  CFDD F006          	movff	postdec2,??_fputc+1
  2323  0016F6  C003  FFD9         	movff	fputc@fp,fsr2l
  2324  0016FA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2325  0016FE  CFDE F007          	movff	postinc2,??_fputc+2
  2326  001702  CFDD F008          	movff	postdec2,??_fputc+3
  2327  001706  5005               	movf	??_fputc,w,c
  2328  001708  2407               	addwf	??_fputc+2,w,c
  2329  00170A  6ED9               	movwf	fsr2l,c
  2330  00170C  5006               	movf	??_fputc+1,w,c
  2331  00170E  2008               	addwfc	??_fputc+3,w,c
  2332  001710  6EDA               	movwf	fsr2h,c
  2333  001712  C001  FFDF         	movff	fputc@c,indf2
  2334  001716  EE20 F002          	lfsr	2,2
  2335  00171A  5003               	movf	fputc@fp,w,c
  2336  00171C  26D9               	addwf	fsr2l,f,c
  2337  00171E  5004               	movf	fputc@fp+1,w,c
  2338  001720  22DA               	addwfc	fsr2h,f,c
  2339  001722  2ADE               	incf	postinc2,f,c
  2340  001724  0E00               	movlw	0
  2341  001726  22DD               	addwfc	postdec2,f,c
  2342  001728  0012               	return		;funcret
  2343  00172A                     __end_of_fputc:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function _putch *****************
  2347 ;; Defined at:
  2348 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  c               1    wreg     unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  c               1    0[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2362 ;;      Params:         0       0       0       0       0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_fputc
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text9
  2376  001A90                     __ptext9:
  2377                           	opt callstack 0
  2378  001A90                     _putch:
  2379                           	opt callstack 26
  2380                           
  2381                           ;incstack = 0
  2382  001A90  0012               	return		;funcret
  2383  001A92                     __end_of_putch:
  2384                           	opt callstack 0
  2385                           
  2386 ;; *************** function _abs *****************
  2387 ;; Defined at:
  2388 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  a               2   18[COMRAM] int 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2   18[COMRAM] int 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2402 ;;      Params:         2       0       0       0       0       0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2404 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2405 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2406 ;;Total ram usage:        4 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_dtoa
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text10
  2416  0019C8                     __ptext10:
  2417                           	opt callstack 0
  2418  0019C8                     _abs:
  2419                           	opt callstack 26
  2420                           
  2421                           ;incstack = 0
  2422  0019C8  BE14               	btfsc	abs@a+1,7,c
  2423  0019CA  D005               	goto	u850
  2424  0019CC  5014               	movf	abs@a+1,w,c
  2425  0019CE  E110               	bnz	l845
  2426  0019D0  0413               	decf	abs@a,w,c
  2427  0019D2  B0D8               	btfsc	status,0,c
  2428  0019D4  D00D               	goto	l845
  2429  0019D6                     u850:
  2430  0019D6  C013  F015         	movff	abs@a,??_abs
  2431  0019DA  C014  F016         	movff	abs@a+1,??_abs+1
  2432  0019DE  1E15               	comf	??_abs,f,c
  2433  0019E0  1E16               	comf	??_abs+1,f,c
  2434  0019E2  4A15               	infsnz	??_abs,f,c
  2435  0019E4  2A16               	incf	??_abs+1,f,c
  2436  0019E6  C015  F013         	movff	??_abs,?_abs
  2437  0019EA  C016  F014         	movff	??_abs+1,?_abs+1
  2438  0019EE  0012               	return	
  2439  0019F0                     l845:
  2440  0019F0  C013  F013         	movff	abs@a,?_abs
  2441  0019F4  C014  F014         	movff	abs@a+1,?_abs+1
  2442  0019F8  0012               	return		;funcret
  2443  0019FA                     __end_of_abs:
  2444                           	opt callstack 0
  2445                           
  2446 ;; *************** function ___aomod *****************
  2447 ;; Defined at:
  2448 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  dividend        8    0[COMRAM] long long 
  2451 ;;  divisor         8    8[COMRAM] long long 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  sign            1   17[COMRAM] unsigned char 
  2454 ;;  counter         1   16[COMRAM] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  8    0[COMRAM] long long 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2464 ;;      Params:        16       0       0       0       0       0       0       0       0
  2465 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2467 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2468 ;;Total ram usage:       18 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_dtoa
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text11
  2478  001340                     __ptext11:
  2479                           	opt callstack 0
  2480  001340                     ___aomod:
  2481                           	opt callstack 26
  2482                           
  2483                           ;incstack = 0
  2484  001340  0E00               	movlw	0
  2485  001342  6E12               	movwf	___aomod@sign,c
  2486  001344  AE08               	btfss	___aomod@dividend+7,7,c
  2487  001346  D012               	goto	l1745
  2488  001348  1E08               	comf	___aomod@dividend+7,f,c
  2489  00134A  1E07               	comf	___aomod@dividend+6,f,c
  2490  00134C  1E06               	comf	___aomod@dividend+5,f,c
  2491  00134E  1E05               	comf	___aomod@dividend+4,f,c
  2492  001350  1E04               	comf	___aomod@dividend+3,f,c
  2493  001352  1E03               	comf	___aomod@dividend+2,f,c
  2494  001354  1E02               	comf	___aomod@dividend+1,f,c
  2495  001356  6C01               	negf	___aomod@dividend,c
  2496  001358  0E00               	movlw	0
  2497  00135A  2202               	addwfc	___aomod@dividend+1,f,c
  2498  00135C  2203               	addwfc	___aomod@dividend+2,f,c
  2499  00135E  2204               	addwfc	___aomod@dividend+3,f,c
  2500  001360  2205               	addwfc	___aomod@dividend+4,f,c
  2501  001362  2206               	addwfc	___aomod@dividend+5,f,c
  2502  001364  2207               	addwfc	___aomod@dividend+6,f,c
  2503  001366  2208               	addwfc	___aomod@dividend+7,f,c
  2504  001368  0E01               	movlw	1
  2505  00136A  6E12               	movwf	___aomod@sign,c
  2506  00136C                     l1745:
  2507  00136C  AE10               	btfss	___aomod@divisor+7,7,c
  2508  00136E  D010               	goto	l1749
  2509  001370  1E10               	comf	___aomod@divisor+7,f,c
  2510  001372  1E0F               	comf	___aomod@divisor+6,f,c
  2511  001374  1E0E               	comf	___aomod@divisor+5,f,c
  2512  001376  1E0D               	comf	___aomod@divisor+4,f,c
  2513  001378  1E0C               	comf	___aomod@divisor+3,f,c
  2514  00137A  1E0B               	comf	___aomod@divisor+2,f,c
  2515  00137C  1E0A               	comf	___aomod@divisor+1,f,c
  2516  00137E  6C09               	negf	___aomod@divisor,c
  2517  001380  0E00               	movlw	0
  2518  001382  220A               	addwfc	___aomod@divisor+1,f,c
  2519  001384  220B               	addwfc	___aomod@divisor+2,f,c
  2520  001386  220C               	addwfc	___aomod@divisor+3,f,c
  2521  001388  220D               	addwfc	___aomod@divisor+4,f,c
  2522  00138A  220E               	addwfc	___aomod@divisor+5,f,c
  2523  00138C  220F               	addwfc	___aomod@divisor+6,f,c
  2524  00138E  2210               	addwfc	___aomod@divisor+7,f,c
  2525  001390                     l1749:
  2526  001390  5009               	movf	___aomod@divisor,w,c
  2527  001392  100A               	iorwf	___aomod@divisor+1,w,c
  2528  001394  100B               	iorwf	___aomod@divisor+2,w,c
  2529  001396  100C               	iorwf	___aomod@divisor+3,w,c
  2530  001398  100D               	iorwf	___aomod@divisor+4,w,c
  2531  00139A  100E               	iorwf	___aomod@divisor+5,w,c
  2532  00139C  100F               	iorwf	___aomod@divisor+6,w,c
  2533  00139E  1010               	iorwf	___aomod@divisor+7,w,c
  2534  0013A0  B4D8               	btfsc	status,2,c
  2535  0013A2  D03C               	goto	l1765
  2536  0013A4  0E01               	movlw	1
  2537  0013A6  6E11               	movwf	___aomod@counter,c
  2538  0013A8  D00A               	goto	l1755
  2539  0013AA                     l1753:
  2540  0013AA  90D8               	bcf	status,0,c
  2541  0013AC  3609               	rlcf	___aomod@divisor,f,c
  2542  0013AE  360A               	rlcf	___aomod@divisor+1,f,c
  2543  0013B0  360B               	rlcf	___aomod@divisor+2,f,c
  2544  0013B2  360C               	rlcf	___aomod@divisor+3,f,c
  2545  0013B4  360D               	rlcf	___aomod@divisor+4,f,c
  2546  0013B6  360E               	rlcf	___aomod@divisor+5,f,c
  2547  0013B8  360F               	rlcf	___aomod@divisor+6,f,c
  2548  0013BA  3610               	rlcf	___aomod@divisor+7,f,c
  2549  0013BC  2A11               	incf	___aomod@counter,f,c
  2550  0013BE                     l1755:
  2551  0013BE  AE10               	btfss	___aomod@divisor+7,7,c
  2552  0013C0  D7F4               	goto	l1753
  2553  0013C2                     u980:
  2554  0013C2  5009               	movf	___aomod@divisor,w,c
  2555  0013C4  5C01               	subwf	___aomod@dividend,w,c
  2556  0013C6  500A               	movf	___aomod@divisor+1,w,c
  2557  0013C8  5802               	subwfb	___aomod@dividend+1,w,c
  2558  0013CA  500B               	movf	___aomod@divisor+2,w,c
  2559  0013CC  5803               	subwfb	___aomod@dividend+2,w,c
  2560  0013CE  500C               	movf	___aomod@divisor+3,w,c
  2561  0013D0  5804               	subwfb	___aomod@dividend+3,w,c
  2562  0013D2  500D               	movf	___aomod@divisor+4,w,c
  2563  0013D4  5805               	subwfb	___aomod@dividend+4,w,c
  2564  0013D6  500E               	movf	___aomod@divisor+5,w,c
  2565  0013D8  5806               	subwfb	___aomod@dividend+5,w,c
  2566  0013DA  500F               	movf	___aomod@divisor+6,w,c
  2567  0013DC  5807               	subwfb	___aomod@dividend+6,w,c
  2568  0013DE  5010               	movf	___aomod@divisor+7,w,c
  2569  0013E0  5808               	subwfb	___aomod@dividend+7,w,c
  2570  0013E2  A0D8               	btfss	status,0,c
  2571  0013E4  D010               	goto	l1761
  2572  0013E6  5009               	movf	___aomod@divisor,w,c
  2573  0013E8  5E01               	subwf	___aomod@dividend,f,c
  2574  0013EA  500A               	movf	___aomod@divisor+1,w,c
  2575  0013EC  5A02               	subwfb	___aomod@dividend+1,f,c
  2576  0013EE  500B               	movf	___aomod@divisor+2,w,c
  2577  0013F0  5A03               	subwfb	___aomod@dividend+2,f,c
  2578  0013F2  500C               	movf	___aomod@divisor+3,w,c
  2579  0013F4  5A04               	subwfb	___aomod@dividend+3,f,c
  2580  0013F6  500D               	movf	___aomod@divisor+4,w,c
  2581  0013F8  5A05               	subwfb	___aomod@dividend+4,f,c
  2582  0013FA  500E               	movf	___aomod@divisor+5,w,c
  2583  0013FC  5A06               	subwfb	___aomod@dividend+5,f,c
  2584  0013FE  500F               	movf	___aomod@divisor+6,w,c
  2585  001400  5A07               	subwfb	___aomod@dividend+6,f,c
  2586  001402  5010               	movf	___aomod@divisor+7,w,c
  2587  001404  5A08               	subwfb	___aomod@dividend+7,f,c
  2588  001406                     l1761:
  2589  001406  90D8               	bcf	status,0,c
  2590  001408  3210               	rrcf	___aomod@divisor+7,f,c
  2591  00140A  320F               	rrcf	___aomod@divisor+6,f,c
  2592  00140C  320E               	rrcf	___aomod@divisor+5,f,c
  2593  00140E  320D               	rrcf	___aomod@divisor+4,f,c
  2594  001410  320C               	rrcf	___aomod@divisor+3,f,c
  2595  001412  320B               	rrcf	___aomod@divisor+2,f,c
  2596  001414  320A               	rrcf	___aomod@divisor+1,f,c
  2597  001416  3209               	rrcf	___aomod@divisor,f,c
  2598  001418  2E11               	decfsz	___aomod@counter,f,c
  2599  00141A  D7D3               	goto	u980
  2600  00141C                     l1765:
  2601  00141C  5012               	movf	___aomod@sign,w,c
  2602  00141E  B4D8               	btfsc	status,2,c
  2603  001420  D010               	goto	l1769
  2604  001422  1E08               	comf	___aomod@dividend+7,f,c
  2605  001424  1E07               	comf	___aomod@dividend+6,f,c
  2606  001426  1E06               	comf	___aomod@dividend+5,f,c
  2607  001428  1E05               	comf	___aomod@dividend+4,f,c
  2608  00142A  1E04               	comf	___aomod@dividend+3,f,c
  2609  00142C  1E03               	comf	___aomod@dividend+2,f,c
  2610  00142E  1E02               	comf	___aomod@dividend+1,f,c
  2611  001430  6C01               	negf	___aomod@dividend,c
  2612  001432  0E00               	movlw	0
  2613  001434  2202               	addwfc	___aomod@dividend+1,f,c
  2614  001436  2203               	addwfc	___aomod@dividend+2,f,c
  2615  001438  2204               	addwfc	___aomod@dividend+3,f,c
  2616  00143A  2205               	addwfc	___aomod@dividend+4,f,c
  2617  00143C  2206               	addwfc	___aomod@dividend+5,f,c
  2618  00143E  2207               	addwfc	___aomod@dividend+6,f,c
  2619  001440  2208               	addwfc	___aomod@dividend+7,f,c
  2620  001442                     l1769:
  2621  001442  C001  F001         	movff	___aomod@dividend,?___aomod
  2622  001446  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2623  00144A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2624  00144E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2625  001452  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2626  001456  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2627  00145A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2628  00145E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2629  001462  0012               	return		;funcret
  2630  001464                     __end_of___aomod:
  2631                           	opt callstack 0
  2632                           
  2633 ;; *************** function ___aodiv *****************
  2634 ;; Defined at:
  2635 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  dividend        8    0[COMRAM] long long 
  2638 ;;  divisor         8    8[COMRAM] long long 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  quotient        8   18[COMRAM] long long 
  2641 ;;  sign            1   17[COMRAM] unsigned char 
  2642 ;;  counter         1   16[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  8    0[COMRAM] long long 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2652 ;;      Params:        16       0       0       0       0       0       0       0       0
  2653 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2655 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2656 ;;Total ram usage:       26 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_dtoa
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text12
  2666  000F90                     __ptext12:
  2667                           	opt callstack 0
  2668  000F90                     ___aodiv:
  2669                           	opt callstack 26
  2670                           
  2671                           ;incstack = 0
  2672  000F90  0E00               	movlw	0
  2673  000F92  6E12               	movwf	___aodiv@sign,c
  2674  000F94  AE10               	btfss	___aodiv@divisor+7,7,c
  2675  000F96  D012               	goto	l1701
  2676  000F98  1E10               	comf	___aodiv@divisor+7,f,c
  2677  000F9A  1E0F               	comf	___aodiv@divisor+6,f,c
  2678  000F9C  1E0E               	comf	___aodiv@divisor+5,f,c
  2679  000F9E  1E0D               	comf	___aodiv@divisor+4,f,c
  2680  000FA0  1E0C               	comf	___aodiv@divisor+3,f,c
  2681  000FA2  1E0B               	comf	___aodiv@divisor+2,f,c
  2682  000FA4  1E0A               	comf	___aodiv@divisor+1,f,c
  2683  000FA6  6C09               	negf	___aodiv@divisor,c
  2684  000FA8  0E00               	movlw	0
  2685  000FAA  220A               	addwfc	___aodiv@divisor+1,f,c
  2686  000FAC  220B               	addwfc	___aodiv@divisor+2,f,c
  2687  000FAE  220C               	addwfc	___aodiv@divisor+3,f,c
  2688  000FB0  220D               	addwfc	___aodiv@divisor+4,f,c
  2689  000FB2  220E               	addwfc	___aodiv@divisor+5,f,c
  2690  000FB4  220F               	addwfc	___aodiv@divisor+6,f,c
  2691  000FB6  2210               	addwfc	___aodiv@divisor+7,f,c
  2692  000FB8  0E01               	movlw	1
  2693  000FBA  6E12               	movwf	___aodiv@sign,c
  2694  000FBC                     l1701:
  2695  000FBC  AE08               	btfss	___aodiv@dividend+7,7,c
  2696  000FBE  D012               	goto	l1707
  2697  000FC0  1E08               	comf	___aodiv@dividend+7,f,c
  2698  000FC2  1E07               	comf	___aodiv@dividend+6,f,c
  2699  000FC4  1E06               	comf	___aodiv@dividend+5,f,c
  2700  000FC6  1E05               	comf	___aodiv@dividend+4,f,c
  2701  000FC8  1E04               	comf	___aodiv@dividend+3,f,c
  2702  000FCA  1E03               	comf	___aodiv@dividend+2,f,c
  2703  000FCC  1E02               	comf	___aodiv@dividend+1,f,c
  2704  000FCE  6C01               	negf	___aodiv@dividend,c
  2705  000FD0  0E00               	movlw	0
  2706  000FD2  2202               	addwfc	___aodiv@dividend+1,f,c
  2707  000FD4  2203               	addwfc	___aodiv@dividend+2,f,c
  2708  000FD6  2204               	addwfc	___aodiv@dividend+3,f,c
  2709  000FD8  2205               	addwfc	___aodiv@dividend+4,f,c
  2710  000FDA  2206               	addwfc	___aodiv@dividend+5,f,c
  2711  000FDC  2207               	addwfc	___aodiv@dividend+6,f,c
  2712  000FDE  2208               	addwfc	___aodiv@dividend+7,f,c
  2713  000FE0  0E01               	movlw	1
  2714  000FE2  1A12               	xorwf	___aodiv@sign,f,c
  2715  000FE4                     l1707:
  2716  000FE4  EE20  F013         	lfsr	2,___aodiv@quotient
  2717  000FE8  0E07               	movlw	7
  2718  000FEA                     u901:
  2719  000FEA  6ADE               	clrf	postinc2,c
  2720  000FEC  06E8               	decf	wreg,f,c
  2721  000FEE  E2FD               	bc	u901
  2722  000FF0  5009               	movf	___aodiv@divisor,w,c
  2723  000FF2  100A               	iorwf	___aodiv@divisor+1,w,c
  2724  000FF4  100B               	iorwf	___aodiv@divisor+2,w,c
  2725  000FF6  100C               	iorwf	___aodiv@divisor+3,w,c
  2726  000FF8  100D               	iorwf	___aodiv@divisor+4,w,c
  2727  000FFA  100E               	iorwf	___aodiv@divisor+5,w,c
  2728  000FFC  100F               	iorwf	___aodiv@divisor+6,w,c
  2729  000FFE  1010               	iorwf	___aodiv@divisor+7,w,c
  2730  001000  B4D8               	btfsc	status,2,c
  2731  001002  D046               	goto	l1729
  2732  001004  0E01               	movlw	1
  2733  001006  6E11               	movwf	___aodiv@counter,c
  2734  001008  D00A               	goto	l1715
  2735  00100A                     l1713:
  2736  00100A  90D8               	bcf	status,0,c
  2737  00100C  3609               	rlcf	___aodiv@divisor,f,c
  2738  00100E  360A               	rlcf	___aodiv@divisor+1,f,c
  2739  001010  360B               	rlcf	___aodiv@divisor+2,f,c
  2740  001012  360C               	rlcf	___aodiv@divisor+3,f,c
  2741  001014  360D               	rlcf	___aodiv@divisor+4,f,c
  2742  001016  360E               	rlcf	___aodiv@divisor+5,f,c
  2743  001018  360F               	rlcf	___aodiv@divisor+6,f,c
  2744  00101A  3610               	rlcf	___aodiv@divisor+7,f,c
  2745  00101C  2A11               	incf	___aodiv@counter,f,c
  2746  00101E                     l1715:
  2747  00101E  AE10               	btfss	___aodiv@divisor+7,7,c
  2748  001020  D7F4               	goto	l1713
  2749  001022                     u920:
  2750  001022  90D8               	bcf	status,0,c
  2751  001024  3613               	rlcf	___aodiv@quotient,f,c
  2752  001026  3614               	rlcf	___aodiv@quotient+1,f,c
  2753  001028  3615               	rlcf	___aodiv@quotient+2,f,c
  2754  00102A  3616               	rlcf	___aodiv@quotient+3,f,c
  2755  00102C  3617               	rlcf	___aodiv@quotient+4,f,c
  2756  00102E  3618               	rlcf	___aodiv@quotient+5,f,c
  2757  001030  3619               	rlcf	___aodiv@quotient+6,f,c
  2758  001032  361A               	rlcf	___aodiv@quotient+7,f,c
  2759  001034  5009               	movf	___aodiv@divisor,w,c
  2760  001036  5C01               	subwf	___aodiv@dividend,w,c
  2761  001038  500A               	movf	___aodiv@divisor+1,w,c
  2762  00103A  5802               	subwfb	___aodiv@dividend+1,w,c
  2763  00103C  500B               	movf	___aodiv@divisor+2,w,c
  2764  00103E  5803               	subwfb	___aodiv@dividend+2,w,c
  2765  001040  500C               	movf	___aodiv@divisor+3,w,c
  2766  001042  5804               	subwfb	___aodiv@dividend+3,w,c
  2767  001044  500D               	movf	___aodiv@divisor+4,w,c
  2768  001046  5805               	subwfb	___aodiv@dividend+4,w,c
  2769  001048  500E               	movf	___aodiv@divisor+5,w,c
  2770  00104A  5806               	subwfb	___aodiv@dividend+5,w,c
  2771  00104C  500F               	movf	___aodiv@divisor+6,w,c
  2772  00104E  5807               	subwfb	___aodiv@dividend+6,w,c
  2773  001050  5010               	movf	___aodiv@divisor+7,w,c
  2774  001052  5808               	subwfb	___aodiv@dividend+7,w,c
  2775  001054  A0D8               	btfss	status,0,c
  2776  001056  D011               	goto	l1725
  2777  001058  5009               	movf	___aodiv@divisor,w,c
  2778  00105A  5E01               	subwf	___aodiv@dividend,f,c
  2779  00105C  500A               	movf	___aodiv@divisor+1,w,c
  2780  00105E  5A02               	subwfb	___aodiv@dividend+1,f,c
  2781  001060  500B               	movf	___aodiv@divisor+2,w,c
  2782  001062  5A03               	subwfb	___aodiv@dividend+2,f,c
  2783  001064  500C               	movf	___aodiv@divisor+3,w,c
  2784  001066  5A04               	subwfb	___aodiv@dividend+3,f,c
  2785  001068  500D               	movf	___aodiv@divisor+4,w,c
  2786  00106A  5A05               	subwfb	___aodiv@dividend+4,f,c
  2787  00106C  500E               	movf	___aodiv@divisor+5,w,c
  2788  00106E  5A06               	subwfb	___aodiv@dividend+5,f,c
  2789  001070  500F               	movf	___aodiv@divisor+6,w,c
  2790  001072  5A07               	subwfb	___aodiv@dividend+6,f,c
  2791  001074  5010               	movf	___aodiv@divisor+7,w,c
  2792  001076  5A08               	subwfb	___aodiv@dividend+7,f,c
  2793  001078  8013               	bsf	___aodiv@quotient,0,c
  2794  00107A                     l1725:
  2795  00107A  90D8               	bcf	status,0,c
  2796  00107C  3210               	rrcf	___aodiv@divisor+7,f,c
  2797  00107E  320F               	rrcf	___aodiv@divisor+6,f,c
  2798  001080  320E               	rrcf	___aodiv@divisor+5,f,c
  2799  001082  320D               	rrcf	___aodiv@divisor+4,f,c
  2800  001084  320C               	rrcf	___aodiv@divisor+3,f,c
  2801  001086  320B               	rrcf	___aodiv@divisor+2,f,c
  2802  001088  320A               	rrcf	___aodiv@divisor+1,f,c
  2803  00108A  3209               	rrcf	___aodiv@divisor,f,c
  2804  00108C  2E11               	decfsz	___aodiv@counter,f,c
  2805  00108E  D7C9               	goto	u920
  2806  001090                     l1729:
  2807  001090  5012               	movf	___aodiv@sign,w,c
  2808  001092  B4D8               	btfsc	status,2,c
  2809  001094  D010               	goto	l1733
  2810  001096  1E1A               	comf	___aodiv@quotient+7,f,c
  2811  001098  1E19               	comf	___aodiv@quotient+6,f,c
  2812  00109A  1E18               	comf	___aodiv@quotient+5,f,c
  2813  00109C  1E17               	comf	___aodiv@quotient+4,f,c
  2814  00109E  1E16               	comf	___aodiv@quotient+3,f,c
  2815  0010A0  1E15               	comf	___aodiv@quotient+2,f,c
  2816  0010A2  1E14               	comf	___aodiv@quotient+1,f,c
  2817  0010A4  6C13               	negf	___aodiv@quotient,c
  2818  0010A6  0E00               	movlw	0
  2819  0010A8  2214               	addwfc	___aodiv@quotient+1,f,c
  2820  0010AA  2215               	addwfc	___aodiv@quotient+2,f,c
  2821  0010AC  2216               	addwfc	___aodiv@quotient+3,f,c
  2822  0010AE  2217               	addwfc	___aodiv@quotient+4,f,c
  2823  0010B0  2218               	addwfc	___aodiv@quotient+5,f,c
  2824  0010B2  2219               	addwfc	___aodiv@quotient+6,f,c
  2825  0010B4  221A               	addwfc	___aodiv@quotient+7,f,c
  2826  0010B6                     l1733:
  2827  0010B6  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2828  0010BA  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2829  0010BE  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2830  0010C2  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2831  0010C6  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2832  0010CA  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2833  0010CE  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2834  0010D2  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2835  0010D6  0012               	return		;funcret
  2836  0010D8                     __end_of___aodiv:
  2837                           	opt callstack 0
  2838                           
  2839 ;; *************** function _atoi *****************
  2840 ;; Defined at:
  2841 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2844 ;;		 -> STR_1(12), 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  n               2   20[COMRAM] int 
  2847 ;;  neg             2   13[COMRAM] int 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  2    7[COMRAM] int 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         2       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2860 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:       15 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    1
  2864 ;; This function calls:
  2865 ;;		___wmul
  2866 ;;		_isdigit
  2867 ;;		_isspace
  2868 ;; This function is called by:
  2869 ;;		_vfpfcnvrt
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text13
  2874  0010D8                     __ptext13:
  2875                           	opt callstack 0
  2876  0010D8                     _atoi:
  2877                           	opt callstack 26
  2878                           
  2879                           ;incstack = 0
  2880  0010D8  0E00               	movlw	0
  2881  0010DA  6E16               	movwf	atoi@n+1,c
  2882  0010DC  0E00               	movlw	0
  2883  0010DE  6E15               	movwf	atoi@n,c
  2884  0010E0  0E00               	movlw	0
  2885  0010E2  6E0F               	movwf	atoi@neg+1,c
  2886  0010E4  0E00               	movlw	0
  2887  0010E6  6E0E               	movwf	atoi@neg,c
  2888  0010E8  D002               	goto	l1851
  2889  0010EA                     l1849:
  2890  0010EA  4A08               	infsnz	atoi@s,f,c
  2891  0010EC  2A09               	incf	atoi@s+1,f,c
  2892  0010EE                     l1851:
  2893  0010EE  0E01               	movlw	1
  2894  0010F0  6E14               	movwf	_atoi$712,c
  2895  0010F2  C008  FFF6         	movff	atoi@s,tblptrl
  2896  0010F6  C009  FFF7         	movff	atoi@s+1,tblptrh
  2897  0010FA                     	if	0	;tblptru may be non-zero
  2898  0010FA                     	endif
  2899  0010FA                     	if	0	;tblptru may be non-zero
  2900  0010FA                     	endif
  2901  0010FA  0008               	tblrd		*
  2902  0010FC  50F5               	movf	tablat,w,c
  2903  0010FE  0A20               	xorlw	32
  2904  001100  B4D8               	btfsc	status,2,c
  2905  001102  D018               	goto	l1859
  2906  001104  0EF7               	movlw	247
  2907  001106  6E0A               	movwf	??_atoi& (0+255),c
  2908  001108  0EFF               	movlw	255
  2909  00110A  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2910  00110C  C008  FFF6         	movff	atoi@s,tblptrl
  2911  001110  C009  FFF7         	movff	atoi@s+1,tblptrh
  2912  001114                     	if	0	;tblptru may be non-zero
  2913  001114                     	endif
  2914  001114                     	if	0	;tblptru may be non-zero
  2915  001114                     	endif
  2916  001114  0008               	tblrd		*
  2917  001116  50F5               	movf	tablat,w,c
  2918  001118  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2919  00111A  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2920  00111C  500A               	movf	??_atoi,w,c
  2921  00111E  260C               	addwf	??_atoi+2,f,c
  2922  001120  500B               	movf	??_atoi+1,w,c
  2923  001122  220D               	addwfc	??_atoi+3,f,c
  2924  001124  500D               	movf	??_atoi+3,w,c
  2925  001126  E104               	bnz	u1190
  2926  001128  0E05               	movlw	5
  2927  00112A  5C0C               	subwf	??_atoi+2,w,c
  2928  00112C  A0D8               	btfss	status,0,c
  2929  00112E  D002               	goto	l1859
  2930  001130                     u1190:
  2931  001130  0E00               	movlw	0
  2932  001132  6E14               	movwf	_atoi$712,c
  2933  001134                     l1859:
  2934  001134  C014  F010         	movff	_atoi$712,_atoi$711
  2935  001138  6A11               	clrf	_atoi$711+1,c
  2936  00113A  5010               	movf	_atoi$711,w,c
  2937  00113C  1011               	iorwf	_atoi$711+1,w,c
  2938  00113E  B4D8               	btfsc	status,2,c
  2939  001140  D008               	goto	l1869
  2940  001142  D7D3               	goto	l1849
  2941  001144                     l1865:
  2942  001144  0E00               	movlw	0
  2943  001146  6E0F               	movwf	atoi@neg+1,c
  2944  001148  0E01               	movlw	1
  2945  00114A  6E0E               	movwf	atoi@neg,c
  2946  00114C                     l1867:
  2947  00114C  4A08               	infsnz	atoi@s,f,c
  2948  00114E  2A09               	incf	atoi@s+1,f,c
  2949  001150  D02E               	goto	l1875
  2950  001152                     l1869:
  2951  001152  C008  FFF6         	movff	atoi@s,tblptrl
  2952  001156  C009  FFF7         	movff	atoi@s+1,tblptrh
  2953  00115A                     	if	0	;tblptru may be non-zero
  2954  00115A                     	endif
  2955  00115A                     	if	0	;tblptru may be non-zero
  2956  00115A                     	endif
  2957  00115A  0008               	tblrd		*
  2958  00115C  50F5               	movf	tablat,w,c
  2959  00115E  6E0A               	movwf	??_atoi& (0+255),c
  2960  001160  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2961                           
  2962                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2963                           ; Switch size 1, requested type "simple"
  2964                           ; Number of cases is 1, Range of values is 0 to 0
  2965                           ; switch strategies available:
  2966                           ; Name         Instructions Cycles
  2967                           ; simple_byte            4     3 (average)
  2968                           ;	Chosen strategy is simple_byte
  2969  001162  500B               	movf	??_atoi+1,w,c
  2970  001164  0A00               	xorlw	0	; case 0
  2971  001166  A4D8               	btfss	status,2,c
  2972  001168  D022               	goto	l1875
  2973                           
  2974                           ; Switch size 1, requested type "simple"
  2975                           ; Number of cases is 2, Range of values is 43 to 45
  2976                           ; switch strategies available:
  2977                           ; Name         Instructions Cycles
  2978                           ; simple_byte            7     4 (average)
  2979                           ;	Chosen strategy is simple_byte
  2980  00116A  500A               	movf	??_atoi,w,c
  2981  00116C  0A2B               	xorlw	43	; case 43
  2982  00116E  B4D8               	btfsc	status,2,c
  2983  001170  D7ED               	goto	l1867
  2984  001172  0A06               	xorlw	6	; case 45
  2985  001174  B4D8               	btfsc	status,2,c
  2986  001176  D7E6               	goto	l1865
  2987  001178  D01A               	goto	l1875
  2988  00117A                     l1871:
  2989  00117A  C015  F001         	movff	atoi@n,___wmul@multiplier
  2990  00117E  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2991  001182  0E00               	movlw	0
  2992  001184  6E04               	movwf	___wmul@multiplicand+1,c
  2993  001186  0E0A               	movlw	10
  2994  001188  6E03               	movwf	___wmul@multiplicand,c
  2995  00118A  EC2A  F00D         	call	___wmul	;wreg free
  2996  00118E  C008  FFF6         	movff	atoi@s,tblptrl
  2997  001192  C009  FFF7         	movff	atoi@s+1,tblptrh
  2998  001196                     	if	0	;tblptru may be non-zero
  2999  001196                     	endif
  3000  001196                     	if	0	;tblptru may be non-zero
  3001  001196                     	endif
  3002  001196  0008               	tblrd		*
  3003  001198  50F5               	movf	tablat,w,c
  3004  00119A  5E01               	subwf	?___wmul,f,c
  3005  00119C  0E00               	movlw	0
  3006  00119E  5A02               	subwfb	?___wmul+1,f,c
  3007  0011A0  0E30               	movlw	48
  3008  0011A2  2401               	addwf	?___wmul,w,c
  3009  0011A4  6E15               	movwf	atoi@n,c
  3010  0011A6  0E00               	movlw	0
  3011  0011A8  2002               	addwfc	?___wmul+1,w,c
  3012  0011AA  6E16               	movwf	atoi@n+1,c
  3013  0011AC  D7CF               	goto	l1867
  3014  0011AE                     l1875:
  3015  0011AE  0ED0               	movlw	208
  3016  0011B0  6E0A               	movwf	??_atoi& (0+255),c
  3017  0011B2  0EFF               	movlw	255
  3018  0011B4  6E0B               	movwf	(??_atoi+1)& (0+255),c
  3019  0011B6  C008  FFF6         	movff	atoi@s,tblptrl
  3020  0011BA  C009  FFF7         	movff	atoi@s+1,tblptrh
  3021  0011BE                     	if	0	;tblptru may be non-zero
  3022  0011BE                     	endif
  3023  0011BE                     	if	0	;tblptru may be non-zero
  3024  0011BE                     	endif
  3025  0011BE  0008               	tblrd		*
  3026  0011C0  50F5               	movf	tablat,w,c
  3027  0011C2  6E0C               	movwf	(??_atoi+2)& (0+255),c
  3028  0011C4  6A0D               	clrf	(??_atoi+3)& (0+255),c
  3029  0011C6  500A               	movf	??_atoi,w,c
  3030  0011C8  260C               	addwf	??_atoi+2,f,c
  3031  0011CA  500B               	movf	??_atoi+1,w,c
  3032  0011CC  220D               	addwfc	??_atoi+3,f,c
  3033  0011CE  500D               	movf	??_atoi+3,w,c
  3034  0011D0  E106               	bnz	u1210
  3035  0011D2  0E0A               	movlw	10
  3036  0011D4  5C0C               	subwf	??_atoi+2,w,c
  3037  0011D6  B0D8               	btfsc	status,0,c
  3038  0011D8  D002               	goto	u1210
  3039  0011DA  0E01               	movlw	1
  3040  0011DC  D001               	goto	u1220
  3041  0011DE                     u1210:
  3042  0011DE  0E00               	movlw	0
  3043  0011E0                     u1220:
  3044  0011E0  6E12               	movwf	_atoi$713,c
  3045  0011E2  6A13               	clrf	_atoi$713+1,c
  3046  0011E4  5012               	movf	_atoi$713,w,c
  3047  0011E6  1013               	iorwf	_atoi$713+1,w,c
  3048  0011E8  A4D8               	btfss	status,2,c
  3049  0011EA  D7C7               	goto	l1871
  3050  0011EC  500E               	movf	atoi@neg,w,c
  3051  0011EE  100F               	iorwf	atoi@neg+1,w,c
  3052  0011F0  A4D8               	btfss	status,2,c
  3053  0011F2  D00D               	goto	l876
  3054  0011F4  C015  F00A         	movff	atoi@n,??_atoi
  3055  0011F8  C016  F00B         	movff	atoi@n+1,??_atoi+1
  3056  0011FC  1E0A               	comf	??_atoi,f,c
  3057  0011FE  1E0B               	comf	??_atoi+1,f,c
  3058  001200  4A0A               	infsnz	??_atoi,f,c
  3059  001202  2A0B               	incf	??_atoi+1,f,c
  3060  001204  C00A  F008         	movff	??_atoi,?_atoi
  3061  001208  C00B  F009         	movff	??_atoi+1,?_atoi+1
  3062  00120C  0012               	return	
  3063  00120E                     l876:
  3064  00120E  C015  F008         	movff	atoi@n,?_atoi
  3065  001212  C016  F009         	movff	atoi@n+1,?_atoi+1
  3066  001216  0012               	return		;funcret
  3067  001218                     __end_of_atoi:
  3068                           	opt callstack 0
  3069                           
  3070 ;; *************** function _isspace *****************
  3071 ;; Defined at:
  3072 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  c               2    0[COMRAM] int 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2    0[COMRAM] int 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2, status,0
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3086 ;;      Params:         2       0       0       0       0       0       0       0       0
  3087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3088 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3089 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3090 ;;Total ram usage:        7 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_atoi
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text14
  3100  001952                     __ptext14:
  3101                           	opt callstack 0
  3102  001952                     _isspace:
  3103                           	opt callstack 26
  3104                           
  3105                           ;incstack = 0
  3106  001952  0E01               	movlw	1
  3107  001954  6E07               	movwf	_isspace$729,c
  3108  001956  0E20               	movlw	32
  3109  001958  1801               	xorwf	isspace@c,w,c
  3110  00195A  1002               	iorwf	isspace@c+1,w,c
  3111  00195C  B4D8               	btfsc	status,2,c
  3112  00195E  D014               	goto	l1781
  3113  001960  0EF7               	movlw	247
  3114  001962  6E03               	movwf	??_isspace& (0+255),c
  3115  001964  0EFF               	movlw	255
  3116  001966  6E04               	movwf	(??_isspace+1)& (0+255),c
  3117  001968  C001  F005         	movff	isspace@c,??_isspace+2
  3118  00196C  C002  F006         	movff	isspace@c+1,??_isspace+3
  3119  001970  5003               	movf	??_isspace,w,c
  3120  001972  2605               	addwf	??_isspace+2,f,c
  3121  001974  5004               	movf	??_isspace+1,w,c
  3122  001976  2206               	addwfc	??_isspace+3,f,c
  3123  001978  5006               	movf	??_isspace+3,w,c
  3124  00197A  E104               	bnz	u1020
  3125  00197C  0E05               	movlw	5
  3126  00197E  5C05               	subwf	??_isspace+2,w,c
  3127  001980  A0D8               	btfss	status,0,c
  3128  001982  D002               	goto	l1781
  3129  001984                     u1020:
  3130  001984  0E00               	movlw	0
  3131  001986  6E07               	movwf	_isspace$729,c
  3132  001988                     l1781:
  3133  001988  C007  F001         	movff	_isspace$729,?_isspace
  3134  00198C  6A02               	clrf	?_isspace+1,c
  3135  00198E  0012               	return		;funcret
  3136  001990                     __end_of_isspace:
  3137                           	opt callstack 0
  3138                           
  3139 ;; *************** function _isdigit *****************
  3140 ;; Defined at:
  3141 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  c               2    0[COMRAM] int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  2    0[COMRAM] int 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3155 ;;      Params:         2       0       0       0       0       0       0       0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3157 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3158 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3159 ;;Total ram usage:        6 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_vfpfcnvrt
  3165 ;;		_atoi
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text15
  3170  0019FA                     __ptext15:
  3171                           	opt callstack 0
  3172  0019FA                     _isdigit:
  3173                           	opt callstack 27
  3174                           
  3175                           ;incstack = 0
  3176  0019FA  0ED0               	movlw	208
  3177  0019FC  6E03               	movwf	??_isdigit& (0+255),c
  3178  0019FE  0EFF               	movlw	255
  3179  001A00  6E04               	movwf	(??_isdigit+1)& (0+255),c
  3180  001A02  C001  F005         	movff	isdigit@c,??_isdigit+2
  3181  001A06  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  3182  001A0A  5003               	movf	??_isdigit,w,c
  3183  001A0C  2605               	addwf	??_isdigit+2,f,c
  3184  001A0E  5004               	movf	??_isdigit+1,w,c
  3185  001A10  2206               	addwfc	??_isdigit+3,f,c
  3186  001A12  5006               	movf	??_isdigit+3,w,c
  3187  001A14  E106               	bnz	u860
  3188  001A16  0E0A               	movlw	10
  3189  001A18  5C05               	subwf	??_isdigit+2,w,c
  3190  001A1A  B0D8               	btfsc	status,0,c
  3191  001A1C  D002               	goto	u860
  3192  001A1E  0E01               	movlw	1
  3193  001A20  D001               	goto	u870
  3194  001A22                     u860:
  3195  001A22  0E00               	movlw	0
  3196  001A24                     u870:
  3197  001A24  6E01               	movwf	?_isdigit,c
  3198  001A26  6A02               	clrf	?_isdigit+1,c
  3199  001A28  0012               	return		;funcret
  3200  001A2A                     __end_of_isdigit:
  3201                           	opt callstack 0
  3202                           
  3203 ;; *************** function ___wmul *****************
  3204 ;; Defined at:
  3205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  multiplier      2    0[COMRAM] unsigned int 
  3208 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  product         2    4[COMRAM] unsigned int 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  2    0[COMRAM] unsigned int 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0, prodl, prodh
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3220 ;;      Params:         4       0       0       0       0       0       0       0       0
  3221 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3223 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3224 ;;Total ram usage:        6 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_atoi
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text16
  3234  001A54                     __ptext16:
  3235                           	opt callstack 0
  3236  001A54                     ___wmul:
  3237                           	opt callstack 26
  3238                           
  3239                           ;incstack = 0
  3240  001A54  5001               	movf	___wmul@multiplier,w,c
  3241  001A56  0203               	mulwf	___wmul@multiplicand,c
  3242  001A58  CFF3 F005          	movff	prodl,___wmul@product
  3243  001A5C  CFF4 F006          	movff	prodh,___wmul@product+1
  3244  001A60  5001               	movf	___wmul@multiplier,w,c
  3245  001A62  0204               	mulwf	___wmul@multiplicand+1,c
  3246  001A64  50F3               	movf	prodl,w,c
  3247  001A66  2606               	addwf	___wmul@product+1,f,c
  3248  001A68  5002               	movf	___wmul@multiplier+1,w,c
  3249  001A6A  0203               	mulwf	___wmul@multiplicand,c
  3250  001A6C  50F3               	movf	prodl,w,c
  3251  001A6E  2606               	addwf	___wmul@product+1,f,c
  3252  001A70  C005  F001         	movff	___wmul@product,?___wmul
  3253  001A74  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3254  001A78  0012               	return		;funcret
  3255  001A7A                     __end_of___wmul:
  3256                           	opt callstack 0
  3257                           
  3258 ;; *************** function _Lcd_Out2 *****************
  3259 ;; Defined at:
  3260 ;;		line 115 in file "./flex_lcd.h"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  y               1    wreg     unsigned char 
  3263 ;;  x               1    3[COMRAM] unsigned char 
  3264 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  3265 ;;		 -> palabra(20), 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  y               1    8[COMRAM] unsigned char 
  3268 ;;  data            1    9[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3278 ;;      Params:         3       0       0       0       0       0       0       0       0
  3279 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3280 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3281 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3282 ;;Total ram usage:        7 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    1
  3285 ;; This function calls:
  3286 ;;		_Lcd_Chr_CP
  3287 ;;		_Lcd_Cmd
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text17
  3294  00183A                     __ptext17:
  3295                           	opt callstack 0
  3296  00183A                     _Lcd_Out2:
  3297                           	opt callstack 29
  3298                           
  3299                           ;incstack = 0
  3300                           ;Lcd_Out2@y stored from wreg
  3301  00183A  6E09               	movwf	Lcd_Out2@y,c
  3302                           
  3303                           ;./flex_lcd.h: 115: void Lcd_Out2(unsigned char y, unsigned char x, char *buffer);./flex
      +                          _lcd.h: 116: {;./flex_lcd.h: 117: unsigned char data;;./flex_lcd.h: 118: switch (y)
  3304  00183C  D00D               	goto	l2135
  3305  00183E                     l2125:
  3306  00183E  5004               	movf	Lcd_Out2@x,w,c
  3307  001840  0F80               	addlw	128
  3308  001842  D008               	goto	L5
  3309  001844                     l2127:
  3310  001844  5004               	movf	Lcd_Out2@x,w,c
  3311  001846  0FC0               	addlw	192
  3312  001848  D005               	goto	L5
  3313  00184A                     l2129:
  3314  00184A  5004               	movf	Lcd_Out2@x,w,c
  3315  00184C  0F94               	addlw	148
  3316  00184E  D002               	goto	L5
  3317  001850                     l2131:
  3318  001850  5004               	movf	Lcd_Out2@x,w,c
  3319  001852  0FD4               	addlw	212
  3320  001854                     L5:
  3321  001854  6E0A               	movwf	Lcd_Out2@data,c
  3322  001856  D014               	goto	l2137
  3323  001858                     l2135:
  3324  001858  5009               	movf	Lcd_Out2@y,w,c
  3325  00185A  6E07               	movwf	??_Lcd_Out2& (0+255),c
  3326  00185C  6A08               	clrf	(??_Lcd_Out2+1)& (0+255),c
  3327                           
  3328                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3329                           ; Switch size 1, requested type "simple"
  3330                           ; Number of cases is 1, Range of values is 0 to 0
  3331                           ; switch strategies available:
  3332                           ; Name         Instructions Cycles
  3333                           ; simple_byte            4     3 (average)
  3334                           ;	Chosen strategy is simple_byte
  3335  00185E  5008               	movf	??_Lcd_Out2+1,w,c
  3336  001860  0A00               	xorlw	0	; case 0
  3337  001862  A4D8               	btfss	status,2,c
  3338  001864  D00D               	goto	l2137
  3339                           
  3340                           ; Switch size 1, requested type "simple"
  3341                           ; Number of cases is 4, Range of values is 1 to 4
  3342                           ; switch strategies available:
  3343                           ; Name         Instructions Cycles
  3344                           ; simple_byte           13     7 (average)
  3345                           ;	Chosen strategy is simple_byte
  3346  001866  5007               	movf	??_Lcd_Out2,w,c
  3347  001868  0A01               	xorlw	1	; case 1
  3348  00186A  B4D8               	btfsc	status,2,c
  3349  00186C  D7E8               	goto	l2125
  3350  00186E  0A03               	xorlw	3	; case 2
  3351  001870  B4D8               	btfsc	status,2,c
  3352  001872  D7E8               	goto	l2127
  3353  001874  0A01               	xorlw	1	; case 3
  3354  001876  B4D8               	btfsc	status,2,c
  3355  001878  D7E8               	goto	l2129
  3356  00187A  0A07               	xorlw	7	; case 4
  3357  00187C  B4D8               	btfsc	status,2,c
  3358  00187E  D7E8               	goto	l2131
  3359  001880                     l2137:
  3360                           
  3361                           ;./flex_lcd.h: 126: Lcd_Cmd(data);
  3362  001880  500A               	movf	Lcd_Out2@data,w,c
  3363  001882  EC32  F00A         	call	_Lcd_Cmd
  3364                           
  3365                           ;./flex_lcd.h: 127: while(*buffer)
  3366  001886  D009               	goto	l2143
  3367  001888                     l2139:
  3368                           
  3369                           ;./flex_lcd.h: 128: {;./flex_lcd.h: 129:     Lcd_Chr_CP(*buffer);
  3370  001888  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  3371  00188C  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  3372  001890  50DF               	movf	indf2,w,c
  3373  001892  EC0C  F009         	call	_Lcd_Chr_CP
  3374                           
  3375                           ;./flex_lcd.h: 130:     buffer++;
  3376  001896  4A05               	infsnz	Lcd_Out2@buffer,f,c
  3377  001898  2A06               	incf	Lcd_Out2@buffer+1,f,c
  3378  00189A                     l2143:
  3379                           
  3380                           ;./flex_lcd.h: 127: while(*buffer)
  3381  00189A  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  3382  00189E  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  3383  0018A2  50DF               	movf	indf2,w,c
  3384  0018A4  B4D8               	btfsc	status,2,c
  3385  0018A6  0012               	return	
  3386  0018A8  D7EF               	goto	l2139
  3387  0018AA                     __end_of_Lcd_Out2:
  3388                           	opt callstack 0
  3389                           
  3390 ;; *************** function _Lcd_Out *****************
  3391 ;; Defined at:
  3392 ;;		line 94 in file "./flex_lcd.h"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  y               1    wreg     unsigned char 
  3395 ;;  x               1    3[COMRAM] unsigned char 
  3396 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  3397 ;;		 -> STR_6(10), STR_5(16), STR_4(11), STR_3(15), 
  3398 ;;		 -> STR_2(11), 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  y               1    8[COMRAM] unsigned char 
  3401 ;;  data            1    9[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3411 ;;      Params:         3       0       0       0       0       0       0       0       0
  3412 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3413 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3414 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3415 ;;Total ram usage:        7 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    1
  3418 ;; This function calls:
  3419 ;;		_Lcd_Chr_CP
  3420 ;;		_Lcd_Cmd
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text18
  3427  0017C4                     __ptext18:
  3428                           	opt callstack 0
  3429  0017C4                     _Lcd_Out:
  3430                           	opt callstack 29
  3431                           
  3432                           ;incstack = 0
  3433                           ;Lcd_Out@y stored from wreg
  3434  0017C4  6E09               	movwf	Lcd_Out@y,c
  3435                           
  3436                           ;./flex_lcd.h: 94: void Lcd_Out(unsigned char y, unsigned char x, const char *buffer);./
      +                          flex_lcd.h: 95: {;./flex_lcd.h: 96: unsigned char data;;./flex_lcd.h: 97: switch (y)
  3437  0017C6  D00D               	goto	l2109
  3438  0017C8                     l2099:
  3439  0017C8  5004               	movf	Lcd_Out@x,w,c
  3440  0017CA  0F80               	addlw	128
  3441  0017CC  D008               	goto	L8
  3442  0017CE                     l2101:
  3443  0017CE  5004               	movf	Lcd_Out@x,w,c
  3444  0017D0  0FC0               	addlw	192
  3445  0017D2  D005               	goto	L8
  3446  0017D4                     l2103:
  3447  0017D4  5004               	movf	Lcd_Out@x,w,c
  3448  0017D6  0F94               	addlw	148
  3449  0017D8  D002               	goto	L8
  3450  0017DA                     l2105:
  3451  0017DA  5004               	movf	Lcd_Out@x,w,c
  3452  0017DC  0FD4               	addlw	212
  3453  0017DE                     L8:
  3454  0017DE  6E0A               	movwf	Lcd_Out@data,c
  3455  0017E0  D014               	goto	l2111
  3456  0017E2                     l2109:
  3457  0017E2  5009               	movf	Lcd_Out@y,w,c
  3458  0017E4  6E07               	movwf	??_Lcd_Out& (0+255),c
  3459  0017E6  6A08               	clrf	(??_Lcd_Out+1)& (0+255),c
  3460                           
  3461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3462                           ; Switch size 1, requested type "simple"
  3463                           ; Number of cases is 1, Range of values is 0 to 0
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte            4     3 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  0017E8  5008               	movf	??_Lcd_Out+1,w,c
  3469  0017EA  0A00               	xorlw	0	; case 0
  3470  0017EC  A4D8               	btfss	status,2,c
  3471  0017EE  D00D               	goto	l2111
  3472                           
  3473                           ; Switch size 1, requested type "simple"
  3474                           ; Number of cases is 4, Range of values is 1 to 4
  3475                           ; switch strategies available:
  3476                           ; Name         Instructions Cycles
  3477                           ; simple_byte           13     7 (average)
  3478                           ;	Chosen strategy is simple_byte
  3479  0017F0  5007               	movf	??_Lcd_Out,w,c
  3480  0017F2  0A01               	xorlw	1	; case 1
  3481  0017F4  B4D8               	btfsc	status,2,c
  3482  0017F6  D7E8               	goto	l2099
  3483  0017F8  0A03               	xorlw	3	; case 2
  3484  0017FA  B4D8               	btfsc	status,2,c
  3485  0017FC  D7E8               	goto	l2101
  3486  0017FE  0A01               	xorlw	1	; case 3
  3487  001800  B4D8               	btfsc	status,2,c
  3488  001802  D7E8               	goto	l2103
  3489  001804  0A07               	xorlw	7	; case 4
  3490  001806  B4D8               	btfsc	status,2,c
  3491  001808  D7E8               	goto	l2105
  3492  00180A                     l2111:
  3493                           
  3494                           ;./flex_lcd.h: 105: Lcd_Cmd(data);
  3495  00180A  500A               	movf	Lcd_Out@data,w,c
  3496  00180C  EC32  F00A         	call	_Lcd_Cmd
  3497                           
  3498                           ;./flex_lcd.h: 106: while(*buffer)
  3499  001810  D00A               	goto	l2117
  3500  001812                     l2113:
  3501                           
  3502                           ;./flex_lcd.h: 107: {;./flex_lcd.h: 108:     Lcd_Chr_CP(*buffer);
  3503  001812  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3504  001816  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3505  00181A                     	if	0	;tblptru may be non-zero
  3506  00181A                     	endif
  3507  00181A                     	if	0	;tblptru may be non-zero
  3508  00181A                     	endif
  3509  00181A  0008               	tblrd		*
  3510  00181C  50F5               	movf	tablat,w,c
  3511  00181E  EC0C  F009         	call	_Lcd_Chr_CP
  3512                           
  3513                           ;./flex_lcd.h: 109:     buffer++;
  3514  001822  4A05               	infsnz	Lcd_Out@buffer,f,c
  3515  001824  2A06               	incf	Lcd_Out@buffer+1,f,c
  3516  001826                     l2117:
  3517                           
  3518                           ;./flex_lcd.h: 106: while(*buffer)
  3519  001826  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3520  00182A  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3521  00182E                     	if	0	;tblptru may be non-zero
  3522  00182E                     	endif
  3523  00182E                     	if	0	;tblptru may be non-zero
  3524  00182E                     	endif
  3525  00182E  0008               	tblrd		*
  3526  001830  50F5               	movf	tablat,w,c
  3527  001832  0900               	iorlw	0
  3528  001834  B4D8               	btfsc	status,2,c
  3529  001836  0012               	return	
  3530  001838  D7EC               	goto	l2113
  3531  00183A                     __end_of_Lcd_Out:
  3532                           	opt callstack 0
  3533                           
  3534 ;; *************** function _Lcd_Chr_CP *****************
  3535 ;; Defined at:
  3536 ;;		line 136 in file "./flex_lcd.h"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  data            1    wreg     unsigned char 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  data            1    2[COMRAM] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3550 ;;      Params:         0       0       0       0       0       0       0       0       0
  3551 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3552 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3553 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3554 ;;Total ram usage:        3 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_Lcd_Out
  3560 ;;		_Lcd_Out2
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text19
  3565  001218                     __ptext19:
  3566                           	opt callstack 0
  3567  001218                     _Lcd_Chr_CP:
  3568                           	opt callstack 29
  3569                           
  3570                           ;incstack = 0
  3571                           ;Lcd_Chr_CP@data stored from wreg
  3572  001218  6E03               	movwf	Lcd_Chr_CP@data,c
  3573                           
  3574                           ;./flex_lcd.h: 137: PORTDbits.RD5 = 0; PORTDbits.RD4 = 1;
  3575  00121A  9A83               	bcf	3971,5,c	;volatile
  3576  00121C  8883               	bsf	3971,4,c	;volatile
  3577                           
  3578                           ;./flex_lcd.h: 138: PORTDbits.RD3 = (data & 0b10000000)>>7; PORTDbits.RD2 = (data & 0b01
      +                          000000)>>6;
  3579  00121E  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  3580  001220  AE03               	btfss	Lcd_Chr_CP@data,7,c
  3581  001222  D001               	bra	u1395
  3582  001224  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  3583  001226                     u1395:
  3584  001226  0E01               	movlw	1
  3585  001228  1601               	andwf	??_Lcd_Chr_CP,f,c
  3586  00122A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3587  00122C  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3588  00122E  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3589  001230  5083               	movf	3971,w,c	;volatile
  3590  001232  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3591  001234  0BF7               	andlw	-9
  3592  001236  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3593  001238  6E83               	movwf	3971,c	;volatile
  3594  00123A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3595  00123E  0E06               	movlw	6
  3596  001240  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3597  001242                     u1405:
  3598  001242  90D8               	bcf	status,0,c
  3599  001244  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3600  001246  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3601  001248  D7FC               	goto	u1405
  3602  00124A  0E01               	movlw	1
  3603  00124C  1601               	andwf	??_Lcd_Chr_CP,f,c
  3604  00124E  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3605  001250  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3606  001252  5083               	movf	3971,w,c	;volatile
  3607  001254  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3608  001256  0BFB               	andlw	-5
  3609  001258  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3610  00125A  6E83               	movwf	3971,c	;volatile
  3611                           
  3612                           ;./flex_lcd.h: 139: PORTDbits.RD1 = (data & 0b00100000)>>5; PORTDbits.RD0 = (data & 0b00
      +                          010000)>>4;
  3613  00125C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3614  001260  0E05               	movlw	5
  3615  001262  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3616  001264                     u1415:
  3617  001264  90D8               	bcf	status,0,c
  3618  001266  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3619  001268  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3620  00126A  D7FC               	goto	u1415
  3621  00126C  0E01               	movlw	1
  3622  00126E  1601               	andwf	??_Lcd_Chr_CP,f,c
  3623  001270  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3624  001272  5083               	movf	3971,w,c	;volatile
  3625  001274  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3626  001276  0BFD               	andlw	-3
  3627  001278  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3628  00127A  6E83               	movwf	3971,c	;volatile
  3629  00127C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3630  001280  3A01               	swapf	??_Lcd_Chr_CP,f,c
  3631  001282  0E0F               	movlw	15
  3632  001284  1601               	andwf	??_Lcd_Chr_CP,f,c
  3633  001286  0E01               	movlw	1
  3634  001288  1601               	andwf	??_Lcd_Chr_CP,f,c
  3635  00128A  5083               	movf	3971,w,c	;volatile
  3636  00128C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3637  00128E  0BFE               	andlw	-2
  3638  001290  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3639  001292  6E83               	movwf	3971,c	;volatile
  3640                           
  3641                           ;./flex_lcd.h: 140: _delay(10);
  3642  001294  0E03               	movlw	3
  3643  001296                     u1597:
  3644  001296  2EE8               	decfsz	wreg,f,c
  3645  001298  D7FE               	bra	u1597
  3646  00129A  F000               	nop	
  3647                           
  3648                           ;./flex_lcd.h: 141: PORTDbits.RD5 = 1; _delay((unsigned long)((5)*(8000000/4000000.0)));
      +                           PORTDbits.RD5 = 0;
  3649  00129C  8A83               	bsf	3971,5,c	;volatile
  3650  00129E  0E03               	movlw	3
  3651  0012A0                     u1607:
  3652  0012A0  2EE8               	decfsz	wreg,f,c
  3653  0012A2  D7FE               	bra	u1607
  3654  0012A4  F000               	nop	
  3655  0012A6  9A83               	bcf	3971,5,c	;volatile
  3656                           
  3657                           ;./flex_lcd.h: 142: PORTDbits.RD3 = (data & 0b00001000)>>3; PORTDbits.RD2 = (data & 0b00
      +                          000100)>>2;
  3658  0012A8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3659  0012AC  90D8               	bcf	status,0,c
  3660  0012AE  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3661  0012B0  90D8               	bcf	status,0,c
  3662  0012B2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3663  0012B4  90D8               	bcf	status,0,c
  3664  0012B6  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3665  0012B8  0E01               	movlw	1
  3666  0012BA  1601               	andwf	??_Lcd_Chr_CP,f,c
  3667  0012BC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3668  0012BE  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3669  0012C0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3670  0012C2  5083               	movf	3971,w,c	;volatile
  3671  0012C4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3672  0012C6  0BF7               	andlw	-9
  3673  0012C8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3674  0012CA  6E83               	movwf	3971,c	;volatile
  3675  0012CC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3676  0012D0  90D8               	bcf	status,0,c
  3677  0012D2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3678  0012D4  90D8               	bcf	status,0,c
  3679  0012D6  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3680  0012D8  0E01               	movlw	1
  3681  0012DA  1601               	andwf	??_Lcd_Chr_CP,f,c
  3682  0012DC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3683  0012DE  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3684  0012E0  5083               	movf	3971,w,c	;volatile
  3685  0012E2  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3686  0012E4  0BFB               	andlw	-5
  3687  0012E6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3688  0012E8  6E83               	movwf	3971,c	;volatile
  3689                           
  3690                           ;./flex_lcd.h: 143: PORTDbits.RD1 = (data & 0b00000010)>>1; PORTDbits.RD0 = (data & 0b00
      +                          000001);
  3691  0012EA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3692  0012EE  90D8               	bcf	status,0,c
  3693  0012F0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3694  0012F2  0E01               	movlw	1
  3695  0012F4  1601               	andwf	??_Lcd_Chr_CP,f,c
  3696  0012F6  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3697  0012F8  5083               	movf	3971,w,c	;volatile
  3698  0012FA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3699  0012FC  0BFD               	andlw	-3
  3700  0012FE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3701  001300  6E83               	movwf	3971,c	;volatile
  3702  001302  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3703  001306  0E01               	movlw	1
  3704  001308  1601               	andwf	??_Lcd_Chr_CP,f,c
  3705  00130A  5083               	movf	3971,w,c	;volatile
  3706  00130C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3707  00130E  0BFE               	andlw	-2
  3708  001310  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3709  001312  6E83               	movwf	3971,c	;volatile
  3710                           
  3711                           ;./flex_lcd.h: 144: _delay(10);
  3712  001314  0E03               	movlw	3
  3713  001316                     u1617:
  3714  001316  2EE8               	decfsz	wreg,f,c
  3715  001318  D7FE               	bra	u1617
  3716  00131A  F000               	nop	
  3717                           
  3718                           ;./flex_lcd.h: 145: PORTDbits.RD5 = 1; _delay((unsigned long)((5)*(8000000/4000000.0)));
      +                           PORTDbits.RD5 = 0;
  3719  00131C  8A83               	bsf	3971,5,c	;volatile
  3720  00131E  0E03               	movlw	3
  3721  001320                     u1627:
  3722  001320  2EE8               	decfsz	wreg,f,c
  3723  001322  D7FE               	bra	u1627
  3724  001324  F000               	nop	
  3725  001326  9A83               	bcf	3971,5,c	;volatile
  3726                           
  3727                           ;./flex_lcd.h: 146: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned l
      +                          ong)((5500)*(8000000/4000000.0)));
  3728  001328  0E03               	movlw	3
  3729  00132A                     u1637:
  3730  00132A  2EE8               	decfsz	wreg,f,c
  3731  00132C  D7FE               	bra	u1637
  3732  00132E  F000               	nop	
  3733  001330  0E0F               	movlw	15
  3734  001332  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  3735  001334  0E48               	movlw	72
  3736  001336                     u1647:
  3737  001336  2EE8               	decfsz	wreg,f,c
  3738  001338  D7FE               	bra	u1647
  3739  00133A  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  3740  00133C  D7FC               	bra	u1647
  3741  00133E  0012               	return		;funcret
  3742  001340                     __end_of_Lcd_Chr_CP:
  3743                           	opt callstack 0
  3744                           
  3745 ;; *************** function _Lcd_Init *****************
  3746 ;; Defined at:
  3747 ;;		line 52 in file "./flex_lcd.h"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  data            1    4[COMRAM] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3761 ;;      Params:         0       0       0       0       0       0       0       0       0
  3762 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3763 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3764 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3765 ;;Total ram usage:        2 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    1
  3768 ;; This function calls:
  3769 ;;		_Lcd_Cmd
  3770 ;; This function is called by:
  3771 ;;		_main
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text20
  3776  001584                     __ptext20:
  3777                           	opt callstack 0
  3778  001584                     _Lcd_Init:
  3779                           	opt callstack 29
  3780                           
  3781                           ;./flex_lcd.h: 53: unsigned char data;;./flex_lcd.h: 54: TRISDbits.TRISD3 = 0;
  3782                           
  3783                           ;incstack = 0
  3784  001584  9695               	bcf	3989,3,c	;volatile
  3785                           
  3786                           ;./flex_lcd.h: 55: TRISDbits.TRISD2 = 0;
  3787  001586  9495               	bcf	3989,2,c	;volatile
  3788                           
  3789                           ;./flex_lcd.h: 56: TRISDbits.TRISD1 = 0;
  3790  001588  9295               	bcf	3989,1,c	;volatile
  3791                           
  3792                           ;./flex_lcd.h: 57: TRISDbits.TRISD0 = 0;
  3793  00158A  9095               	bcf	3989,0,c	;volatile
  3794                           
  3795                           ;./flex_lcd.h: 58: TRISDbits.TRISD5 = 0;
  3796  00158C  9A95               	bcf	3989,5,c	;volatile
  3797                           
  3798                           ;./flex_lcd.h: 59: TRISDbits.TRISD4 = 0;
  3799  00158E  9895               	bcf	3989,4,c	;volatile
  3800                           
  3801                           ;./flex_lcd.h: 60: PORTDbits.RD3 = 0;
  3802  001590  9683               	bcf	3971,3,c	;volatile
  3803                           
  3804                           ;./flex_lcd.h: 61: PORTDbits.RD2 = 0;
  3805  001592  9483               	bcf	3971,2,c	;volatile
  3806                           
  3807                           ;./flex_lcd.h: 62: PORTDbits.RD1 = 0;
  3808  001594  9283               	bcf	3971,1,c	;volatile
  3809                           
  3810                           ;./flex_lcd.h: 63: PORTDbits.RD0 = 0;
  3811  001596  9083               	bcf	3971,0,c	;volatile
  3812                           
  3813                           ;./flex_lcd.h: 64: PORTDbits.RD5 = 0;
  3814  001598  9A83               	bcf	3971,5,c	;volatile
  3815                           
  3816                           ;./flex_lcd.h: 65: PORTDbits.RD4 = 0;
  3817  00159A  9883               	bcf	3971,4,c	;volatile
  3818                           
  3819                           ;./flex_lcd.h: 66: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3820  00159C  0E0F               	movlw	15
  3821  00159E  6E04               	movwf	??_Lcd_Init& (0+255),c
  3822  0015A0  0E48               	movlw	72
  3823  0015A2                     u1657:
  3824  0015A2  2EE8               	decfsz	wreg,f,c
  3825  0015A4  D7FE               	bra	u1657
  3826  0015A6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3827  0015A8  D7FC               	bra	u1657
  3828                           
  3829                           ;./flex_lcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3830  0015AA  0E0F               	movlw	15
  3831  0015AC  6E04               	movwf	??_Lcd_Init& (0+255),c
  3832  0015AE  0E48               	movlw	72
  3833  0015B0                     u1667:
  3834  0015B0  2EE8               	decfsz	wreg,f,c
  3835  0015B2  D7FE               	bra	u1667
  3836  0015B4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3837  0015B6  D7FC               	bra	u1667
  3838                           
  3839                           ;./flex_lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3840  0015B8  0E0F               	movlw	15
  3841  0015BA  6E04               	movwf	??_Lcd_Init& (0+255),c
  3842  0015BC  0E48               	movlw	72
  3843  0015BE                     u1677:
  3844  0015BE  2EE8               	decfsz	wreg,f,c
  3845  0015C0  D7FE               	bra	u1677
  3846  0015C2  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3847  0015C4  D7FC               	bra	u1677
  3848                           
  3849                           ;./flex_lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3850  0015C6  0E0F               	movlw	15
  3851  0015C8  6E04               	movwf	??_Lcd_Init& (0+255),c
  3852  0015CA  0E48               	movlw	72
  3853  0015CC                     u1687:
  3854  0015CC  2EE8               	decfsz	wreg,f,c
  3855  0015CE  D7FE               	bra	u1687
  3856  0015D0  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3857  0015D2  D7FC               	bra	u1687
  3858                           
  3859                           ;./flex_lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3860  0015D4  0E0F               	movlw	15
  3861  0015D6  6E04               	movwf	??_Lcd_Init& (0+255),c
  3862  0015D8  0E48               	movlw	72
  3863  0015DA                     u1697:
  3864  0015DA  2EE8               	decfsz	wreg,f,c
  3865  0015DC  D7FE               	bra	u1697
  3866  0015DE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3867  0015E0  D7FC               	bra	u1697
  3868                           
  3869                           ;./flex_lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3870  0015E2  0E0F               	movlw	15
  3871  0015E4  6E04               	movwf	??_Lcd_Init& (0+255),c
  3872  0015E6  0E48               	movlw	72
  3873  0015E8                     u1707:
  3874  0015E8  2EE8               	decfsz	wreg,f,c
  3875  0015EA  D7FE               	bra	u1707
  3876  0015EC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3877  0015EE  D7FC               	bra	u1707
  3878                           
  3879                           ;./flex_lcd.h: 72: for(data = 1; data < 4; data ++)
  3880  0015F0  0E01               	movlw	1
  3881  0015F2  6E05               	movwf	Lcd_Init@data,c
  3882  0015F4                     l15:
  3883                           
  3884                           ;./flex_lcd.h: 73: {;./flex_lcd.h: 74:     PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbi
      +                          ts.RD1 = 1; PORTDbits.RD0 = 1; PORTDbits.RD5 = 0;
  3885  0015F4  9683               	bcf	3971,3,c	;volatile
  3886  0015F6  9483               	bcf	3971,2,c	;volatile
  3887  0015F8  8283               	bsf	3971,1,c	;volatile
  3888  0015FA  8083               	bsf	3971,0,c	;volatile
  3889  0015FC  9A83               	bcf	3971,5,c	;volatile
  3890                           
  3891                           ;./flex_lcd.h: 75:     PORTDbits.RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbit
      +                          s.RD1 = 1; PORTDbits.RD0 = 1;
  3892  0015FE  9883               	bcf	3971,4,c	;volatile
  3893  001600  9683               	bcf	3971,3,c	;volatile
  3894  001602  9483               	bcf	3971,2,c	;volatile
  3895  001604  8283               	bsf	3971,1,c	;volatile
  3896  001606  8083               	bsf	3971,0,c	;volatile
  3897                           
  3898                           ;./flex_lcd.h: 76:     PORTDbits.RD5 = 1; PORTDbits.RD4 = 0;
  3899  001608  8A83               	bsf	3971,5,c	;volatile
  3900  00160A  9883               	bcf	3971,4,c	;volatile
  3901                           
  3902                           ;./flex_lcd.h: 77:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  3903  00160C  0E03               	movlw	3
  3904  00160E                     u1717:
  3905  00160E  2EE8               	decfsz	wreg,f,c
  3906  001610  D7FE               	bra	u1717
  3907  001612  F000               	nop	
  3908                           
  3909                           ;./flex_lcd.h: 78:     PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbits.RD1 = 1; PORTDbit
      +                          s.RD0 = 1; PORTDbits.RD5 = 0;
  3910  001614  9683               	bcf	3971,3,c	;volatile
  3911  001616  9483               	bcf	3971,2,c	;volatile
  3912  001618  8283               	bsf	3971,1,c	;volatile
  3913  00161A  8083               	bsf	3971,0,c	;volatile
  3914  00161C  9A83               	bcf	3971,5,c	;volatile
  3915                           
  3916                           ;./flex_lcd.h: 79:     PORTDbits.RD4 = 0;
  3917  00161E  9883               	bcf	3971,4,c	;volatile
  3918                           
  3919                           ;./flex_lcd.h: 80:     _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3920  001620  0E0F               	movlw	15
  3921  001622  6E04               	movwf	??_Lcd_Init& (0+255),c
  3922  001624  0E48               	movlw	72
  3923  001626                     u1727:
  3924  001626  2EE8               	decfsz	wreg,f,c
  3925  001628  D7FE               	bra	u1727
  3926  00162A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3927  00162C  D7FC               	bra	u1727
  3928                           
  3929                           ;./flex_lcd.h: 81: }
  3930  00162E  2A05               	incf	Lcd_Init@data,f,c
  3931  001630  0E03               	movlw	3
  3932  001632  6405               	cpfsgt	Lcd_Init@data,c
  3933  001634  D7DF               	goto	l15
  3934                           
  3935                           ;./flex_lcd.h: 82: PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbits.RD1 = 1; PORTDbits.RD
      +                          0 = 0; PORTDbits.RD5 = 0; PORTDbits.RD4 = 0;
  3936  001636  9683               	bcf	3971,3,c	;volatile
  3937  001638  9483               	bcf	3971,2,c	;volatile
  3938  00163A  8283               	bsf	3971,1,c	;volatile
  3939  00163C  9083               	bcf	3971,0,c	;volatile
  3940  00163E  9A83               	bcf	3971,5,c	;volatile
  3941  001640  9883               	bcf	3971,4,c	;volatile
  3942                           
  3943                           ;./flex_lcd.h: 83: PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbits.RD1 = 1; PORTDbits.RD
      +                          0 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0;
  3944  001642  9683               	bcf	3971,3,c	;volatile
  3945  001644  9483               	bcf	3971,2,c	;volatile
  3946  001646  8283               	bsf	3971,1,c	;volatile
  3947  001648  9083               	bcf	3971,0,c	;volatile
  3948  00164A  8A83               	bsf	3971,5,c	;volatile
  3949  00164C  9883               	bcf	3971,4,c	;volatile
  3950                           
  3951                           ;./flex_lcd.h: 84: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3952  00164E  0E03               	movlw	3
  3953  001650                     u1737:
  3954  001650  2EE8               	decfsz	wreg,f,c
  3955  001652  D7FE               	bra	u1737
  3956  001654  F000               	nop	
  3957                           
  3958                           ;./flex_lcd.h: 85: PORTDbits.RD3 = 0; PORTDbits.RD2 = 0; PORTDbits.RD1 = 1; PORTDbits.RD
      +                          0 = 0; PORTDbits.RD5 = 0; PORTDbits.RD4 = 0;
  3959  001656  9683               	bcf	3971,3,c	;volatile
  3960  001658  9483               	bcf	3971,2,c	;volatile
  3961  00165A  8283               	bsf	3971,1,c	;volatile
  3962  00165C  9083               	bcf	3971,0,c	;volatile
  3963  00165E  9A83               	bcf	3971,5,c	;volatile
  3964  001660  9883               	bcf	3971,4,c	;volatile
  3965                           
  3966                           ;./flex_lcd.h: 86: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3967  001662  0E0F               	movlw	15
  3968  001664  6E04               	movwf	??_Lcd_Init& (0+255),c
  3969  001666  0E48               	movlw	72
  3970  001668                     u1747:
  3971  001668  2EE8               	decfsz	wreg,f,c
  3972  00166A  D7FE               	bra	u1747
  3973  00166C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  3974  00166E  D7FC               	bra	u1747
  3975  001670  0E28               	movlw	40
  3976  001672  EC32  F00A         	call	_Lcd_Cmd
  3977  001676  0E10               	movlw	16
  3978  001678  EC32  F00A         	call	_Lcd_Cmd
  3979  00167C  0E01               	movlw	1
  3980  00167E  EC32  F00A         	call	_Lcd_Cmd
  3981  001682  0E0F               	movlw	15
  3982  001684  EC32  F00A         	call	_Lcd_Cmd
  3983  001688  0012               	return		;funcret
  3984  00168A                     __end_of_Lcd_Init:
  3985                           	opt callstack 0
  3986                           
  3987 ;; *************** function _Lcd_Cmd *****************
  3988 ;; Defined at:
  3989 ;;		line 150 in file "./flex_lcd.h"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  data            1    wreg     unsigned char 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  data            1    2[COMRAM] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, status,2, status,0
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4003 ;;      Params:         0       0       0       0       0       0       0       0       0
  4004 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4005 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4006 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4007 ;;Total ram usage:        3 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_Lcd_Init
  4013 ;;		_Lcd_Out
  4014 ;;		_Lcd_Out2
  4015 ;;		_main
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text21
  4020  001464                     __ptext21:
  4021                           	opt callstack 0
  4022  001464                     _Lcd_Cmd:
  4023                           	opt callstack 29
  4024                           
  4025                           ;incstack = 0
  4026                           ;Lcd_Cmd@data stored from wreg
  4027  001464  6E03               	movwf	Lcd_Cmd@data,c
  4028                           
  4029                           ;./flex_lcd.h: 151: PORTDbits.RD5 = 0; PORTDbits.RD4 = 0;
  4030  001466  9A83               	bcf	3971,5,c	;volatile
  4031  001468  9883               	bcf	3971,4,c	;volatile
  4032                           
  4033                           ;./flex_lcd.h: 152: PORTDbits.RD3 = (data & 0b10000000)>>7; PORTDbits.RD2 = (data & 0b01
      +                          000000)>>6;
  4034  00146A  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  4035  00146C  AE03               	btfss	Lcd_Cmd@data,7,c
  4036  00146E  D001               	bra	u1365
  4037  001470  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  4038  001472                     u1365:
  4039  001472  0E01               	movlw	1
  4040  001474  1601               	andwf	??_Lcd_Cmd,f,c
  4041  001476  4601               	rlncf	??_Lcd_Cmd,f,c
  4042  001478  4601               	rlncf	??_Lcd_Cmd,f,c
  4043  00147A  4601               	rlncf	??_Lcd_Cmd,f,c
  4044  00147C  5083               	movf	3971,w,c	;volatile
  4045  00147E  1801               	xorwf	??_Lcd_Cmd,w,c
  4046  001480  0BF7               	andlw	-9
  4047  001482  1801               	xorwf	??_Lcd_Cmd,w,c
  4048  001484  6E83               	movwf	3971,c	;volatile
  4049  001486  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4050  00148A  0E06               	movlw	6
  4051  00148C  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  4052  00148E                     u1375:
  4053  00148E  90D8               	bcf	status,0,c
  4054  001490  3201               	rrcf	??_Lcd_Cmd,f,c
  4055  001492  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  4056  001494  D7FC               	goto	u1375
  4057  001496  0E01               	movlw	1
  4058  001498  1601               	andwf	??_Lcd_Cmd,f,c
  4059  00149A  4601               	rlncf	??_Lcd_Cmd,f,c
  4060  00149C  4601               	rlncf	??_Lcd_Cmd,f,c
  4061  00149E  5083               	movf	3971,w,c	;volatile
  4062  0014A0  1801               	xorwf	??_Lcd_Cmd,w,c
  4063  0014A2  0BFB               	andlw	-5
  4064  0014A4  1801               	xorwf	??_Lcd_Cmd,w,c
  4065  0014A6  6E83               	movwf	3971,c	;volatile
  4066                           
  4067                           ;./flex_lcd.h: 153: PORTDbits.RD1 = (data & 0b00100000)>>5; PORTDbits.RD0 = (data & 0b00
      +                          010000)>>4;
  4068  0014A8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4069  0014AC  0E05               	movlw	5
  4070  0014AE  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  4071  0014B0                     u1385:
  4072  0014B0  90D8               	bcf	status,0,c
  4073  0014B2  3201               	rrcf	??_Lcd_Cmd,f,c
  4074  0014B4  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  4075  0014B6  D7FC               	goto	u1385
  4076  0014B8  0E01               	movlw	1
  4077  0014BA  1601               	andwf	??_Lcd_Cmd,f,c
  4078  0014BC  4601               	rlncf	??_Lcd_Cmd,f,c
  4079  0014BE  5083               	movf	3971,w,c	;volatile
  4080  0014C0  1801               	xorwf	??_Lcd_Cmd,w,c
  4081  0014C2  0BFD               	andlw	-3
  4082  0014C4  1801               	xorwf	??_Lcd_Cmd,w,c
  4083  0014C6  6E83               	movwf	3971,c	;volatile
  4084  0014C8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4085  0014CC  3A01               	swapf	??_Lcd_Cmd,f,c
  4086  0014CE  0E0F               	movlw	15
  4087  0014D0  1601               	andwf	??_Lcd_Cmd,f,c
  4088  0014D2  0E01               	movlw	1
  4089  0014D4  1601               	andwf	??_Lcd_Cmd,f,c
  4090  0014D6  5083               	movf	3971,w,c	;volatile
  4091  0014D8  1801               	xorwf	??_Lcd_Cmd,w,c
  4092  0014DA  0BFE               	andlw	-2
  4093  0014DC  1801               	xorwf	??_Lcd_Cmd,w,c
  4094  0014DE  6E83               	movwf	3971,c	;volatile
  4095                           
  4096                           ;./flex_lcd.h: 154: _delay(10);
  4097  0014E0  0E03               	movlw	3
  4098  0014E2                     u1757:
  4099  0014E2  2EE8               	decfsz	wreg,f,c
  4100  0014E4  D7FE               	bra	u1757
  4101  0014E6  F000               	nop	
  4102                           
  4103                           ;./flex_lcd.h: 155: PORTDbits.RD5 = 1; _delay((unsigned long)((5)*(8000000/4000000.0)));
      +                           PORTDbits.RD5 = 0;
  4104  0014E8  8A83               	bsf	3971,5,c	;volatile
  4105  0014EA  0E03               	movlw	3
  4106  0014EC                     u1767:
  4107  0014EC  2EE8               	decfsz	wreg,f,c
  4108  0014EE  D7FE               	bra	u1767
  4109  0014F0  F000               	nop	
  4110  0014F2  9A83               	bcf	3971,5,c	;volatile
  4111                           
  4112                           ;./flex_lcd.h: 156: PORTDbits.RD3 = (data & 0b00001000)>>3; PORTDbits.RD2 = (data & 0b00
      +                          000100)>>2;
  4113  0014F4  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4114  0014F8  90D8               	bcf	status,0,c
  4115  0014FA  3201               	rrcf	??_Lcd_Cmd,f,c
  4116  0014FC  90D8               	bcf	status,0,c
  4117  0014FE  3201               	rrcf	??_Lcd_Cmd,f,c
  4118  001500  90D8               	bcf	status,0,c
  4119  001502  3201               	rrcf	??_Lcd_Cmd,f,c
  4120  001504  0E01               	movlw	1
  4121  001506  1601               	andwf	??_Lcd_Cmd,f,c
  4122  001508  4601               	rlncf	??_Lcd_Cmd,f,c
  4123  00150A  4601               	rlncf	??_Lcd_Cmd,f,c
  4124  00150C  4601               	rlncf	??_Lcd_Cmd,f,c
  4125  00150E  5083               	movf	3971,w,c	;volatile
  4126  001510  1801               	xorwf	??_Lcd_Cmd,w,c
  4127  001512  0BF7               	andlw	-9
  4128  001514  1801               	xorwf	??_Lcd_Cmd,w,c
  4129  001516  6E83               	movwf	3971,c	;volatile
  4130  001518  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4131  00151C  90D8               	bcf	status,0,c
  4132  00151E  3201               	rrcf	??_Lcd_Cmd,f,c
  4133  001520  90D8               	bcf	status,0,c
  4134  001522  3201               	rrcf	??_Lcd_Cmd,f,c
  4135  001524  0E01               	movlw	1
  4136  001526  1601               	andwf	??_Lcd_Cmd,f,c
  4137  001528  4601               	rlncf	??_Lcd_Cmd,f,c
  4138  00152A  4601               	rlncf	??_Lcd_Cmd,f,c
  4139  00152C  5083               	movf	3971,w,c	;volatile
  4140  00152E  1801               	xorwf	??_Lcd_Cmd,w,c
  4141  001530  0BFB               	andlw	-5
  4142  001532  1801               	xorwf	??_Lcd_Cmd,w,c
  4143  001534  6E83               	movwf	3971,c	;volatile
  4144                           
  4145                           ;./flex_lcd.h: 157: PORTDbits.RD1 = (data & 0b00000010)>>1; PORTDbits.RD0 = (data & 0b00
      +                          000001);
  4146  001536  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4147  00153A  90D8               	bcf	status,0,c
  4148  00153C  3201               	rrcf	??_Lcd_Cmd,f,c
  4149  00153E  0E01               	movlw	1
  4150  001540  1601               	andwf	??_Lcd_Cmd,f,c
  4151  001542  4601               	rlncf	??_Lcd_Cmd,f,c
  4152  001544  5083               	movf	3971,w,c	;volatile
  4153  001546  1801               	xorwf	??_Lcd_Cmd,w,c
  4154  001548  0BFD               	andlw	-3
  4155  00154A  1801               	xorwf	??_Lcd_Cmd,w,c
  4156  00154C  6E83               	movwf	3971,c	;volatile
  4157  00154E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4158  001552  0E01               	movlw	1
  4159  001554  1601               	andwf	??_Lcd_Cmd,f,c
  4160  001556  5083               	movf	3971,w,c	;volatile
  4161  001558  1801               	xorwf	??_Lcd_Cmd,w,c
  4162  00155A  0BFE               	andlw	-2
  4163  00155C  1801               	xorwf	??_Lcd_Cmd,w,c
  4164  00155E  6E83               	movwf	3971,c	;volatile
  4165                           
  4166                           ;./flex_lcd.h: 158: _delay(10);
  4167  001560  0E03               	movlw	3
  4168  001562                     u1777:
  4169  001562  2EE8               	decfsz	wreg,f,c
  4170  001564  D7FE               	bra	u1777
  4171  001566  F000               	nop	
  4172                           
  4173                           ;./flex_lcd.h: 159: PORTDbits.RD5 = 1; _delay((unsigned long)((5)*(8000000/4000000.0)));
      +                           PORTDbits.RD5 = 0;
  4174  001568  8A83               	bsf	3971,5,c	;volatile
  4175  00156A  0E03               	movlw	3
  4176  00156C                     u1787:
  4177  00156C  2EE8               	decfsz	wreg,f,c
  4178  00156E  D7FE               	bra	u1787
  4179  001570  F000               	nop	
  4180  001572  9A83               	bcf	3971,5,c	;volatile
  4181                           
  4182                           ;./flex_lcd.h: 160: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4183  001574  0E0F               	movlw	15
  4184  001576  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  4185  001578  0E48               	movlw	72
  4186  00157A                     u1797:
  4187  00157A  2EE8               	decfsz	wreg,f,c
  4188  00157C  D7FE               	bra	u1797
  4189  00157E  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  4190  001580  D7FC               	bra	u1797
  4191  001582  0012               	return		;funcret
  4192  001584                     __end_of_Lcd_Cmd:
  4193                           	opt callstack 0
  4194                           
  4195                           	psect	rparam
  4196  0000                     tosu	equ	0xFFF
  4197                           tosh	equ	0xFFE
  4198                           tosl	equ	0xFFD
  4199                           stkptr	equ	0xFFC
  4200                           pclatu	equ	0xFFB
  4201                           pclath	equ	0xFFA
  4202                           pcl	equ	0xFF9
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           indf0	equ	0xFEF
  4210                           postinc0	equ	0xFEE
  4211                           postdec0	equ	0xFED
  4212                           preinc0	equ	0xFEC
  4213                           plusw0	equ	0xFEB
  4214                           fsr0h	equ	0xFEA
  4215                           fsr0l	equ	0xFE9
  4216                           wreg	equ	0xFE8
  4217                           indf1	equ	0xFE7
  4218                           postinc1	equ	0xFE6
  4219                           postdec1	equ	0xFE5
  4220                           preinc1	equ	0xFE4
  4221                           plusw1	equ	0xFE3
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           bsr	equ	0xFE0
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           preinc2	equ	0xFDC
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8


Data Sizes:
    Strings     75
    Constant    0
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     16      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> palabra(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> palabra(BANK0[20]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S733_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> palabra(BANK0[20]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> palabra(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> palabra(BANK0[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[10]), STR_5(CODE[16]), STR_4(CODE[11]), STR_3(CODE[15]), 
		 -> STR_2(CODE[11]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10760
                                             93 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                              0 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             7     4      3     685
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3    1293
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      20        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb 23 22:25:20 2019

                      _a 0068                        _i 006A                       l15 15F4  
    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l100 175A                      l111 0BA4                      l113 0BAC  
                    l845 19F0                      l876 120E             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      u901 0FEA                      u920 1022  
                    u760 169A                      u850 19D6                      u860 1A22  
                    u780 16E2                      u870 1A24                      u980 13C2  
           __CFG_BOR$OFF 000000                      _abs 19C8                      _pad 172A  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0013                     l2101 17CE  
                   l2103 17D4                     l2111 180A                     l2113 1812  
                   l2105 17DA                     l2131 1850                     l2117 1826  
                   l2109 17E2                     l2125 183E                     l2037 18BE  
                   l2143 189A                     l2127 1844                     l2135 1858  
                   l2039 18E4                     l2215 0EC0                     l2129 184A  
                   l2137 1880                     l2139 1888                     l2171 0DA8  
                   l1701 0FBC                     l1631 16A2                     l2191 0E26  
                   l1713 100A                     l1641 199A                     l2099 17C8  
                   l1715 101E                     l1707 0FE4                     l1651 1A38  
                   l1733 10B6                     l1725 107A                     l1645 19B0  
                   l1661 1744                     l1805 0BC6                     l1901 0898  
                   l1671 177C                     l1911 08B4                     l1903 08A8  
                   l1729 1090                     l1761 1406                     l1753 13AA  
                   l1745 136C                     l1649 1A34                     l1665 1752  
                   l1809 0BD4                     l1851 10EE                     l1755 13BE  
                   l1675 17AA                     l1667 1764                     l1843 0D4C  
                   l1819 0CCC                     l1923 08CA                     l1915 08BA  
                   l1907 08AE                     l1781 1988                     l1765 141C  
                   l1749 1390                     l1941 09A6                     l1925 090C  
                   l1871 117A                     l1839 0D34                     l1791 0B86  
                   l1919 08C0                     l1865 1144                     l1849 10EA  
                   l1769 1442                     l1937 097A                     l1875 11AE  
                   l1867 114C                     l1859 1134                     l1963 0ADA  
                   l1939 0998                     l1869 1152                     l1957 0A9E  
                   l1973 0AFC                     ?_pad 0011                     l1967 0AE4  
                   l1899 0894                     STR_1 0820                     STR_2 0837  
                   STR_3 0811                     STR_4 082C                     STR_5 0801  
                   STR_6 0842                     u1020 1984                     u1100 0CDA  
                   u1030 0B58                     u1120 0CFC                     u1040 0B5A  
                   u1121 0CFA                     u1210 11DE                     u1130 0D0A  
                   u1220 11E0                     u1140 0D10                     u1300 09DE  
                   u1070 0B9A                     u1310 09E0                     u1160 0D1E  
                   u1320 09EC                     u1090 0BC0                     u1340 0A20  
                   u1405 1242                     u1190 1130                     u1415 1264  
                   u1507 0DE0                     u1460 0E04                     u1365 1472  
                   u1517 0E36                     u1470 0E5A                     u1375 148E  
                   u1607 12A0                     u1527 0E7C                     u1480 0EF4  
                   u1385 14B0                     u1617 1316                     u1537 0EAA  
                   u1707 15E8                     u1627 1320                     u1395 1226  
                   u1547 0ED0                     u1717 160E                     u1637 132A  
                   u1557 0F28                     u1727 1626                     u1647 1336  
                   u1567 0F44                     u1737 1650                     u1657 15A2  
                   u1577 0F60                     u1497 0D90                     u1747 1668  
                   u1667 15B0                     u1587 0F7C                     u1757 14E2  
                   u1677 15BE                     u1597 1296                     u1767 14EC  
                   u1687 15CC                     u1777 1562                     u1697 15DA  
                   u1787 156C                     u1797 157A             __CFG_PWRT$ON 000000  
                   abs@a 0013                     _dbuf 006C                     _atoi 10D8  
                   _main 0D76                     _dtoa 0B30                     _prec 0064  
                   _nout 0060                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000          __end_of_Lcd_Cmd 1584          __end_of_Lcd_Out 183A  
          __CFG_MCLRE$ON 000000             ___param_bank 000000               _Lcd_Chr_CP 1218  
                  ??_abs 0015                    ??_pad 0017           Lcd_Out2@buffer 0005  
          __CFG_PLLDIV$1 000000          __end_of___aodiv 10D8                    ?_atoi 0008  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 1464  
           vfpfcnvrt@fmt 0042            __CFG_USBDIV$1 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 0066                    _fputc 168A                    _fputs 1990  
        __end_of_isdigit 1A2A                    atoi@n 0015                    pad@fp 0011  
                  atoi@s 0008                    _width 0062                    _putch 1A90  
                  dtoa@d 001E                    dtoa@i 003E                    dtoa@n 0036  
                  dtoa@p 0030                    dtoa@s 0034                    dtoa@w 0032  
        __end_of_isspace 1990                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 1952           __CFG_ICPRT$OFF 000000         __end_of_Lcd_Init 168A  
       __end_of_Lcd_Out2 18AA          __initialization 1A7A             __end_of_atoi 1218  
           __end_of_main 0F90             __end_of_dtoa 0D76                   ??_atoi 000A  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
        __CFG_CCP2MX$OFF 000000                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001                ??_Lcd_Cmd 0001            vfpfcnvrt@done 0052  
              ??_Lcd_Out 0007           __CFG_XINST$OFF 000000             vfprintf@cfmt 005C  
            ?_Lcd_Chr_CP 0001                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 1A54           __CFG_STVREN$ON 000000                   clear_0 1A80  
                 pad@buf 0013                   dtoa@fp 001C                   _strlen 1A2A  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 1900  
              ??_sprintf 005E               __accesstop 0060  __end_of__initialization 1A86  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 172A            __end_of_fputs 19C8            __end_of_putch 1A92  
              ?_Lcd_Init 0001                ?_Lcd_Out2 0004          __CFG_LPT1OSC$ON 000000  
                ??_fputc 0005                  ??_fputs 000E      __size_of_Lcd_Chr_CP 0128  
                ??_putch 0001               __pbssBANK0 0060                  ?___wmul 0001  
                ?_strlen 0001       __size_of_vfpfcnvrt 02E2               ??_Lcd_Init 0004  
             ??_Lcd_Out2 0007          __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 1464  
                _Lcd_Out 17C4                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0F90                  ___aomod 1340          __size_of___wmul 0026  
              ?_vfprintf 0056             __psmallconst 0800                  __pcinit 1A7A  
                __ramtop 0800                  __ptext0 0D76                  __ptext1 1900  
                __ptext2 18AA                  __ptext3 084E                  __ptext4 0B30  
                __ptext5 172A                  __ptext6 1A2A                  __ptext7 1990  
                __ptext8 168A                  __ptext9 1A90          __size_of_strlen 002A  
                _palabra 008C             __size_of_abs 0032             __size_of_pad 009A  
                _isdigit 19FA                  _isspace 1952                  atoi@neg 000E  
                _sprintf 1900     end_of_initialization 1A86                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0B30  
           ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004                Lcd_Out2@y 0009  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005C                  strlen@a 0003  
                strlen@s 0001                _PORTDbits 000F83                _TRISDbits 000F95  
     __end_of_Lcd_Chr_CP 1340              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 1A7A           __end_of_strlen 1A54  
    start_initialization 1A7A              __end_of_abs 19FA              __end_of_pad 17C4  
          Lcd_Out@buffer 0005        __size_of_Lcd_Init 0106        __size_of_Lcd_Out2 0070  
            vfprintf@fmt 0058                 ??___wmul 0005                 ??_strlen 0003  
          __pcstackBANK0 00A0         ___aodiv@dividend 0001                 ?_Lcd_Cmd 0001  
               ?_Lcd_Out 0004                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013        __size_of_vfprintf 0056              __smallconst 0800  
               ?_isdigit 0001                 ?_isspace 0001                 ?_sprintf 00A0  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0005                 Lcd_Out@x 0004         __CFG_WDTPS$32768 000000  
               Lcd_Out@y 0009                _vfpfcnvrt 084E             Lcd_Init@data 0005  
      ___wmul@multiplier 0001             Lcd_Out2@data 000A                 _Lcd_Init 1584  
               _Lcd_Out2 183A         __size_of_Lcd_Cmd 0120         __size_of_Lcd_Out 0076  
               __Hrparam 0000               vfprintf@ap 005A                 __Lrparam 0000  
             vfprintf@fp 0056         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
             sprintf@fmt 00A2                 _atoi$711 0010                 _atoi$712 0014  
               _atoi$713 0012         __size_of_isdigit 0030           Lcd_Chr_CP@data 0003  
               _dtoa$239 002E         __size_of_isspace 003E                 __ptext10 19C8  
               __ptext11 1340                 __ptext20 1584                 __ptext12 0F90  
               __ptext21 1464                 __ptext13 10D8                 __ptext14 1952  
               __ptext15 19FA                 __ptext16 1A54                 __ptext17 183A  
               __ptext18 17C4                 __ptext19 1218         __size_of_sprintf 0052  
            Lcd_Cmd@data 0003            __size_of_atoi 0140            __size_of_main 021A  
          __size_of_dtoa 0246                 _vfprintf 18AA              _isspace$729 0007  
       ___aomod@dividend 0001    __CFG_CPUDIV$OSC1_PLL2 000000              Lcd_Out@data 000A  
               isdigit@c 0001                sprintf@ap 00A8                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046            _vfpfcnvrt$254 0054  
        ___aomod@counter 0011                 sprintf@f 00AA                 sprintf@s 00A0  
           ___aodiv@sign 0012             ___aomod@sign 0012  
