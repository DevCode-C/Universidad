

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 05 15:40:27 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _PORTD	set	3971
    52  0000                     _PORTCbits	set	3970
    53  0000                     _PORTB	set	3969
    54  0000                     _LATCbits	set	3979
    55  0000                     _LATB	set	3978
    56  0000                     _LATD	set	3980
    57  0000                     _TRISCbits	set	3988
    58  0000                     _TRISB	set	3987
    59  0000                     _TRISD	set	3989
    60                           
    61                           ; #config settings
    62  0000                     
    63                           	psect	cinit
    64  007B5A                     __pcinit:
    65                           	opt callstack 0
    66  007B5A                     start_initialization:
    67                           	opt callstack 0
    68  007B5A                     __initialization:
    69                           	opt callstack 0
    70  007B5A                     end_of_initialization:
    71                           	opt callstack 0
    72  007B5A                     __end_of__initialization:
    73                           	opt callstack 0
    74  007B5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
    75  007B5C  6EF8               	movwf	tblptru,c
    76  007B5E  0100               	movlb	0
    77  007B60  EFB1  F03E         	goto	_main	;jump to C main() function
    78                           
    79                           	psect	cstackCOMRAM
    80  000001                     __pcstackCOMRAM:
    81                           	opt callstack 0
    82  000001                     ?_suma:
    83                           	opt callstack 0
    84  000001                     ?_resta:
    85                           	opt callstack 0
    86  000001                     ?___wmul:
    87                           	opt callstack 0
    88  000001                     ?___awdiv:
    89                           	opt callstack 0
    90  000001                     suma@s1:
    91                           	opt callstack 0
    92  000001                     resta@s1:
    93                           	opt callstack 0
    94  000001                     ___wmul@multiplier:
    95                           	opt callstack 0
    96  000001                     ___awdiv@dividend:
    97                           	opt callstack 0
    98                           
    99                           ; 2 bytes @ 0x0
   100  000001                     	ds	2
   101  000003                     suma@s2:
   102                           	opt callstack 0
   103  000003                     resta@s2:
   104                           	opt callstack 0
   105  000003                     ___wmul@multiplicand:
   106                           	opt callstack 0
   107  000003                     ___awdiv@divisor:
   108                           	opt callstack 0
   109                           
   110                           ; 2 bytes @ 0x2
   111  000003                     	ds	2
   112  000005                     ??_resta:
   113  000005                     ___awdiv@counter:
   114                           	opt callstack 0
   115  000005                     suma@x:
   116                           	opt callstack 0
   117  000005                     ___wmul@product:
   118                           	opt callstack 0
   119                           
   120                           ; 2 bytes @ 0x4
   121  000005                     	ds	1
   122  000006                     ___awdiv@sign:
   123                           	opt callstack 0
   124                           
   125                           ; 1 bytes @ 0x5
   126  000006                     	ds	1
   127  000007                     ?_mult:
   128                           	opt callstack 0
   129  000007                     resta@x:
   130                           	opt callstack 0
   131  000007                     mult@s1:
   132                           	opt callstack 0
   133  000007                     ___awdiv@quotient:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0x6
   137  000007                     	ds	2
   138  000009                     ?_scv:
   139                           	opt callstack 0
   140  000009                     mult@s2:
   141                           	opt callstack 0
   142  000009                     scv@s1:
   143                           	opt callstack 0
   144                           
   145                           ; 2 bytes @ 0x8
   146  000009                     	ds	2
   147  00000B                     ??_mult:
   148  00000B                     scv@s2:
   149                           	opt callstack 0
   150                           
   151                           ; 2 bytes @ 0xA
   152  00000B                     	ds	2
   153  00000D                     ??_scv:
   154  00000D                     mult@i:
   155                           	opt callstack 0
   156                           
   157                           ; 2 bytes @ 0xC
   158  00000D                     	ds	2
   159  00000F                     mult@x:
   160                           	opt callstack 0
   161  00000F                     scv@x1:
   162                           	opt callstack 0
   163                           
   164                           ; 2 bytes @ 0xE
   165  00000F                     	ds	2
   166  000011                     scv@x2:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0x10
   170  000011                     	ds	2
   171  000013                     scv@x:
   172                           	opt callstack 0
   173                           
   174                           ; 2 bytes @ 0x12
   175  000013                     	ds	2
   176  000015                     scv@i:
   177                           	opt callstack 0
   178                           
   179                           ; 2 bytes @ 0x14
   180  000015                     	ds	2
   181  000017                     ??_main:
   182                           
   183                           ; 1 bytes @ 0x16
   184  000017                     	ds	2
   185  000019                     main@SEL:
   186                           	opt callstack 0
   187                           
   188                           ; 2 bytes @ 0x18
   189  000019                     	ds	2
   190  00001B                     main@i:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x1A
   194  00001B                     	ds	2
   195  00001D                     main@D1:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x1C
   199  00001D                     	ds	2
   200  00001F                     main@D2:
   201                           	opt callstack 0
   202                           
   203                           ; 2 bytes @ 0x1E
   204  00001F                     	ds	2
   205  000021                     main@R0:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x20
   209  000021                     	ds	2
   210                           
   211 ;;
   212 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   213 ;;
   214 ;; *************** function _main *****************
   215 ;; Defined at:
   216 ;;		line 14 in file "PRACTICA2_05_02_19.c"
   217 ;; Parameters:    Size  Location     Type
   218 ;;		None
   219 ;; Auto vars:     Size  Location     Type
   220 ;;  i               2   26[COMRAM] int 
   221 ;;  R0              2   32[COMRAM] int 
   222 ;;  D2              2   30[COMRAM] int 
   223 ;;  D1              2   28[COMRAM] int 
   224 ;;  SEL             2   24[COMRAM] short 
   225 ;; Return value:  Size  Location     Type
   226 ;;                  1    wreg      void 
   227 ;; Registers used:
   228 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   229 ;; Tracked objects:
   230 ;;		On entry : 0/0
   231 ;;		On exit  : 0/0
   232 ;;		Unchanged: 0/0
   233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   234 ;;      Params:         0       0       0       0       0       0       0       0       0
   235 ;;      Locals:        10       0       0       0       0       0       0       0       0
   236 ;;      Temps:          2       0       0       0       0       0       0       0       0
   237 ;;      Totals:        12       0       0       0       0       0       0       0       0
   238 ;;Total ram usage:       12 bytes
   239 ;; Hardware stack levels required when called:    2
   240 ;; This function calls:
   241 ;;		_mult
   242 ;;		_resta
   243 ;;		_scv
   244 ;;		_suma
   245 ;; This function is called by:
   246 ;;		Startup code after reset
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           	psect	text0
   251  007D62                     __ptext0:
   252                           	opt callstack 0
   253  007D62                     _main:
   254                           	opt callstack 29
   255                           
   256                           ;PRACTICA2_05_02_19.c: 15:     int D1,D2,R0;;PRACTICA2_05_02_19.c: 16:     short int SEL
      +                          ;;PRACTICA2_05_02_19.c: 17:     TRISD=0x00;
   257                           
   258                           ;incstack = 0
   259  007D62  0E00               	movlw	0
   260  007D64  6E95               	movwf	3989,c	;volatile
   261                           
   262                           ;PRACTICA2_05_02_19.c: 18:     TRISB=0xFF;
   263  007D66  6893               	setf	3987,c	;volatile
   264                           
   265                           ;PRACTICA2_05_02_19.c: 19:     TRISCbits.RC0=1;
   266  007D68  8094               	bsf	3988,0,c	;volatile
   267                           
   268                           ;PRACTICA2_05_02_19.c: 20:     TRISCbits.RC1=0;
   269  007D6A  9294               	bcf	3988,1,c	;volatile
   270                           
   271                           ;PRACTICA2_05_02_19.c: 21:     TRISCbits.RC2=0;
   272  007D6C  9494               	bcf	3988,2,c	;volatile
   273  007D6E                     l33:
   274                           
   275                           ;PRACTICA2_05_02_19.c: 23:     LATD=0x00;
   276  007D6E  0E00               	movlw	0
   277  007D70  6E8C               	movwf	3980,c	;volatile
   278                           
   279                           ;PRACTICA2_05_02_19.c: 24:     LATB=0x00;
   280  007D72  0E00               	movlw	0
   281  007D74  6E8A               	movwf	3978,c	;volatile
   282                           
   283                           ;PRACTICA2_05_02_19.c: 25:     LATCbits.LATC0=0;
   284  007D76  908B               	bcf	3979,0,c	;volatile
   285                           
   286                           ;PRACTICA2_05_02_19.c: 26:     LATCbits.LATC1=0;
   287  007D78  928B               	bcf	3979,1,c	;volatile
   288                           
   289                           ;PRACTICA2_05_02_19.c: 27:     LATCbits.LATC2=0;
   290  007D7A  948B               	bcf	3979,2,c	;volatile
   291                           
   292                           ;PRACTICA2_05_02_19.c: 29:     while(PORTCbits.RC0==1){
   293  007D7C  D005               	goto	l34
   294  007D7E                     l35:
   295                           
   296                           ;PRACTICA2_05_02_19.c: 30:         D1=PORTB;
   297  007D7E  CF81 F01D          	movff	3969,main@D1	;volatile
   298  007D82  6A1E               	clrf	main@D1+1,c
   299                           
   300                           ;PRACTICA2_05_02_19.c: 31:         LATD=D1;
   301  007D84  C01D  FF8C         	movff	main@D1,3980	;volatile
   302  007D88                     l34:
   303                           
   304                           ;PRACTICA2_05_02_19.c: 29:     while(PORTCbits.RC0==1){
   305  007D88  B082               	btfsc	3970,0,c	;volatile
   306  007D8A  D7F9               	goto	l35
   307                           
   308                           ;PRACTICA2_05_02_19.c: 33:     LATCbits.LATC1=1;
   309  007D8C  828B               	bsf	3979,1,c	;volatile
   310                           
   311                           ;PRACTICA2_05_02_19.c: 34:     _delay((unsigned long)((500)*(8000000/4000.0)));
   312  007D8E  0E06               	movlw	6
   313  007D90  6E18               	movwf	(??_main+1)& (0+255),c
   314  007D92  0E13               	movlw	19
   315  007D94  6E17               	movwf	??_main& (0+255),c
   316  007D96  0EAE               	movlw	174
   317  007D98                     u577:
   318  007D98  2EE8               	decfsz	wreg,f,c
   319  007D9A  D7FE               	bra	u577
   320  007D9C  2E17               	decfsz	??_main& (0+255),f,c
   321  007D9E  D7FC               	bra	u577
   322  007DA0  2E18               	decfsz	(??_main+1)& (0+255),f,c
   323  007DA2  D7FA               	bra	u577
   324                           
   325                           ;PRACTICA2_05_02_19.c: 35:     LATD=0x00;
   326  007DA4  0E00               	movlw	0
   327  007DA6  6E8C               	movwf	3980,c	;volatile
   328                           
   329                           ;PRACTICA2_05_02_19.c: 36:     LATCbits.LATC1=0;
   330  007DA8  928B               	bcf	3979,1,c	;volatile
   331                           
   332                           ;PRACTICA2_05_02_19.c: 38:     while(PORTCbits.RC0==1){
   333  007DAA  D005               	goto	l37
   334  007DAC                     l38:
   335                           
   336                           ;PRACTICA2_05_02_19.c: 39:         D2=PORTB;
   337  007DAC  CF81 F01F          	movff	3969,main@D2	;volatile
   338  007DB0  6A20               	clrf	main@D2+1,c
   339                           
   340                           ;PRACTICA2_05_02_19.c: 40:         LATD=D2;
   341  007DB2  C01F  FF8C         	movff	main@D2,3980	;volatile
   342  007DB6                     l37:
   343                           
   344                           ;PRACTICA2_05_02_19.c: 38:     while(PORTCbits.RC0==1){
   345  007DB6  B082               	btfsc	3970,0,c	;volatile
   346  007DB8  D7F9               	goto	l38
   347                           
   348                           ;PRACTICA2_05_02_19.c: 42:     LATCbits.LATC1=1;
   349  007DBA  828B               	bsf	3979,1,c	;volatile
   350                           
   351                           ;PRACTICA2_05_02_19.c: 43:     _delay((unsigned long)((500)*(8000000/4000.0)));
   352  007DBC  0E06               	movlw	6
   353  007DBE  6E18               	movwf	(??_main+1)& (0+255),c
   354  007DC0  0E13               	movlw	19
   355  007DC2  6E17               	movwf	??_main& (0+255),c
   356  007DC4  0EAE               	movlw	174
   357  007DC6                     u587:
   358  007DC6  2EE8               	decfsz	wreg,f,c
   359  007DC8  D7FE               	bra	u587
   360  007DCA  2E17               	decfsz	??_main& (0+255),f,c
   361  007DCC  D7FC               	bra	u587
   362  007DCE  2E18               	decfsz	(??_main+1)& (0+255),f,c
   363  007DD0  D7FA               	bra	u587
   364                           
   365                           ;PRACTICA2_05_02_19.c: 44:     LATD=0x00;
   366  007DD2  0E00               	movlw	0
   367  007DD4  6E8C               	movwf	3980,c	;volatile
   368                           
   369                           ;PRACTICA2_05_02_19.c: 45:     LATCbits.LATC1=0;
   370  007DD6  928B               	bcf	3979,1,c	;volatile
   371  007DD8  D004               	goto	l41
   372  007DDA                     l42:
   373                           
   374                           ;PRACTICA2_05_02_19.c: 49:         LATCbits.LATC2=1;
   375  007DDA  848B               	bsf	3979,2,c	;volatile
   376                           
   377                           ;PRACTICA2_05_02_19.c: 50:         SEL=PORTB;
   378  007DDC  CF81 F019          	movff	3969,main@SEL	;volatile
   379  007DE0  6A1A               	clrf	main@SEL+1,c
   380  007DE2                     l41:
   381                           
   382                           ;PRACTICA2_05_02_19.c: 48:     while(PORTCbits.RC0==1){
   383  007DE2  B082               	btfsc	3970,0,c	;volatile
   384  007DE4  D7FA               	goto	l42
   385                           
   386                           ;PRACTICA2_05_02_19.c: 52:     LATCbits.LATC1=1;
   387  007DE6  828B               	bsf	3979,1,c	;volatile
   388                           
   389                           ;PRACTICA2_05_02_19.c: 53:     _delay((unsigned long)((500)*(8000000/4000.0)));
   390  007DE8  0E06               	movlw	6
   391  007DEA  6E18               	movwf	(??_main+1)& (0+255),c
   392  007DEC  0E13               	movlw	19
   393  007DEE  6E17               	movwf	??_main& (0+255),c
   394  007DF0  0EAE               	movlw	174
   395  007DF2                     u597:
   396  007DF2  2EE8               	decfsz	wreg,f,c
   397  007DF4  D7FE               	bra	u597
   398  007DF6  2E17               	decfsz	??_main& (0+255),f,c
   399  007DF8  D7FC               	bra	u597
   400  007DFA  2E18               	decfsz	(??_main+1)& (0+255),f,c
   401  007DFC  D7FA               	bra	u597
   402                           
   403                           ;PRACTICA2_05_02_19.c: 54:     LATCbits.LATC1=0;
   404  007DFE  928B               	bcf	3979,1,c	;volatile
   405                           
   406                           ;PRACTICA2_05_02_19.c: 55:     LATCbits.LATC2=0;
   407  007E00  948B               	bcf	3979,2,c	;volatile
   408                           
   409                           ;PRACTICA2_05_02_19.c: 56:     switch(SEL){
   410  007E02  D0E8               	goto	l1333
   411  007E04                     l1223:
   412                           
   413                           ;PRACTICA2_05_02_19.c: 58:             R0=suma(D1,D2);
   414  007E04  C01D  F001         	movff	main@D1,suma@s1
   415  007E08  C01E  F002         	movff	main@D1+1,suma@s1+1
   416  007E0C  C01F  F003         	movff	main@D2,suma@s2
   417  007E10  C020  F004         	movff	main@D2+1,suma@s2+1
   418  007E14  ECB2  F03D         	call	_suma	;wreg free
   419  007E18  C001  F021         	movff	?_suma,main@R0
   420  007E1C  C002  F022         	movff	?_suma+1,main@R0+1
   421                           
   422                           ;PRACTICA2_05_02_19.c: 59:             if(R0>255){
   423  007E20  BE22               	btfsc	main@R0+1,7,c
   424  007E22  D023               	goto	l50
   425  007E24  0422               	decf	main@R0+1,w,c
   426  007E26  A0D8               	btfss	status,0,c
   427  007E28  D020               	goto	l50
   428                           
   429                           ;PRACTICA2_05_02_19.c: 60:                 int i;;PRACTICA2_05_02_19.c: 61:             
      +                              for(i=0;i<255;i+=10){
   430  007E2A  0E00               	movlw	0
   431  007E2C  6E1C               	movwf	main@i+1,c
   432  007E2E  0E00               	movlw	0
   433  007E30  6E1B               	movwf	main@i,c
   434  007E32                     l47:
   435                           
   436                           ;PRACTICA2_05_02_19.c: 62:                     PORTD=i;
   437  007E32  C01B  FF83         	movff	main@i,3971	;volatile
   438                           
   439                           ;PRACTICA2_05_02_19.c: 63:                     _delay((unsigned long)((100)*(8000000/400
      +                          0.0)));
   440  007E36  0E02               	movlw	2
   441  007E38  6E18               	movwf	(??_main+1)& (0+255),c
   442  007E3A  0E04               	movlw	4
   443  007E3C  6E17               	movwf	??_main& (0+255),c
   444  007E3E  0EBA               	movlw	186
   445  007E40                     u607:
   446  007E40  2EE8               	decfsz	wreg,f,c
   447  007E42  D7FE               	bra	u607
   448  007E44  2E17               	decfsz	??_main& (0+255),f,c
   449  007E46  D7FC               	bra	u607
   450  007E48  2E18               	decfsz	(??_main+1)& (0+255),f,c
   451  007E4A  D7FA               	bra	u607
   452  007E4C  D000               	nop2	
   453                           
   454                           ;PRACTICA2_05_02_19.c: 64:                 }
   455  007E4E  0E0A               	movlw	10
   456  007E50  261B               	addwf	main@i,f,c
   457  007E52  0E00               	movlw	0
   458  007E54  221C               	addwfc	main@i+1,f,c
   459  007E56  BE1C               	btfsc	main@i+1,7,c
   460  007E58  D7EC               	goto	l47
   461  007E5A  501C               	movf	main@i+1,w,c
   462  007E5C  E188               	bnz	l33
   463  007E5E  281B               	incf	main@i,w,c
   464  007E60  B0D8               	btfsc	status,0,c
   465  007E62  D785               	goto	l33
   466  007E64  D7E6               	goto	l47
   467  007E66                     l51:
   468                           
   469                           ;PRACTICA2_05_02_19.c: 69:                     PORTD=R0;
   470  007E66  C021  FF83         	movff	main@R0,3971	;volatile
   471  007E6A                     l50:
   472                           
   473                           ;PRACTICA2_05_02_19.c: 68:                 while(PORTCbits.RC0==1){
   474  007E6A  B082               	btfsc	3970,0,c	;volatile
   475  007E6C  D7FC               	goto	l51
   476  007E6E                     u460:
   477                           
   478                           ;PRACTICA2_05_02_19.c: 71:                 _delay((unsigned long)((1000)*(8000000/4000.0
      +                          )));
   479  007E6E  0E0B               	movlw	11
   480  007E70  6E18               	movwf	(??_main+1)& (0+255),c
   481  007E72  0E26               	movlw	38
   482  007E74  6E17               	movwf	??_main& (0+255),c
   483  007E76  0E5E               	movlw	94
   484  007E78                     u617:
   485  007E78  2EE8               	decfsz	wreg,f,c
   486  007E7A  D7FE               	bra	u617
   487  007E7C  2E17               	decfsz	??_main& (0+255),f,c
   488  007E7E  D7FC               	bra	u617
   489  007E80  2E18               	decfsz	(??_main+1)& (0+255),f,c
   490  007E82  D7FA               	bra	u617
   491                           
   492                           ;PRACTICA2_05_02_19.c: 72:                 goto INICIO;
   493  007E84  D774               	goto	l33
   494  007E86                     l1245:
   495                           
   496                           ;PRACTICA2_05_02_19.c: 76:             R0=resta(D1,D2);
   497  007E86  C01D  F001         	movff	main@D1,resta@s1
   498  007E8A  C01E  F002         	movff	main@D1+1,resta@s1+1
   499  007E8E  C01F  F003         	movff	main@D2,resta@s2
   500  007E92  C020  F004         	movff	main@D2+1,resta@s2+1
   501  007E96  ECD0  F03D         	call	_resta	;wreg free
   502  007E9A  C001  F021         	movff	?_resta,main@R0
   503  007E9E  C002  F022         	movff	?_resta+1,main@R0+1
   504                           
   505                           ;PRACTICA2_05_02_19.c: 77:             while(PORTCbits.RC0==1){
   506  007EA2  D002               	goto	l54
   507  007EA4                     l55:
   508                           
   509                           ;PRACTICA2_05_02_19.c: 78:                 PORTD=R0;
   510  007EA4  C021  FF83         	movff	main@R0,3971	;volatile
   511  007EA8                     l54:
   512                           
   513                           ;PRACTICA2_05_02_19.c: 77:             while(PORTCbits.RC0==1){
   514  007EA8  B082               	btfsc	3970,0,c	;volatile
   515  007EAA  D7FC               	goto	l55
   516                           
   517                           ;PRACTICA2_05_02_19.c: 80:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   518  007EAC  0E0B               	movlw	11
   519  007EAE  6E18               	movwf	(??_main+1)& (0+255),c
   520  007EB0  0E26               	movlw	38
   521  007EB2  6E17               	movwf	??_main& (0+255),c
   522  007EB4  0E5E               	movlw	94
   523  007EB6                     u627:
   524  007EB6  2EE8               	decfsz	wreg,f,c
   525  007EB8  D7FE               	bra	u627
   526  007EBA  2E17               	decfsz	??_main& (0+255),f,c
   527  007EBC  D7FC               	bra	u627
   528  007EBE  2E18               	decfsz	(??_main+1)& (0+255),f,c
   529  007EC0  D7FA               	bra	u627
   530  007EC2  D06E               	goto	L1
   531  007EC4                     l1255:
   532                           
   533                           ;PRACTICA2_05_02_19.c: 86:             R0=mult(D1,D2);
   534  007EC4  C01D  F007         	movff	main@D1,mult@s1
   535  007EC8  C01E  F008         	movff	main@D1+1,mult@s1+1
   536  007ECC  C01F  F009         	movff	main@D2,mult@s2
   537  007ED0  C020  F00A         	movff	main@D2+1,mult@s2+1
   538  007ED4  ECF2  F03D         	call	_mult	;wreg free
   539  007ED8  C007  F021         	movff	?_mult,main@R0
   540  007EDC  C008  F022         	movff	?_mult+1,main@R0+1
   541                           
   542                           ;PRACTICA2_05_02_19.c: 87:             if(R0>0){
   543  007EE0  BE22               	btfsc	main@R0+1,7,c
   544  007EE2  D00B               	goto	l1267
   545  007EE4  5022               	movf	main@R0+1,w,c
   546  007EE6  E106               	bnz	l59
   547  007EE8  0421               	decf	main@R0,w,c
   548  007EEA  B0D8               	btfsc	status,0,c
   549  007EEC  D003               	goto	l59
   550  007EEE  D005               	goto	l1267
   551  007EF0                     l60:
   552                           
   553                           ;PRACTICA2_05_02_19.c: 89:                     PORTD=R0;
   554  007EF0  C021  FF83         	movff	main@R0,3971	;volatile
   555  007EF4                     l59:
   556                           
   557                           ;PRACTICA2_05_02_19.c: 88:                 while(PORTCbits.RC0==1){
   558  007EF4  A082               	btfss	3970,0,c	;volatile
   559  007EF6  D7BB               	goto	u460
   560  007EF8  D7FB               	goto	l60
   561  007EFA                     l1267:
   562  007EFA  BE22               	btfsc	main@R0+1,7,c
   563  007EFC  D00D               	goto	l1279
   564  007EFE  D7B7               	goto	u460
   565  007F00                     l1271:
   566                           
   567                           ;PRACTICA2_05_02_19.c: 96:                     PORTD=0;
   568  007F00  0E00               	movlw	0
   569  007F02  6E83               	movwf	3971,c	;volatile
   570                           
   571                           ;PRACTICA2_05_02_19.c: 97:                     PORTCbits.RC2=1;
   572  007F04  8482               	bsf	3970,2,c	;volatile
   573                           
   574                           ;PRACTICA2_05_02_19.c: 98:                     _delay((unsigned long)((30)*(8000000/4000
      +                          .0)));
   575  007F06  0E4E               	movlw	78
   576  007F08  6E17               	movwf	??_main& (0+255),c
   577  007F0A  0EEB               	movlw	235
   578  007F0C                     u637:
   579  007F0C  2EE8               	decfsz	wreg,f,c
   580  007F0E  D7FE               	bra	u637
   581  007F10  2E17               	decfsz	??_main& (0+255),f,c
   582  007F12  D7FC               	bra	u637
   583  007F14  F000               	nop	
   584                           
   585                           ;PRACTICA2_05_02_19.c: 99:                     PORTCbits.RC2=0;
   586  007F16  9482               	bcf	3970,2,c	;volatile
   587  007F18                     l1279:
   588                           
   589                           ;PRACTICA2_05_02_19.c: 95:                 while(PORTCbits.RC0==1){
   590  007F18  B082               	btfsc	3970,0,c	;volatile
   591  007F1A  D7F2               	goto	l1271
   592                           
   593                           ;PRACTICA2_05_02_19.c: 101:                  _delay((unsigned long)((1000)*(8000000/4000
      +                          .0)));
   594  007F1C  0E0B               	movlw	11
   595  007F1E  6E18               	movwf	(??_main+1)& (0+255),c
   596  007F20  0E26               	movlw	38
   597  007F22  6E17               	movwf	??_main& (0+255),c
   598  007F24  0E5E               	movlw	94
   599  007F26                     u647:
   600  007F26  2EE8               	decfsz	wreg,f,c
   601  007F28  D7FE               	bra	u647
   602  007F2A  2E17               	decfsz	??_main& (0+255),f,c
   603  007F2C  D7FC               	bra	u647
   604  007F2E  2E18               	decfsz	(??_main+1)& (0+255),f,c
   605  007F30  D7FA               	bra	u647
   606  007F32  D037               	goto	l1311
   607  007F34                     l1289:
   608                           
   609                           ;PRACTICA2_05_02_19.c: 111:             R0=scv(D1,D2);
   610  007F34  C01D  F009         	movff	main@D1,scv@s1
   611  007F38  C01E  F00A         	movff	main@D1+1,scv@s1+1
   612  007F3C  C01F  F00B         	movff	main@D2,scv@s2
   613  007F40  C020  F00C         	movff	main@D2+1,scv@s2+1
   614  007F44  EC6C  F03E         	call	_scv	;wreg free
   615  007F48  C009  F021         	movff	?_scv,main@R0
   616  007F4C  C00A  F022         	movff	?_scv+1,main@R0+1
   617                           
   618                           ;PRACTICA2_05_02_19.c: 112:             if(R0==0){
   619  007F50  5021               	movf	main@R0,w,c
   620  007F52  1022               	iorwf	main@R0+1,w,c
   621  007F54  A4D8               	btfss	status,2,c
   622  007F56  D010               	goto	l1303
   623                           
   624                           ;PRACTICA2_05_02_19.c: 113:                 PORTD=0xFF;
   625  007F58  6883               	setf	3971,c	;volatile
   626                           
   627                           ;PRACTICA2_05_02_19.c: 114:                 _delay((unsigned long)((100)*(8000000/4000.0
      +                          )));
   628  007F5A  0E02               	movlw	2
   629  007F5C  6E18               	movwf	(??_main+1)& (0+255),c
   630  007F5E  0E04               	movlw	4
   631  007F60  6E17               	movwf	??_main& (0+255),c
   632  007F62  0EBA               	movlw	186
   633  007F64                     u657:
   634  007F64  2EE8               	decfsz	wreg,f,c
   635  007F66  D7FE               	bra	u657
   636  007F68  2E17               	decfsz	??_main& (0+255),f,c
   637  007F6A  D7FC               	bra	u657
   638  007F6C  2E18               	decfsz	(??_main+1)& (0+255),f,c
   639  007F6E  D7FA               	bra	u657
   640  007F70  D000               	nop2	
   641  007F72                     l1299:
   642                           
   643                           ;PRACTICA2_05_02_19.c: 115:                 PORTD=0x00;
   644  007F72  0E00               	movlw	0
   645  007F74  6E83               	movwf	3971,c	;volatile
   646                           
   647                           ;PRACTICA2_05_02_19.c: 116:                 goto INICIO;
   648  007F76  D6FB               	goto	l33
   649  007F78                     l1303:
   650  007F78  5021               	movf	main@R0,w,c
   651  007F7A  1022               	iorwf	main@R0+1,w,c
   652  007F7C  A4D8               	btfss	status,2,c
   653  007F7E  D003               	goto	l72
   654  007F80  D012               	goto	l1315
   655  007F82                     l73:
   656                           
   657                           ;PRACTICA2_05_02_19.c: 120:                     PORTD=R0;
   658  007F82  C021  FF83         	movff	main@R0,3971	;volatile
   659  007F86                     l72:
   660                           
   661                           ;PRACTICA2_05_02_19.c: 119:                 while(PORTCbits.RC0==1){
   662  007F86  B082               	btfsc	3970,0,c	;volatile
   663  007F88  D7FC               	goto	l73
   664                           
   665                           ;PRACTICA2_05_02_19.c: 122:                 _delay((unsigned long)((1000)*(8000000/4000.
      +                          0)));
   666  007F8A  0E0B               	movlw	11
   667  007F8C  6E18               	movwf	(??_main+1)& (0+255),c
   668  007F8E  0E26               	movlw	38
   669  007F90  6E17               	movwf	??_main& (0+255),c
   670  007F92  0E5E               	movlw	94
   671  007F94                     u667:
   672  007F94  2EE8               	decfsz	wreg,f,c
   673  007F96  D7FE               	bra	u667
   674  007F98  2E17               	decfsz	??_main& (0+255),f,c
   675  007F9A  D7FC               	bra	u667
   676  007F9C  2E18               	decfsz	(??_main+1)& (0+255),f,c
   677  007F9E  D7FA               	bra	u667
   678  007FA0                     L1:
   679                           
   680                           ;PRACTICA2_05_02_19.c: 123:                 PORTCbits.RC1=0;
   681  007FA0  9282               	bcf	3970,1,c	;volatile
   682  007FA2                     l1311:
   683                           
   684                           ;PRACTICA2_05_02_19.c: 124:                 PORTCbits.RC2=0;
   685  007FA2  9482               	bcf	3970,2,c	;volatile
   686                           
   687                           ;PRACTICA2_05_02_19.c: 125:                 goto INICIO;
   688  007FA4  D6E4               	goto	l33
   689  007FA6                     l1315:
   690  007FA6  BE22               	btfsc	main@R0+1,7,c
   691  007FA8  D005               	goto	l1321
   692  007FAA  D71B               	goto	l41
   693  007FAC                     l78:
   694                           
   695                           ;PRACTICA2_05_02_19.c: 129:                     PORTCbits.RC1=1;
   696  007FAC  8282               	bsf	3970,1,c	;volatile
   697                           
   698                           ;PRACTICA2_05_02_19.c: 130:                     PORTCbits.RC2=1;
   699  007FAE  8482               	bsf	3970,2,c	;volatile
   700                           
   701                           ;PRACTICA2_05_02_19.c: 131:                     PORTD=0;
   702  007FB0  0E00               	movlw	0
   703  007FB2  6E83               	movwf	3971,c	;volatile
   704  007FB4                     l1321:
   705                           
   706                           ;PRACTICA2_05_02_19.c: 128:                 while(PORTCbits.RC0==1){
   707  007FB4  B082               	btfsc	3970,0,c	;volatile
   708  007FB6  D7FA               	goto	l78
   709                           
   710                           ;PRACTICA2_05_02_19.c: 136:                 _delay((unsigned long)((1000)*(8000000/4000.
      +                          0)));
   711  007FB8  0E0B               	movlw	11
   712  007FBA  6E18               	movwf	(??_main+1)& (0+255),c
   713  007FBC  0E26               	movlw	38
   714  007FBE  6E17               	movwf	??_main& (0+255),c
   715  007FC0  0E5E               	movlw	94
   716  007FC2                     u677:
   717  007FC2  2EE8               	decfsz	wreg,f,c
   718  007FC4  D7FE               	bra	u677
   719  007FC6  2E17               	decfsz	??_main& (0+255),f,c
   720  007FC8  D7FC               	bra	u677
   721  007FCA  2E18               	decfsz	(??_main+1)& (0+255),f,c
   722  007FCC  D7FA               	bra	u677
   723                           
   724                           ;PRACTICA2_05_02_19.c: 137:                 PORTCbits.RC1=0;
   725  007FCE  9282               	bcf	3970,1,c	;volatile
   726                           
   727                           ;PRACTICA2_05_02_19.c: 138:                 PORTCbits.RC2=0;
   728  007FD0  9482               	bcf	3970,2,c	;volatile
   729  007FD2  D7CF               	goto	l1299
   730  007FD4                     l1333:
   731  007FD4  C019  F017         	movff	main@SEL,??_main
   732  007FD8  C01A  F018         	movff	main@SEL+1,??_main+1
   733                           
   734                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   735                           ; Switch size 1, requested type "simple"
   736                           ; Number of cases is 1, Range of values is 0 to 0
   737                           ; switch strategies available:
   738                           ; Name         Instructions Cycles
   739                           ; simple_byte            4     3 (average)
   740                           ;	Chosen strategy is simple_byte
   741  007FDC  5018               	movf	??_main+1,w,c
   742  007FDE  0A00               	xorlw	0	; case 0
   743  007FE0  A4D8               	btfss	status,2,c
   744  007FE2  D6FF               	goto	l41
   745                           
   746                           ; Switch size 1, requested type "simple"
   747                           ; Number of cases is 4, Range of values is 1 to 8
   748                           ; switch strategies available:
   749                           ; Name         Instructions Cycles
   750                           ; simple_byte           13     7 (average)
   751                           ;	Chosen strategy is simple_byte
   752  007FE4  5017               	movf	??_main,w,c
   753  007FE6  0A01               	xorlw	1	; case 1
   754  007FE8  B4D8               	btfsc	status,2,c
   755  007FEA  D70C               	goto	l1223
   756  007FEC  0A03               	xorlw	3	; case 2
   757  007FEE  B4D8               	btfsc	status,2,c
   758  007FF0  D74A               	goto	l1245
   759  007FF2  0A06               	xorlw	6	; case 4
   760  007FF4  B4D8               	btfsc	status,2,c
   761  007FF6  D766               	goto	l1255
   762  007FF8  0A0C               	xorlw	12	; case 8
   763  007FFA  B4D8               	btfsc	status,2,c
   764  007FFC  D79B               	goto	l1289
   765  007FFE  D6F1               	goto	l41
   766  008000                     __end_of_main:
   767                           	opt callstack 0
   768                           
   769 ;; *************** function _suma *****************
   770 ;; Defined at:
   771 ;;		line 148 in file "PRACTICA2_05_02_19.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  s1              2    0[COMRAM] int 
   774 ;;  s2              2    2[COMRAM] int 
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  x               2    4[COMRAM] int 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  2    0[COMRAM] int 
   779 ;; Registers used:
   780 ;;		wreg, status,2, status,0
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   786 ;;      Params:         4       0       0       0       0       0       0       0       0
   787 ;;      Locals:         2       0       0       0       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0
   789 ;;      Totals:         6       0       0       0       0       0       0       0       0
   790 ;;Total ram usage:        6 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; This function calls:
   793 ;;		Nothing
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           	psect	text1
   800  007B64                     __ptext1:
   801                           	opt callstack 0
   802  007B64                     _suma:
   803                           	opt callstack 30
   804                           
   805                           ;PRACTICA2_05_02_19.c: 150:     x=s1+s2;
   806                           
   807                           ;incstack = 0
   808  007B64  5003               	movf	suma@s2,w,c
   809  007B66  2401               	addwf	suma@s1,w,c
   810  007B68  6E05               	movwf	suma@x,c
   811  007B6A  5004               	movf	suma@s2+1,w,c
   812  007B6C  2002               	addwfc	suma@s1+1,w,c
   813  007B6E  6E06               	movwf	suma@x+1,c
   814                           
   815                           ;PRACTICA2_05_02_19.c: 151:     return x;
   816  007B70  C005  F001         	movff	suma@x,?_suma
   817  007B74  C006  F002         	movff	suma@x+1,?_suma+1
   818  007B78  0012               	return		;funcret
   819  007B7A                     __end_of_suma:
   820                           	opt callstack 0
   821                           
   822 ;; *************** function _scv *****************
   823 ;; Defined at:
   824 ;;		line 179 in file "PRACTICA2_05_02_19.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  s1              2    8[COMRAM] int 
   827 ;;  s2              2   10[COMRAM] int 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  i               2   20[COMRAM] int 
   830 ;;  x               2   18[COMRAM] int 
   831 ;;  x2              2   16[COMRAM] int 
   832 ;;  x1              2   14[COMRAM] int 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2    8[COMRAM] int 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   842 ;;      Params:         4       0       0       0       0       0       0       0       0
   843 ;;      Locals:         8       0       0       0       0       0       0       0       0
   844 ;;      Temps:          2       0       0       0       0       0       0       0       0
   845 ;;      Totals:        14       0       0       0       0       0       0       0       0
   846 ;;Total ram usage:       14 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    1
   849 ;; This function calls:
   850 ;;		___awdiv
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text2
   857  007CD8                     __ptext2:
   858                           	opt callstack 0
   859  007CD8                     _scv:
   860                           	opt callstack 29
   861                           
   862                           ;incstack = 0
   863  007CD8  0E00               	movlw	0
   864  007CDA  6E10               	movwf	scv@x1+1,c
   865  007CDC  0E00               	movlw	0
   866  007CDE  6E0F               	movwf	scv@x1,c
   867  007CE0  0E00               	movlw	0
   868  007CE2  6E12               	movwf	scv@x2+1,c
   869  007CE4  0E00               	movlw	0
   870  007CE6  6E11               	movwf	scv@x2,c
   871                           
   872                           ;PRACTICA2_05_02_19.c: 181:     x1=s1;
   873  007CE8  C009  F00F         	movff	scv@s1,scv@x1
   874  007CEC  C00A  F010         	movff	scv@s1+1,scv@x1+1
   875                           
   876                           ;PRACTICA2_05_02_19.c: 182:     x2=s2;
   877  007CF0  C00B  F011         	movff	scv@s2,scv@x2
   878  007CF4  C00C  F012         	movff	scv@s2+1,scv@x2+1
   879                           
   880                           ;PRACTICA2_05_02_19.c: 183:     if(x2==0){
   881  007CF8  5011               	movf	scv@x2,w,c
   882  007CFA  1012               	iorwf	scv@x2+1,w,c
   883  007CFC  A4D8               	btfss	status,2,c
   884  007CFE  D01E               	goto	l1183
   885                           
   886                           ;PRACTICA2_05_02_19.c: 185:         for(int i=0;i<=255;i++){
   887  007D00  0E00               	movlw	0
   888  007D02  6E16               	movwf	scv@i+1,c
   889  007D04  0E00               	movlw	0
   890  007D06  6E15               	movwf	scv@i,c
   891  007D08                     l104:
   892                           
   893                           ;PRACTICA2_05_02_19.c: 186:           PORTD=i;
   894  007D08  C015  FF83         	movff	scv@i,3971	;volatile
   895                           
   896                           ;PRACTICA2_05_02_19.c: 187:           _delay((unsigned long)((100)*(8000000/4000.0)));
   897  007D0C  0E02               	movlw	2
   898  007D0E  6E0E               	movwf	(??_scv+1)& (0+255),c
   899  007D10  0E04               	movlw	4
   900  007D12  6E0D               	movwf	??_scv& (0+255),c
   901  007D14  0EBA               	movlw	186
   902  007D16                     u687:
   903  007D16  2EE8               	decfsz	wreg,f,c
   904  007D18  D7FE               	bra	u687
   905  007D1A  2E0D               	decfsz	??_scv& (0+255),f,c
   906  007D1C  D7FC               	bra	u687
   907  007D1E  2E0E               	decfsz	(??_scv+1)& (0+255),f,c
   908  007D20  D7FA               	bra	u687
   909  007D22  D000               	nop2	
   910                           
   911                           ;PRACTICA2_05_02_19.c: 188:         }
   912  007D24  4A15               	infsnz	scv@i,f,c
   913  007D26  2A16               	incf	scv@i+1,f,c
   914  007D28  BE16               	btfsc	scv@i+1,7,c
   915  007D2A  D7EE               	goto	l104
   916  007D2C  0416               	decf	scv@i+1,w,c
   917  007D2E  A0D8               	btfss	status,0,c
   918  007D30  D7EB               	goto	l104
   919                           
   920                           ;PRACTICA2_05_02_19.c: 190:         return x;
   921  007D32  0E00               	movlw	0
   922  007D34  6E0A               	movwf	?_scv+1,c
   923  007D36  0E00               	movlw	0
   924  007D38  6E09               	movwf	?_scv,c
   925  007D3A  0012               	return	
   926  007D3C                     l1183:
   927                           
   928                           ;PRACTICA2_05_02_19.c: 198:         x=x1/x2;
   929  007D3C  C00F  F001         	movff	scv@x1,___awdiv@dividend
   930  007D40  C010  F002         	movff	scv@x1+1,___awdiv@dividend+1
   931  007D44  C011  F003         	movff	scv@x2,___awdiv@divisor
   932  007D48  C012  F004         	movff	scv@x2+1,___awdiv@divisor+1
   933  007D4C  EC2A  F03E         	call	___awdiv	;wreg free
   934  007D50  C001  F013         	movff	?___awdiv,scv@x
   935  007D54  C002  F014         	movff	?___awdiv+1,scv@x+1
   936                           
   937                           ;PRACTICA2_05_02_19.c: 199:         return x;
   938  007D58  C013  F009         	movff	scv@x,?_scv
   939  007D5C  C014  F00A         	movff	scv@x+1,?_scv+1
   940  007D60  0012               	return		;funcret
   941  007D62                     __end_of_scv:
   942                           	opt callstack 0
   943                           
   944 ;; *************** function ___awdiv *****************
   945 ;; Defined at:
   946 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  dividend        2    0[COMRAM] int 
   949 ;;  divisor         2    2[COMRAM] int 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  quotient        2    6[COMRAM] int 
   952 ;;  sign            1    5[COMRAM] unsigned char 
   953 ;;  counter         1    4[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  2    0[COMRAM] int 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   963 ;;      Params:         4       0       0       0       0       0       0       0       0
   964 ;;      Locals:         4       0       0       0       0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0       0       0
   966 ;;      Totals:         8       0       0       0       0       0       0       0       0
   967 ;;Total ram usage:        8 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_scv
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text3
   977  007C54                     __ptext3:
   978                           	opt callstack 0
   979  007C54                     ___awdiv:
   980                           	opt callstack 29
   981                           
   982                           ;incstack = 0
   983  007C54  0E00               	movlw	0
   984  007C56  6E06               	movwf	___awdiv@sign,c
   985  007C58  AE04               	btfss	___awdiv@divisor+1,7,c
   986  007C5A  D006               	goto	l1077
   987  007C5C  6C03               	negf	___awdiv@divisor,c
   988  007C5E  1E04               	comf	___awdiv@divisor+1,f,c
   989  007C60  B0D8               	btfsc	status,0,c
   990  007C62  2A04               	incf	___awdiv@divisor+1,f,c
   991  007C64  0E01               	movlw	1
   992  007C66  6E06               	movwf	___awdiv@sign,c
   993  007C68                     l1077:
   994  007C68  AE02               	btfss	___awdiv@dividend+1,7,c
   995  007C6A  D006               	goto	l1083
   996  007C6C  6C01               	negf	___awdiv@dividend,c
   997  007C6E  1E02               	comf	___awdiv@dividend+1,f,c
   998  007C70  B0D8               	btfsc	status,0,c
   999  007C72  2A02               	incf	___awdiv@dividend+1,f,c
  1000  007C74  0E01               	movlw	1
  1001  007C76  1A06               	xorwf	___awdiv@sign,f,c
  1002  007C78                     l1083:
  1003  007C78  0E00               	movlw	0
  1004  007C7A  6E08               	movwf	___awdiv@quotient+1,c
  1005  007C7C  0E00               	movlw	0
  1006  007C7E  6E07               	movwf	___awdiv@quotient,c
  1007  007C80  5003               	movf	___awdiv@divisor,w,c
  1008  007C82  1004               	iorwf	___awdiv@divisor+1,w,c
  1009  007C84  B4D8               	btfsc	status,2,c
  1010  007C86  D01C               	goto	l1105
  1011  007C88  0E01               	movlw	1
  1012  007C8A  6E05               	movwf	___awdiv@counter,c
  1013  007C8C  D004               	goto	l1091
  1014  007C8E                     l1089:
  1015  007C8E  90D8               	bcf	status,0,c
  1016  007C90  3603               	rlcf	___awdiv@divisor,f,c
  1017  007C92  3604               	rlcf	___awdiv@divisor+1,f,c
  1018  007C94  2A05               	incf	___awdiv@counter,f,c
  1019  007C96                     l1091:
  1020  007C96  AE04               	btfss	___awdiv@divisor+1,7,c
  1021  007C98  D7FA               	goto	l1089
  1022  007C9A                     u320:
  1023  007C9A  90D8               	bcf	status,0,c
  1024  007C9C  3607               	rlcf	___awdiv@quotient,f,c
  1025  007C9E  3608               	rlcf	___awdiv@quotient+1,f,c
  1026  007CA0  5003               	movf	___awdiv@divisor,w,c
  1027  007CA2  5C01               	subwf	___awdiv@dividend,w,c
  1028  007CA4  5004               	movf	___awdiv@divisor+1,w,c
  1029  007CA6  5802               	subwfb	___awdiv@dividend+1,w,c
  1030  007CA8  A0D8               	btfss	status,0,c
  1031  007CAA  D005               	goto	l1101
  1032  007CAC  5003               	movf	___awdiv@divisor,w,c
  1033  007CAE  5E01               	subwf	___awdiv@dividend,f,c
  1034  007CB0  5004               	movf	___awdiv@divisor+1,w,c
  1035  007CB2  5A02               	subwfb	___awdiv@dividend+1,f,c
  1036  007CB4  8007               	bsf	___awdiv@quotient,0,c
  1037  007CB6                     l1101:
  1038  007CB6  90D8               	bcf	status,0,c
  1039  007CB8  3204               	rrcf	___awdiv@divisor+1,f,c
  1040  007CBA  3203               	rrcf	___awdiv@divisor,f,c
  1041  007CBC  2E05               	decfsz	___awdiv@counter,f,c
  1042  007CBE  D7ED               	goto	u320
  1043  007CC0                     l1105:
  1044  007CC0  5006               	movf	___awdiv@sign,w,c
  1045  007CC2  B4D8               	btfsc	status,2,c
  1046  007CC4  D004               	goto	l1109
  1047  007CC6  6C07               	negf	___awdiv@quotient,c
  1048  007CC8  1E08               	comf	___awdiv@quotient+1,f,c
  1049  007CCA  B0D8               	btfsc	status,0,c
  1050  007CCC  2A08               	incf	___awdiv@quotient+1,f,c
  1051  007CCE                     l1109:
  1052  007CCE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1053  007CD2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1054  007CD6  0012               	return		;funcret
  1055  007CD8                     __end_of___awdiv:
  1056                           	opt callstack 0
  1057                           
  1058 ;; *************** function _resta *****************
  1059 ;; Defined at:
  1060 ;;		line 153 in file "PRACTICA2_05_02_19.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  s1              2    0[COMRAM] int 
  1063 ;;  s2              2    2[COMRAM] int 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  x               2    6[COMRAM] int 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  2    0[COMRAM] int 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1075 ;;      Params:         4       0       0       0       0       0       0       0       0
  1076 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1077 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1078 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1079 ;;Total ram usage:        8 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text4
  1089  007BA0                     __ptext4:
  1090                           	opt callstack 0
  1091  007BA0                     _resta:
  1092                           	opt callstack 30
  1093                           
  1094                           ;PRACTICA2_05_02_19.c: 155:     x=s1-s2;
  1095                           
  1096                           ;incstack = 0
  1097  007BA0  5003               	movf	resta@s2,w,c
  1098  007BA2  5C01               	subwf	resta@s1,w,c
  1099  007BA4  6E07               	movwf	resta@x,c
  1100  007BA6  5004               	movf	resta@s2+1,w,c
  1101  007BA8  5802               	subwfb	resta@s1+1,w,c
  1102  007BAA  6E08               	movwf	resta@x+1,c
  1103                           
  1104                           ;PRACTICA2_05_02_19.c: 156:     if(x<0){
  1105  007BAC  AE08               	btfss	resta@x+1,7,c
  1106  007BAE  D015               	goto	l1131
  1107                           
  1108                           ;PRACTICA2_05_02_19.c: 157:         x=x*(-1);
  1109  007BB0  6C07               	negf	resta@x,c
  1110  007BB2  1E08               	comf	resta@x+1,f,c
  1111  007BB4  B0D8               	btfsc	status,0,c
  1112  007BB6  2A08               	incf	resta@x+1,f,c
  1113                           
  1114                           ;PRACTICA2_05_02_19.c: 158:         while(PORTCbits.RC0==1){
  1115  007BB8  D002               	goto	l89
  1116  007BBA                     l90:
  1117                           
  1118                           ;PRACTICA2_05_02_19.c: 159:             PORTCbits.RC1=1;
  1119  007BBA  8282               	bsf	3970,1,c	;volatile
  1120                           
  1121                           ;PRACTICA2_05_02_19.c: 160:             PORTCbits.RC2=1;
  1122  007BBC  8482               	bsf	3970,2,c	;volatile
  1123  007BBE                     l89:
  1124                           
  1125                           ;PRACTICA2_05_02_19.c: 158:         while(PORTCbits.RC0==1){
  1126  007BBE  B082               	btfsc	3970,0,c	;volatile
  1127  007BC0  D7FC               	goto	l90
  1128                           
  1129                           ;PRACTICA2_05_02_19.c: 162:         _delay((unsigned long)((2000)*(8000000/4000.0)));
  1130  007BC2  0E15               	movlw	21
  1131  007BC4  6E06               	movwf	(??_resta+1)& (0+255),c
  1132  007BC6  0E4B               	movlw	75
  1133  007BC8  6E05               	movwf	??_resta& (0+255),c
  1134  007BCA  0EBE               	movlw	190
  1135  007BCC                     u697:
  1136  007BCC  2EE8               	decfsz	wreg,f,c
  1137  007BCE  D7FE               	bra	u697
  1138  007BD0  2E05               	decfsz	??_resta& (0+255),f,c
  1139  007BD2  D7FC               	bra	u697
  1140  007BD4  2E06               	decfsz	(??_resta+1)& (0+255),f,c
  1141  007BD6  D7FA               	bra	u697
  1142  007BD8  D000               	nop2	
  1143  007BDA                     l1131:
  1144                           
  1145                           ;PRACTICA2_05_02_19.c: 163:         return x;
  1146  007BDA  C007  F001         	movff	resta@x,?_resta
  1147  007BDE  C008  F002         	movff	resta@x+1,?_resta+1
  1148  007BE2  0012               	return		;funcret
  1149  007BE4                     __end_of_resta:
  1150                           	opt callstack 0
  1151                           
  1152 ;; *************** function _mult *****************
  1153 ;; Defined at:
  1154 ;;		line 166 in file "PRACTICA2_05_02_19.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  s1              2    6[COMRAM] int 
  1157 ;;  s2              2    8[COMRAM] int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  i               2   12[COMRAM] int 
  1160 ;;  x               2   14[COMRAM] int 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  2    6[COMRAM] int 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1170 ;;      Params:         4       0       0       0       0       0       0       0       0
  1171 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1172 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1173 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1174 ;;Total ram usage:       10 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    1
  1177 ;; This function calls:
  1178 ;;		___wmul
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text5
  1185  007BE4                     __ptext5:
  1186                           	opt callstack 0
  1187  007BE4                     _mult:
  1188                           	opt callstack 29
  1189                           
  1190                           ;PRACTICA2_05_02_19.c: 168:     x=s1*s2;
  1191                           
  1192                           ;incstack = 0
  1193  007BE4  C007  F001         	movff	mult@s1,___wmul@multiplier
  1194  007BE8  C008  F002         	movff	mult@s1+1,___wmul@multiplier+1
  1195  007BEC  C009  F003         	movff	mult@s2,___wmul@multiplicand
  1196  007BF0  C00A  F004         	movff	mult@s2+1,___wmul@multiplicand+1
  1197  007BF4  ECBD  F03D         	call	___wmul	;wreg free
  1198  007BF8  C001  F00F         	movff	?___wmul,mult@x
  1199  007BFC  C002  F010         	movff	?___wmul+1,mult@x+1
  1200                           
  1201                           ;PRACTICA2_05_02_19.c: 169:     if(x>255){
  1202  007C00  BE10               	btfsc	mult@x+1,7,c
  1203  007C02  D023               	goto	l96
  1204  007C04  0410               	decf	mult@x+1,w,c
  1205  007C06  A0D8               	btfss	status,0,c
  1206  007C08  D020               	goto	l96
  1207                           
  1208                           ;PRACTICA2_05_02_19.c: 170:         int i;;PRACTICA2_05_02_19.c: 171:         for(i=0;i<
      +                          255;i+=10){
  1209  007C0A  0E00               	movlw	0
  1210  007C0C  6E0E               	movwf	mult@i+1,c
  1211  007C0E  0E00               	movlw	0
  1212  007C10  6E0D               	movwf	mult@i,c
  1213  007C12                     l97:
  1214                           
  1215                           ;PRACTICA2_05_02_19.c: 172:             PORTD=i;
  1216  007C12  C00D  FF83         	movff	mult@i,3971	;volatile
  1217                           
  1218                           ;PRACTICA2_05_02_19.c: 173:             _delay((unsigned long)((100)*(8000000/4000.0)));
  1219  007C16  0E02               	movlw	2
  1220  007C18  6E0C               	movwf	(??_mult+1)& (0+255),c
  1221  007C1A  0E04               	movlw	4
  1222  007C1C  6E0B               	movwf	??_mult& (0+255),c
  1223  007C1E  0EBA               	movlw	186
  1224  007C20                     u707:
  1225  007C20  2EE8               	decfsz	wreg,f,c
  1226  007C22  D7FE               	bra	u707
  1227  007C24  2E0B               	decfsz	??_mult& (0+255),f,c
  1228  007C26  D7FC               	bra	u707
  1229  007C28  2E0C               	decfsz	(??_mult+1)& (0+255),f,c
  1230  007C2A  D7FA               	bra	u707
  1231  007C2C  D000               	nop2	
  1232                           
  1233                           ;PRACTICA2_05_02_19.c: 174:         }
  1234  007C2E  0E0A               	movlw	10
  1235  007C30  260D               	addwf	mult@i,f,c
  1236  007C32  0E00               	movlw	0
  1237  007C34  220E               	addwfc	mult@i+1,f,c
  1238  007C36  BE0E               	btfsc	mult@i+1,7,c
  1239  007C38  D7EC               	goto	l97
  1240  007C3A  500E               	movf	mult@i+1,w,c
  1241  007C3C  E103               	bnz	u380
  1242  007C3E  280D               	incf	mult@i,w,c
  1243  007C40  A0D8               	btfss	status,0,c
  1244  007C42  D7E7               	goto	l97
  1245  007C44                     u380:
  1246                           
  1247                           ;PRACTICA2_05_02_19.c: 176:         return x;
  1248  007C44  6807               	setf	?_mult,c
  1249  007C46  6808               	setf	?_mult+1,c
  1250  007C48  0012               	return	
  1251  007C4A                     l96:
  1252  007C4A  C00F  F007         	movff	mult@x,?_mult
  1253  007C4E  C010  F008         	movff	mult@x+1,?_mult+1
  1254  007C52  0012               	return		;funcret
  1255  007C54                     __end_of_mult:
  1256                           	opt callstack 0
  1257                           
  1258 ;; *************** function ___wmul *****************
  1259 ;; Defined at:
  1260 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  multiplier      2    0[COMRAM] unsigned int 
  1263 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  product         2    4[COMRAM] unsigned int 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  2    0[COMRAM] unsigned int 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0, prodl, prodh
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         4       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1278 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        6 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_mult
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text6
  1289  007B7A                     __ptext6:
  1290                           	opt callstack 0
  1291  007B7A                     ___wmul:
  1292                           	opt callstack 29
  1293                           
  1294                           ;incstack = 0
  1295  007B7A  5001               	movf	___wmul@multiplier,w,c
  1296  007B7C  0203               	mulwf	___wmul@multiplicand,c
  1297  007B7E  CFF3 F005          	movff	prodl,___wmul@product
  1298  007B82  CFF4 F006          	movff	prodh,___wmul@product+1
  1299  007B86  5001               	movf	___wmul@multiplier,w,c
  1300  007B88  0204               	mulwf	___wmul@multiplicand+1,c
  1301  007B8A  50F3               	movf	prodl,w,c
  1302  007B8C  2606               	addwf	___wmul@product+1,f,c
  1303  007B8E  5002               	movf	___wmul@multiplier+1,w,c
  1304  007B90  0203               	mulwf	___wmul@multiplicand,c
  1305  007B92  50F3               	movf	prodl,w,c
  1306  007B94  2606               	addwf	___wmul@product+1,f,c
  1307  007B96  C005  F001         	movff	___wmul@product,?___wmul
  1308  007B9A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1309  007B9E  0012               	return		;funcret
  1310  007BA0                     __end_of___wmul:
  1311                           	opt callstack 0
  1312  0000                     
  1313                           	psect	rparam
  1314  0000                     tosu	equ	0xFFF
  1315                           tosh	equ	0xFFE
  1316                           tosl	equ	0xFFD
  1317                           stkptr	equ	0xFFC
  1318                           pclatu	equ	0xFFB
  1319                           pclath	equ	0xFFA
  1320                           pcl	equ	0xFF9
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           indf0	equ	0xFEF
  1328                           postinc0	equ	0xFEE
  1329                           postdec0	equ	0xFED
  1330                           preinc0	equ	0xFEC
  1331                           plusw0	equ	0xFEB
  1332                           fsr0h	equ	0xFEA
  1333                           fsr0l	equ	0xFE9
  1334                           wreg	equ	0xFE8
  1335                           indf1	equ	0xFE7
  1336                           postinc1	equ	0xFE6
  1337                           postdec1	equ	0xFE5
  1338                           preinc1	equ	0xFE4
  1339                           plusw1	equ	0xFE3
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           bsr	equ	0xFE0
  1343                           indf2	equ	0xFDF
  1344                           postinc2	equ	0xFDE
  1345                           postdec2	equ	0xFDD
  1346                           preinc2	equ	0xFDC
  1347                           plusw2	equ	0xFDB
  1348                           fsr2h	equ	0xFDA
  1349                           fsr2l	equ	0xFD9
  1350                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      34
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_scv
    _scv->___awdiv
    _mult->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    2525
                                             22 COMRAM    12    12      0
                               _mult
                              _resta
                                _scv
                               _suma
 ---------------------------------------------------------------------------------
 (1) _suma                                                 6     2      4     220
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _scv                                                 14    10      4     833
                                              8 COMRAM    14    10      4
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _resta                                                8     4      4     287
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _mult                                                10     6      4     644
                                              6 COMRAM    10     6      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _mult
     ___wmul
   _resta
   _scv
     ___awdiv
   _suma

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     22      22       1       35.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 05 15:40:27 2019

                     l41 7DE2                       l33 7D6E                       l50 7E6A  
                     l42 7DDA                       l34 7D88                       l51 7E66  
                     l35 7D7E                       l60 7EF0                       l37 7DB6  
                     l54 7EA8                       l38 7DAC                       l55 7EA4  
                     l47 7E32                       l72 7F86                       l73 7F82  
                     l90 7BBA                       l59 7EF4                       l78 7FAC  
                     l96 7C4A                       l97 7C12                       l89 7BBE  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l104 7D08             __CFG_CPB$OFF 000000  
                    u320 7C9A             __CFG_CPD$OFF 000000                      u380 7C44  
                    u460 7E6E                      u607 7E40                      u617 7E78  
                    u707 7C20                      u627 7EB6                      u637 7F0C  
                    u647 7F26                      u657 7F64                      u577 7D98  
                    u667 7F94                      u587 7DC6                      u677 7FC2  
                    u597 7DF2                      u687 7D16                      u697 7BCC  
           __CFG_BOR$OFF 000000                      _scv 7CD8                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1101 7CB6                     l1105 7CC0                     l1131 7BDA  
                   l1109 7CCE                     l1311 7FA2                     l1303 7F78  
                   l1223 7E04                     l1321 7FB4                     l1091 7C96  
                   l1083 7C78                     l1315 7FA6                     l1077 7C68  
                   l1245 7E86                     l1333 7FD4                     l1183 7D3C  
                   l1271 7F00                     l1255 7EC4                     l1089 7C8E  
                   l1267 7EFA                     l1279 7F18                     l1289 7F34  
                   l1299 7F72                     ?_scv 0009                     _LATB 000F8A  
                   _LATD 000F8C             __CFG_PWRT$ON 000000                     _main 7D62  
                   _mult 7BE4                     _suma 7B64                     scv@i 0015  
                   scv@x 0013                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_scv 000D            __CFG_PLLDIV$1 000000  
                  ?_main 0001          __end_of___awdiv 7CD8                    ?_mult 0007  
                  ?_suma 0001          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTB 000F81                    _PORTD 000F83            __CFG_USBDIV$1 000000  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _resta 7BA0                    main@i 001B                    scv@s1 0009  
                  scv@s2 000B                    scv@x1 000F                    scv@x2 0011  
                  mult@i 000D                    mult@x 000F                    suma@x 0005  
                  status 000FD8           __CFG_ICPRT$OFF 000000          __initialization 7B5A  
           __end_of_main 8000             __end_of_mult 7C54             __end_of_suma 7B7A  
                 ??_main 0017                   ??_mult 000B                   ??_suma 0005  
          __activetblptr 000002          __CFG_CCP2MX$OFF 000000         ___awdiv@dividend 0001  
                 ?_resta 0001           __CFG_XINST$OFF 000000                   ___wmul 7B7A  
              ??___awdiv 0005           __CFG_STVREN$ON 000000         ___awdiv@quotient 0007  
                 main@D1 001D                   main@D2 001F                   main@R0 0021  
                 mult@s1 0007                   mult@s2 0009                   resta@x 0007  
                 tblptru 000FF8                   suma@s1 0001                   suma@s2 0003  
             __accesstop 0060  __end_of__initialization 7B5A          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_resta 7BE4  
        __CFG_LPT1OSC$ON 000000                  ??_resta 0005                  ?___wmul 0001  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___awdiv 7C54          __size_of___wmul 0026                  __pcinit 7B5A  
                __ramtop 0800                  __ptext0 7D62                  __ptext1 7B64  
                __ptext2 7CD8                  __ptext3 7C54                  __ptext4 7BA0  
                __ptext5 7BE4                  __ptext6 7B7A             __size_of_scv 008A  
                main@SEL 0019     end_of_initialization 7B5A            __Lmediumconst 0000  
                resta@s1 0001                  resta@s2 0003                _PORTCbits 000F82  
              _TRISCbits 000F94           __end_of___wmul 7BA0      start_initialization 7B5A  
            __end_of_scv 7D62                 ??___wmul 0005                 ?___awdiv 0001  
         __size_of_resta 0044           ___wmul@product 0005                 _LATCbits 000F8B  
       __CFG_WDTPS$32768 000000        ___wmul@multiplier 0001                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0084            __size_of_main 029E  
          __size_of_mult 0070            __size_of_suma 0016    __CFG_CPUDIV$OSC1_PLL2 000000  
